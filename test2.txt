diff --git a/SPHERA_v_8_0_descrizione_sintetica.pdf b/SPHERA_v_8_0_descrizione_sintetica.pdf
deleted file mode 100755
index b085320..0000000
Binary files a/SPHERA_v_8_0_descrizione_sintetica.pdf and /dev/null differ
diff --git a/SPHERA_v_8_0_descrizione_sintetica_per_registrazione_SIAE.pdf b/SPHERA_v_8_0_descrizione_sintetica_per_registrazione_SIAE.pdf
new file mode 100755
index 0000000..54a2f7f
Binary files /dev/null and b/SPHERA_v_8_0_descrizione_sintetica_per_registrazione_SIAE.pdf differ
diff --git a/auxiliary_procedures/ply2SPHERA_perimeter/src/ply2SPHERA_perimeter.f90 b/auxiliary_procedures/ply2SPHERA_perimeter/src/ply2SPHERA_perimeter.f90
index cb37d34..5c43ecc 100644
--- a/auxiliary_procedures/ply2SPHERA_perimeter/src/ply2SPHERA_perimeter.f90
+++ b/auxiliary_procedures/ply2SPHERA_perimeter/src/ply2SPHERA_perimeter.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/doc/SPHERA_v_8_0_documentation_FOSS.pdf b/doc/SPHERA_v_8_0_documentation_FOSS.pdf
new file mode 100755
index 0000000..ae91edc
Binary files /dev/null and b/doc/SPHERA_v_8_0_documentation_FOSS.pdf differ
diff --git a/doc/SPHERA_v_8_0_documentation_for_SIAE_registration.pdf b/doc/SPHERA_v_8_0_documentation_for_SIAE_registration.pdf
deleted file mode 100755
index 029d6fa..0000000
Binary files a/doc/SPHERA_v_8_0_documentation_for_SIAE_registration.pdf and /dev/null differ
diff --git a/input/2D_erosional_dam_break_SPHERA_demo/2D_erosional_dam_break_SPHERA_demo.inp b/input/2D_erosional_dam_break_SPHERA_demo/2D_erosional_dam_break_SPHERA_demo.inp
index 24828e8..48b62cb 100755
--- a/input/2D_erosional_dam_break_SPHERA_demo/2D_erosional_dam_break_SPHERA_demo.inp
+++ b/input/2D_erosional_dam_break_SPHERA_demo/2D_erosional_dam_break_SPHERA_demo.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: 2D_erosional_dam_break_SPHERA_demo.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Simple and demonstrative 2D erosional dam break (rough resolution).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/2jets_plate_DBSPH_high_res/2jets_plate_DBSPH_high_res.inp b/input/2jets_plate_DBSPH_high_res/2jets_plate_DBSPH_high_res.inp
index e701c9c..304e02a 100755
--- a/input/2jets_plate_DBSPH_high_res/2jets_plate_DBSPH_high_res.inp
+++ b/input/2jets_plate_DBSPH_high_res/2jets_plate_DBSPH_high_res.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: 2jets_plate_DBSPH_high_res.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2013 (IJNME).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/2jets_plate_DBSPH_low_res/2jets_plate_DBSPH_low_res.inp b/input/2jets_plate_DBSPH_low_res/2jets_plate_DBSPH_low_res.inp
index 649e76b..cd19f82 100755
--- a/input/2jets_plate_DBSPH_low_res/2jets_plate_DBSPH_low_res.inp
+++ b/input/2jets_plate_DBSPH_low_res/2jets_plate_DBSPH_low_res.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: 2jets_plate_DBSPH_low_res.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2013 (IJNME).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/2jets_plate_SASPH_low_res/2jets_plate_SASPH_low_res.inp b/input/2jets_plate_SASPH_low_res/2jets_plate_SASPH_low_res.inp
index 36a1453..f08c634 100755
--- a/input/2jets_plate_SASPH_low_res/2jets_plate_SASPH_low_res.inp
+++ b/input/2jets_plate_SASPH_low_res/2jets_plate_SASPH_low_res.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: 2jets_plate_SASPH_low_res.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2013 (IJNME).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/Archimede/Archimede.inp b/input/Archimede/Archimede.inp
index f4cb370..db06d1a 100755
--- a/input/Archimede/Archimede.inp
+++ b/input/Archimede/Archimede.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: Archimede.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Simple and demonstrative test case: solid cube leaned on still water 
 !    (rough resolution).
 !
diff --git a/input/SPHERA_main_input_file_template_with_comments.inp b/input/SPHERA_main_input_file_template_with_comments.inp
index 41d41af..4fb9ae9 100755
--- a/input/SPHERA_main_input_file_template_with_comments.inp
+++ b/input/SPHERA_main_input_file_template_with_comments.inp
@@ -3,12 +3,11 @@ version.subversion   !
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-; SPHERA has been authored for RSE SpA by 
-!    Andrea Amicarelli, Antonio Di Monaco, Sauro Manenti, Elia Bon, Daria Gatti, Giordano Agate, Stefano Falappi, 
-!    Barbara Flamini, Roberto Guandalini, David Zuccalà).
-! Main numerical developments of SPHERA: 
-!    Amicarelli et al. (2015,CAF), Amicarelli et al. (2013,IJNME), Manenti et al. (2012,JHE), Di Monaco et al. (2011,EACFM). 
-! Email contact: andrea.amicarelli@rse-web.it
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
+
+
+
+! SPHERA authors and email contact are providedoin SPHERA documentation.
 
 ! This file is part of SPHERA.
 ! SPHERA is free software: you can redistribute it and/or modify
diff --git a/input/asymmetric_wedge_20deg_light/asymmetric_wedge_20deg_light.inp b/input/asymmetric_wedge_20deg_light/asymmetric_wedge_20deg_light.inp
index 619547f..316e6ef 100755
--- a/input/asymmetric_wedge_20deg_light/asymmetric_wedge_20deg_light.inp
+++ b/input/asymmetric_wedge_20deg_light/asymmetric_wedge_20deg_light.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: asymmetric_wedge_20deg_light.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/asymmetric_wedge_20deg_medium/asymmetric_wedge_20deg_medium.inp b/input/asymmetric_wedge_20deg_medium/asymmetric_wedge_20deg_medium.inp
index a71c9a6..3932642 100755
--- a/input/asymmetric_wedge_20deg_medium/asymmetric_wedge_20deg_medium.inp
+++ b/input/asymmetric_wedge_20deg_medium/asymmetric_wedge_20deg_medium.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: asymmetric_wedge_20deg_medium.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/body-body_impact_asymmetric/body-body_impact_asymmetric.inp b/input/body-body_impact_asymmetric/body-body_impact_asymmetric.inp
index ecbcaeb..7e632b5 100755
--- a/input/body-body_impact_asymmetric/body-body_impact_asymmetric.inp
+++ b/input/body-body_impact_asymmetric/body-body_impact_asymmetric.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: body-body_impact_asymmetric.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/body-body_impact_low_vel/body-body_impact_low_vel.inp b/input/body-body_impact_low_vel/body-body_impact_low_vel.inp
index 6ac4980..3acd3c6 100755
--- a/input/body-body_impact_low_vel/body-body_impact_low_vel.inp
+++ b/input/body-body_impact_low_vel/body-body_impact_low_vel.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: body-body_impact_low_vel.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/body-body_impact_symmetric/body-body_impact_symmetric.inp b/input/body-body_impact_symmetric/body-body_impact_symmetric.inp
index 8f82c83..64c6aff 100755
--- a/input/body-body_impact_symmetric/body-body_impact_symmetric.inp
+++ b/input/body-body_impact_symmetric/body-body_impact_symmetric.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: body-body_impact_symmetric.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/body-boundary_impact/body-boundary_impact.inp b/input/body-boundary_impact/body-boundary_impact.inp
index 7dd925e..1a7fe47 100755
--- a/input/body-boundary_impact/body-boundary_impact.inp
+++ b/input/body-boundary_impact/body-boundary_impact.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: body_boundary_impact.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/body-boundary_impact_low_vel/body-boundary_impact_low_vel.inp b/input/body-boundary_impact_low_vel/body-boundary_impact_low_vel.inp
index f81c3c3..30e31e9 100755
--- a/input/body-boundary_impact_low_vel/body-boundary_impact_low_vel.inp
+++ b/input/body-boundary_impact_low_vel/body-boundary_impact_low_vel.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: body_boundary_impact_low_vel.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/dam_break_2D_demo/dam_break_2D_demo.inp b/input/dam_break_2D_demo/dam_break_2D_demo.inp
index 8723562..9ea5b58 100755
--- a/input/dam_break_2D_demo/dam_break_2D_demo.inp
+++ b/input/dam_break_2D_demo/dam_break_2D_demo.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: dam_break_2D_demo.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Simple and demonstrative test case on a 2D dam break (rough resolution).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/dam_break_2_bodies/dam_break_2_bodies.inp b/input/dam_break_2_bodies/dam_break_2_bodies.inp
index 7a405fa..d68f6bf 100755
--- a/input/dam_break_2_bodies/dam_break_2_bodies.inp
+++ b/input/dam_break_2_bodies/dam_break_2_bodies.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: dam_break_2_bodies.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/dam_break_multi-body/dam_break_multi-body.inp b/input/dam_break_multi-body/dam_break_multi-body.inp
index 8ad213a..32f40d3 100755
--- a/input/dam_break_multi-body/dam_break_multi-body.inp
+++ b/input/dam_break_multi-body/dam_break_multi-body.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: dam_break_multi-body.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/jet_body-plate/jet_body-plate.inp b/input/jet_body-plate/jet_body-plate.inp
index 51c9138..69c29c7 100755
--- a/input/jet_body-plate/jet_body-plate.inp
+++ b/input/jet_body-plate/jet_body-plate.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: jet_body-plate.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/jet_plate_DBSPH/jet_plate_DBSPH.inp b/input/jet_plate_DBSPH/jet_plate_DBSPH.inp
index 6f7d557..b707b45 100755
--- a/input/jet_plate_DBSPH/jet_plate_DBSPH.inp
+++ b/input/jet_plate_DBSPH/jet_plate_DBSPH.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: jet_plate_DBSPH.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2013 (IJNME).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/jet_plate_DBSPH_low_res/jet_plate_DBSPH_low_res.inp b/input/jet_plate_DBSPH_low_res/jet_plate_DBSPH_low_res.inp
index 93b2c90..545afda 100755
--- a/input/jet_plate_DBSPH_low_res/jet_plate_DBSPH_low_res.inp
+++ b/input/jet_plate_DBSPH_low_res/jet_plate_DBSPH_low_res.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: jet_plate_DBSPH_low_res.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2013 (IJNME).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/jet_plate_SASPH_low_res/jet_plate_SASPH_low_res.inp b/input/jet_plate_SASPH_low_res/jet_plate_SASPH_low_res.inp
index b80c39b..80fa073 100755
--- a/input/jet_plate_SASPH_low_res/jet_plate_SASPH_low_res.inp
+++ b/input/jet_plate_SASPH_low_res/jet_plate_SASPH_low_res.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: jet_plate_SASPH_low_res.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2013 (IJNME).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/sloshing_tank_TbyTn_1_07/sloshing_tank_TbyTn_1_07.inp b/input/sloshing_tank_TbyTn_1_07/sloshing_tank_TbyTn_1_07.inp
index 1fde9f9..9f62138 100755
--- a/input/sloshing_tank_TbyTn_1_07/sloshing_tank_TbyTn_1_07.inp
+++ b/input/sloshing_tank_TbyTn_1_07/sloshing_tank_TbyTn_1_07.inp
@@ -1,5 +1,23 @@
 8.0
 
+!-------------------------------------------------------------------------------
+! File name and copyright: sloshing_tank_TbyTn_1_07.inp
+!    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
+! File description: input file for SPHERA v.8.0 (RSE SpA).
+!    Sloshing tank with resonance (Amicarelli et al. 2013, IJNME).
+!
+! This file is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
+! This file is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with this file. If not, see <http://www.gnu.org/licenses/>.
+!-------------------------------------------------------------------------------
+
 ##### TITLE #####
 sloshing_tank_TbyTn_1_07
 ##### END TITLE #####
@@ -2718,6 +2736,7 @@ pa 0.
      2.65400     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      2.65500     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      2.65600     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
+
      2.65700     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      2.65800     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      2.65900     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
@@ -6814,6 +6833,7 @@ pa 0.
      6.75000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      6.75100     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      6.75200     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
+
      6.75300     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      6.75400     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
      6.75500     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
@@ -10910,6 +10930,7 @@ pa 0.
     10.84600    -0.03237     0.00000     0.00000     0.00000     0.00000     0.00000
     10.84700    -0.03202     0.00000     0.00000     0.00000     0.00000     0.00000
     10.84800    -0.03168     0.00000     0.00000     0.00000     0.00000     0.00000
+
     10.84900    -0.03134     0.00000     0.00000     0.00000     0.00000     0.00000
     10.85000    -0.03099     0.00000     0.00000     0.00000     0.00000     0.00000
     10.85100    -0.03065     0.00000     0.00000     0.00000     0.00000     0.00000
@@ -15006,6 +15027,7 @@ pa 0.
     14.94200     0.08076     0.00000     0.00000     0.00000     0.00000     0.00000
     14.94300     0.08100     0.00000     0.00000     0.00000     0.00000     0.00000
     14.94400     0.08123     0.00000     0.00000     0.00000     0.00000     0.00000
+
     14.94500     0.08147     0.00000     0.00000     0.00000     0.00000     0.00000
     14.94600     0.08170     0.00000     0.00000     0.00000     0.00000     0.00000
     14.94700     0.08193     0.00000     0.00000     0.00000     0.00000     0.00000
@@ -19102,6 +19124,7 @@ pa 0.
     19.03800     0.09695     0.00000     0.00000     0.00000     0.00000     0.00000
     19.03900     0.09680     0.00000     0.00000     0.00000     0.00000     0.00000
     19.04000     0.09664     0.00000     0.00000     0.00000     0.00000     0.00000
+
     19.04100     0.09649     0.00000     0.00000     0.00000     0.00000     0.00000
     19.04200     0.09633     0.00000     0.00000     0.00000     0.00000     0.00000
     19.04300     0.09617     0.00000     0.00000     0.00000     0.00000     0.00000
diff --git a/input/spherical_Couette_flow/rough_res/spherical_Couette_flow.inp b/input/spherical_Couette_flow/rough_res/spherical_Couette_flow.inp
index a75be66..5bfa4e4 100755
--- a/input/spherical_Couette_flow/rough_res/spherical_Couette_flow.inp
+++ b/input/spherical_Couette_flow/rough_res/spherical_Couette_flow.inp
@@ -1,24 +1,20 @@
 8.0
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-; SPHERA has been authored for RSE SpA by 
-!    Andrea Amicarelli, Antonio Di Monaco, Sauro Manenti, Elia Bon, Daria Gatti, Giordano Agate, Stefano Falappi, 
-!    Barbara Flamini, Roberto Guandalini, David Zuccalà).
-! Main numerical developments of SPHERA: 
-!    Amicarelli et al. (2015,CAF), Amicarelli et al. (2013,IJNME), Manenti et al. (2012,JHE), Di Monaco et al. (2011,EACFM). 
-! Email contact: andrea.amicarelli@rse-web.it
-
-! This file is part of SPHERA.
-! SPHERA is free software: you can redistribute it and/or modify
+! File name and copyright: spherical_Couette_flow
+!    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
+! File description: input file for SPHERA v.8.0 (RSE SpA).
+!    Spherical Couette flow.
+!
+! This file is free software: you can redistribute it and/or modify
 ! it under the terms of the GNU General Public License as published by
 ! the Free Software Foundation, either version 3 of the License, or
 ! (at your option) any later version.
-! SPHERA is distributed in the hope that it will be useful,
+! This file is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
 ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 ! GNU General Public License for more details.
 ! You should have received a copy of the GNU General Public License
-! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
+! along with this file. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 ##### TITLE #####
diff --git a/input/spherical_Couette_flow/spherical_Couette_flow.inp b/input/spherical_Couette_flow/spherical_Couette_flow.inp
index a1a5962..576a7d0 100755
--- a/input/spherical_Couette_flow/spherical_Couette_flow.inp
+++ b/input/spherical_Couette_flow/spherical_Couette_flow.inp
@@ -1,24 +1,20 @@
 8.0
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-; SPHERA has been authored for RSE SpA by 
-!    Andrea Amicarelli, Antonio Di Monaco, Sauro Manenti, Elia Bon, Daria Gatti, Giordano Agate, Stefano Falappi, 
-!    Barbara Flamini, Roberto Guandalini, David Zuccalà).
-! Main numerical developments of SPHERA: 
-!    Amicarelli et al. (2015,CAF), Amicarelli et al. (2013,IJNME), Manenti et al. (2012,JHE), Di Monaco et al. (2011,EACFM). 
-! Email contact: andrea.amicarelli@rse-web.it
-
-! This file is part of SPHERA.
-! SPHERA is free software: you can redistribute it and/or modify
+! File name and copyright: spherical_Couette_flow
+!    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
+! File description: input file for SPHERA v.8.0 (RSE SpA).
+!    Spherical Couette flow.
+!
+! This file is free software: you can redistribute it and/or modify
 ! it under the terms of the GNU General Public License as published by
 ! the Free Software Foundation, either version 3 of the License, or
 ! (at your option) any later version.
-! SPHERA is distributed in the hope that it will be useful,
+! This file is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
 ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 ! GNU General Public License for more details.
 ! You should have received a copy of the GNU General Public License
-! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
+! along with this file. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 ##### TITLE #####
diff --git a/input/symmetric_wedge_20deg_light/symmetric_wedge_20deg_light.inp b/input/symmetric_wedge_20deg_light/symmetric_wedge_20deg_light.inp
index bd7da37..f770270 100755
--- a/input/symmetric_wedge_20deg_light/symmetric_wedge_20deg_light.inp
+++ b/input/symmetric_wedge_20deg_light/symmetric_wedge_20deg_light.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: symmetric_wedge_20deg_light.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/symmetric_wedge_20deg_medium/symmetric_wedge_20deg_medium.inp b/input/symmetric_wedge_20deg_medium/symmetric_wedge_20deg_medium.inp
index 66b86e9..2323fc7 100755
--- a/input/symmetric_wedge_20deg_medium/symmetric_wedge_20deg_medium.inp
+++ b/input/symmetric_wedge_20deg_medium/symmetric_wedge_20deg_medium.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: symmetric_wedge_20deg_medium.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Reference: Amicarelli et al. 2015 (CAF).
 !
 ! This file is free software: you can redistribute it and/or modify
diff --git a/input/water_box_free_surface/water_box_free_surface.inp b/input/water_box_free_surface/water_box_free_surface.inp
index 5554090..72f0dc2 100755
--- a/input/water_box_free_surface/water_box_free_surface.inp
+++ b/input/water_box_free_surface/water_box_free_surface.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: water_box_free_surface.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Simple and demonstrative 2D test case on hydrostatic conditions 
 !    (rough resolution).
 !
diff --git a/input/water_tank-body/water_tank-body.inp b/input/water_tank-body/water_tank-body.inp
index 39fd855..06b544a 100755
--- a/input/water_tank-body/water_tank-body.inp
+++ b/input/water_tank-body/water_tank-body.inp
@@ -3,7 +3,7 @@
 !-------------------------------------------------------------------------------
 ! File name and copyright: water_tank-body.inp
 !    Copyright 2015 (RSE SpA, authored by Andrea Amicarelli)
-! File description: input file for SPHERA (RSE SpA, Amicarelli et al.).
+! File description: input file for SPHERA v.8.0 (RSE SpA).
 !    Simple and demonstrative 2D test case on hydrostatic conditions and
 !    "fluid - solid body" interactions (rough resolution).
 !
diff --git a/src/BC/CancelOutgoneParticles_2D.f90 b/src/BC/CancelOutgoneParticles_2D.f90
index a9bbd90..0e4ba56 100755
--- a/src/BC/CancelOutgoneParticles_2D.f90
+++ b/src/BC/CancelOutgoneParticles_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/CancelOutgoneParticles_3D.f90 b/src/BC/CancelOutgoneParticles_3D.f90
index 35fe7ae..9e3893e 100755
--- a/src/BC/CancelOutgoneParticles_3D.f90
+++ b/src/BC/CancelOutgoneParticles_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     à).
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/FindFrame.f90 b/src/BC/FindFrame.f90
index df204a5..0984209 100644
--- a/src/BC/FindFrame.f90
+++ b/src/BC/FindFrame.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/FindLine.f90 b/src/BC/FindLine.f90
index ac52b4b..77aa49a 100644
--- a/src/BC/FindLine.f90
+++ b/src/BC/FindLine.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/GenerateSourceParticles_2D.f90 b/src/BC/GenerateSourceParticles_2D.f90
index fb4163e..e1c09ae 100644
--- a/src/BC/GenerateSourceParticles_2D.f90
+++ b/src/BC/GenerateSourceParticles_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -95,7 +94,6 @@ if (inttimeratio>pinttimeratio) then
                pg(nag)%Gamma = 1.
                pg(nag)%uni = zero
                pg(nag)%sigma = zero
-               pg(nag)%sigma_same_fluid = zero
                pg(nag)%dShep = zero 
                pg(nag)%FS = 0 
             endif
diff --git a/src/BC/GenerateSourceParticles_3D.f90 b/src/BC/GenerateSourceParticles_3D.f90
index ed6ea39..2b14b88 100644
--- a/src/BC/GenerateSourceParticles_3D.f90
+++ b/src/BC/GenerateSourceParticles_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !-----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -92,7 +91,6 @@ if (inttimeratio>pinttimeratio) then
                pg(nag)%Gamma = 1.
                pg(nag)%uni = zero
                pg(nag)%sigma = zero
-               pg(nag)%sigma_same_fluid = zero
                pg(nag)%dShep = zero 
                pg(nag)%FS = 0 
             endif
diff --git a/src/BC/NormFix.f90 b/src/BC/NormFix.f90
index ed1b60e..a63439f 100644
--- a/src/BC/NormFix.f90
+++ b/src/BC/NormFix.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/NumberSectionPoints.f90 b/src/BC/NumberSectionPoints.f90
index 8c43944..f32d341 100644
--- a/src/BC/NumberSectionPoints.f90
+++ b/src/BC/NumberSectionPoints.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/PreSourceParticles_2D.f90 b/src/BC/PreSourceParticles_2D.f90
index 75c531e..4b6a47a 100644
--- a/src/BC/PreSourceParticles_2D.f90
+++ b/src/BC/PreSourceParticles_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/PreSourceParticles_3D.f90 b/src/BC/PreSourceParticles_3D.f90
index 14c1944..e5875ec 100644
--- a/src/BC/PreSourceParticles_3D.f90
+++ b/src/BC/PreSourceParticles_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BC/VelLaw.f90 b/src/BC/VelLaw.f90
index ba23255..c597651 100644
--- a/src/BC/VelLaw.f90
+++ b/src/BC/VelLaw.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_mass/CalcPre.f90 b/src/BE_mass/CalcPre.f90
index ba10ad2..56c9eef 100644
--- a/src/BE_mass/CalcPre.f90
+++ b/src/BE_mass/CalcPre.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_mass/PressureSmoothing_2D.f90 b/src/BE_mass/PressureSmoothing_2D.f90
index d2e5093..989aa72 100755
--- a/src/BE_mass/PressureSmoothing_2D.f90
+++ b/src/BE_mass/PressureSmoothing_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_mass/PressureSmoothing_3D.f90 b/src/BE_mass/PressureSmoothing_3D.f90
index 1286fc3..a27872c 100755
--- a/src/BE_mass/PressureSmoothing_3D.f90
+++ b/src/BE_mass/PressureSmoothing_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_mass/inter_EqCont_2D.f90 b/src/BE_mass/inter_EqCont_2D.f90
index 7d5a473..4c6608b 100644
--- a/src/BE_mass/inter_EqCont_2D.f90
+++ b/src/BE_mass/inter_EqCont_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_mass/inter_EqCont_3D.f90 b/src/BE_mass/inter_EqCont_3D.f90
index e841aa9..389fc98 100644
--- a/src/BE_mass/inter_EqCont_3D.f90
+++ b/src/BE_mass/inter_EqCont_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_mass/inter_SmoothPres.f90 b/src/BE_mass/inter_SmoothPres.f90
index 6c5546d..415a5b5 100644
--- a/src/BE_mass/inter_SmoothPres.f90
+++ b/src/BE_mass/inter_SmoothPres.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_momentum/diffumorris.f90 b/src/BE_momentum/diffumorris.f90
index 9b5a1fa..789207f 100644
--- a/src/BE_momentum/diffumorris.f90
+++ b/src/BE_momentum/diffumorris.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_momentum/inter_EqMoto.f90 b/src/BE_momentum/inter_EqMoto.f90
index 3e82fac..5a0a3ce 100644
--- a/src/BE_momentum/inter_EqMoto.f90
+++ b/src/BE_momentum/inter_EqMoto.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -26,7 +25,7 @@
 !              are added at a later stage) and the energy equation RHS (this last equation is not validated).   
 !----------------------------------------------------------------------------------------------------------------------------------
 
-subroutine inter_EqMoto(npi,tpres,tdiss,tvisc)
+subroutine inter_EqMoto (npi,tpres,tdiss,tvisc)
 !------------------------
 ! Modules
 !------------------------ 
@@ -44,28 +43,12 @@ double precision :: rhoi,rhoj,amassj,pi,pj,alpha,veln,velti,veltj,deltan,pre
 double precision :: coeff,secinv,nupa,nu,modderveln,moddervelt,moddervel
 double precision :: dvtdn,denorm,rij_su_h,ke_coef,kacl_coef,rij_su_h_quad
 double precision :: vol_Shep,Ww_Shep,rijtemp,rijtemp2
-double precision :: gradmod,gradmodwacl,wu,denom,absv_pres_grav_inner
-double precision :: absv_Morris_inner,Morris_inner_weigth,kernel_der
-double precision :: dervel(3),dervelmorr(3),appopres(3),appodiss(3),rvw(3)
-double precision :: rvwalfa(3),rvwbeta(3),ragtemp(3),rvw_sum(3),rvw_semi_part(3)
-double precision :: DBSPH_wall_she_vis_term(3),t_visc_semi_part(3) 
+double precision :: gradmod,gradmodwacl,wu,denom
+double precision,dimension(3) :: dervel,dervelmorr,appopres,appodiss,rvw
+double precision,dimension(3) :: rvwalfa,rvwbeta,ragtemp
 !------------------------
 ! Explicit interfaces
 !------------------------
-interface 
-   subroutine viscomorris(npi,npj,npartint,mass_comput_part,dens_comput_part,  &
-   kin_visc_comput_part,mass_neighbour,dens_neighbour,kin_visc_neighbour,      &
-   kernel_der,vel_type,rel_dis,dervel,rvw)
-   implicit none
-   integer(4),intent(in) :: npi,npj,npartint
-   double precision,intent(in) :: mass_comput_part,dens_comput_part
-   double precision,intent(in) :: kin_visc_comput_part,mass_neighbour
-   double precision,intent(in) :: dens_neighbour,kin_visc_neighbour,kernel_der
-   double precision,intent(in) :: rel_dis(3),dervel(3)
-   character(3),intent(in) :: vel_type
-   double precision,intent(out) :: rvw(3)
-   end subroutine viscomorris
-end interface
 !------------------------
 ! Allocations
 !------------------------
@@ -81,9 +64,6 @@ dervelmorr(:) = zero
 deltan = 1.d+07
 ke_coef = Domain%coefke / Domain%h
 kacl_coef = Domain%coefkacl / Domain%h
-rvw_sum(:) = zero
-DBSPH_wall_she_vis_term(:) = 0.d0
-t_visc_semi_part(:) = 0.d0
 !------------------------
 ! Statements
 !------------------------
@@ -222,39 +202,22 @@ do contj=1,nPartIntorno(npi)
          endif
    endif
    tpres(:) = tpres(:) + appopres(:)
-! To compute Monaghan term (artificial viscosity)
    call viscomon (npi,npj,npartint,dervel,rvwalfa,rvwbeta)
    appodiss(:) = rvwalfa(:) + rvwbeta(:)
-! To add Monaghan term (artificial viscosity)
-   tdiss(:) = tdiss(:) + appodiss(:)
-! To compute Morris term (interaction with neighbouring fluid particle)    
-   call viscomorris(npi,npj,npartint,pg(npi)%mass,pg(npi)%dens,pg(npi)%visc,   &
-      pg(npj)%mass,pg(npj)%dens,pg(npj)%visc,PartKernel(2,npartint),           &
-      pg(npj)%vel_type,rag(1:3,npartint),dervel,rvw)
-! To add  Morris term (interaction with neighbouring fluid particle)
+! Monaghan term (artificial viscosity)
+   tdiss(:) = tdiss(:) + appodiss(:)   
+   call viscomorris (npi,npj,npartint,dervel,rvw)
    tvisc(:) = tvisc(:) + rvw(:)
-   rvw_sum(:) = rvw_sum(:) + rvw(:)
 ! Momentum equation: end
    if (esplosione) &
       pg(npi)%dEdT = pg(npi)%dEdT + half * (dervel(1) * (appopres(1) +         &
                      appodiss(1)) + dervel(2) * (appopres(2) + appodiss(2)) +  &
                      dervel(3) * (appopres(3) + appodiss(3)))
-enddo
-if (pg(npi)%visc>0.d0) then
-   absv_pres_grav_inner = dsqrt(dot_product(tpres,tpres)) + GI
-   absv_Morris_inner = dsqrt(dot_product(rvw_sum,rvw_sum))
-   Morris_inner_weigth = absv_Morris_inner / absv_pres_grav_inner * 100.d0
-   if (Morris_inner_weigth>5.d0) then
-      pg(npi)%laminar_flag = 1
-      else
-         pg(npi)%laminar_flag = 0
-   endif
-endif
-! Boundary contributions (DB-SPH), only in case of a simulated local laminar 
-! regime
-if ((DBSPH%n_w>0).and.(pg(npi)%laminar_flag==1)) then
+end do
+! Boundary contributions (DB-SPH)
+if ((Domain%tipo=="bsph").and.(DBSPH%n_w > 0)) then
    do contj=1,nPartIntorno_fw(npi)
-      npartint = (npi - 1) * NMAXPARTJ + contj
+      npartint = (npi - 1)* NMAXPARTJ + contj
       npj = PartIntorno_fw(npartint)
       dervel(:) = pg_w(npj)%vel(:) - pg(npi)%vel(:)
       appopres(:) = - pg_w(npj)%dens * pg_w(npj)%weight * kernel_fw(1,npartint)&
@@ -266,21 +229,10 @@ if ((DBSPH%n_w>0).and.(pg(npi)%laminar_flag==1)) then
                     (pg_w(npj)%dens * pg_w(npj)%dens)) * rag_fw(:,npartint) *  &
                     kernel_fw(2,npartint)  
       tpres(:) = tpres(:) + appopres(:)
-      call DBSPH_BC_shear_viscosity_term(npi,npj,npartint,                     &
-         DBSPH_wall_she_vis_term)
-! To compute Morris term (interaction with neighbouring semi-particle)    
-      kernel_der = kernel_fw(2,npartint)/(dot_product(rag_fw(:,npartint),      &
-                   rag_fw(:,npartint)) + eta2)
-      call viscomorris(npi,npj,npartint,pg(npi)%mass,pg(npi)%dens,pg(npi)%visc,&
-         pg_w(npj)%mass,pg_w(npj)%dens,pg_w(npj)%kin_visc_semi_part,kernel_der,&
-         "std",rag_fw(1:3,npartint),dervel,rvw_semi_part)
-      t_visc_semi_part(:) = t_visc_semi_part(:) + rvw_semi_part(:)   
-   enddo
-! Computation of the boundary shear viscosity term in DB-SPH-NS   
-   DBSPH_wall_she_vis_term(:) = DBSPH_wall_she_vis_term(:) / pg(npi)%dens /    &
-                                pg(npi)%Gamma
-! Update the overall (inner+BC) shear viscosity term in DB-SPH-NS
-   tvisc(:) = tvisc(:) + DBSPH_wall_she_vis_term(:) + t_visc_semi_part(:)
+      call viscomon_wall_elements(npi,npj,npartint,dervel,rvwalfa,rvwbeta)
+      call viscomorris_wall_elements(npi,npj,npartint,dervel,rvw)
+      tvisc(:) = tvisc(:) + rvw(:)
+   end do
 endif
 !------------------------
 ! Deallocations
diff --git a/src/BE_momentum/inter_SmoothVelo_2D.f90 b/src/BE_momentum/inter_SmoothVelo_2D.f90
index 0163089..badbd9a 100644
--- a/src/BE_momentum/inter_SmoothVelo_2D.f90
+++ b/src/BE_momentum/inter_SmoothVelo_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_momentum/inter_SmoothVelo_3D.f90 b/src/BE_momentum/inter_SmoothVelo_3D.f90
index 007d8bf..ff54871 100644
--- a/src/BE_momentum/inter_SmoothVelo_3D.f90
+++ b/src/BE_momentum/inter_SmoothVelo_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_momentum/viscomon.f90 b/src/BE_momentum/viscomon.f90
index 46eca2c..64be0d8 100644
--- a/src/BE_momentum/viscomon.f90
+++ b/src/BE_momentum/viscomon.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/BE_momentum/viscomorris.f90 b/src/BE_momentum/viscomorris.f90
index 3e8ef2a..1921441 100644
--- a/src/BE_momentum/viscomorris.f90
+++ b/src/BE_momentum/viscomorris.f90
@@ -1,50 +1,43 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: viscomorris
-! Description: To compute the volume inter-particle contributions to the shear 
-! viscosity term in the momentum equation (Morris, 1997, JCP). Both interactions
-! "fluid particle - fluid particle" and "fluid particle - semi-particle" (DBSPH)
-! are considered.   
+! Description: 
 !----------------------------------------------------------------------------------------------------------------------------------
-subroutine viscomorris(npi,npj,npartint,mass_comput_part,dens_comput_part,     &
-kin_visc_comput_part,mass_neighbour,dens_neighbour,kin_visc_neighbour,         &
-kernel_der,vel_type,rel_dis,dervel,rvw)
+
+subroutine viscomorris(npi,npj,npartint,dervel,rvw)
 !------------------------
 ! Modules
 !------------------------ 
 use Static_allocation_module
+use Hybrid_allocation_module
+use Dynamic_allocation_module
 !------------------------
 ! Declarations
 !------------------------
 implicit none
-integer(4),intent(in) :: npi,npj,npartint
-double precision,intent(in) :: mass_comput_part,dens_comput_part
-double precision,intent(in) :: kin_visc_comput_part,mass_neighbour
-double precision,intent(in) :: dens_neighbour,kin_visc_neighbour,kernel_der
-double precision,intent(in) :: rel_dis(3),dervel(3)
-character(3),intent(in) :: vel_type
-double precision,intent(out) :: rvw(3)
+integer(4), intent(IN) :: npi,npj,npartint
+double precision,intent(IN) :: dervel(3)
+double precision,intent(OUT) :: rvw(3)
 double precision :: amassj,rhotilde,anuitilde,factivis
 !------------------------
 ! Explicit interfaces
@@ -58,18 +51,21 @@ double precision :: amassj,rhotilde,anuitilde,factivis
 !------------------------
 ! Statements
 !------------------------
-if (vel_type/="std") then 
-   amassj = mass_comput_part
-   rhotilde = dens_comput_part
-   anuitilde = two * kin_visc_comput_part
+if (pg(npj)%vel_type/="std") then 
+   amassj = pg(npi)%mass
+   rhotilde = pg(npi)%dens
+   anuitilde = two * pg(npi)%visc
    else
-      amassj = mass_neighbour
-      rhotilde  = (kin_visc_comput_part * dens_comput_part + kin_visc_neighbour&
-                  * dens_neighbour + 0.001d0)
-      anuitilde = 4.0d0 * (kin_visc_comput_part * kin_visc_neighbour)      
-endif
+      amassj = pg(npj)%mass
+      rhotilde  = (pg(npi)%visc * pg(npi)%dens + pg(npj)%visc * pg(npj)%dens   &
+                  + 0.001d0)
+! Kinematic viscosity 
+      anuitilde = 4.0d0 * (pg(npi)%visc * pg(npj)%visc)      
+end if
 factivis = amassj * anuitilde / rhotilde
-rvw(1:3) = factivis * (-dervel(1:3) * kernel_der * dot_product(rel_dis,rel_dis))
+rvw(1:3) = factivis * ( - dervel(1:3) * PartKernel(2,npartint) *               &
+           (rag(1,npartint) * rag(1,npartint) + rag(2,npartint) *              &
+           rag(2,npartint) + rag(3,npartint) * rag(3,npartint)))
 !------------------------
 ! Deallocations
 !------------------------
diff --git a/src/Body_Transport/Body_dynamics_output.f90 b/src/Body_Transport/Body_dynamics_output.f90
index 8d34ad9..0f699a7 100644
--- a/src/Body_Transport/Body_dynamics_output.f90
+++ b/src/Body_Transport/Body_dynamics_output.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !-----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Body_Transport/Gamma_boun.f90 b/src/Body_Transport/Gamma_boun.f90
index 26b6290..b6399c3 100644
--- a/src/Body_Transport/Gamma_boun.f90
+++ b/src/Body_Transport/Gamma_boun.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Body_Transport/Input_Body_Dynamics.f90 b/src/Body_Transport/Input_Body_Dynamics.f90
index 9e45a1a..dd3a046 100644
--- a/src/Body_Transport/Input_Body_Dynamics.f90
+++ b/src/Body_Transport/Input_Body_Dynamics.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -37,7 +36,7 @@ use I_O_file_module
 ! Declarations
 !------------------------
 implicit none
-integer(4) :: i,nbi,npi,j,k,nei,erased_part,alloc_stat
+integer(4) :: i,nbi,npi,j,k,nei,erased_part,ier
 double precision :: xmin,xmax,ymin,ymax,zmin,zmax,mod_normal,aux_umax
 integer(4) :: vec_temp(3)
 double precision :: vec2_temp(3)
@@ -95,18 +94,7 @@ do i=1,n_bodies
    n_body_part = n_body_part + body_arr(i)%npart      
 end do
 ! Managing body particles  
-if (.not.allocated(bp_arr)) then
-   allocate(bp_arr(n_body_part),STAT=alloc_stat) 
-   if (alloc_stat/=0) then
-      write(nout,*)                                                            &
-         'Allocation of bp_arr in Input_Body_Dynamics failed;',                &
-         ' the program terminates here.'
-      stop ! Stop the main program
-      else
-         write (nout,*)                                                        &                
-            "Allocation of bp_arr in Input_Body_Dynamics successfully completed"
-   endif   
-endif
+allocate (bp_arr(n_body_part))
 npi = 1  
 ! Loop over the transported bodies (not to be parallelized)
 do nbi=1,n_bodies
@@ -281,20 +269,13 @@ enddo
 do i=1,n_body_part
    if (bp_arr(i)%area>0.d0) n_surf_body_part = n_surf_body_part + 1  
 enddo
-! Allocating the array of the surface body particles
-if (.not.allocated(surf_body_part)) then
-   allocate(surf_body_part(n_surf_body_part),STAT=alloc_stat) 
-   if (alloc_stat/=0) then
-      write(nout,*)                                                            &
-         'Allocation of surf_body_part in Input_Body_Dynamics failed;',        &
-         ' the program terminates here.'
-      stop ! Stop the main program
-      else
-         write (nout,*)                                                        &        
-            'Allocation of surf_body_part in Input_Body_Dynamics ',            &
-            ' successfully completed.'
-   endif   
-endif
+! Allocating the list of the surface body particles
+allocate (surf_body_part(n_surf_body_part),stat=ier)
+if (ier/=0) then
+   write (nout,'(1x,a,i2)') "   surf_body_part not allocated. Error code: ",ier
+   else
+      write (nout,'(1x,a)') "   Arrays surf_body_part successfully allocated "
+end if
 surf_body_part = 0
 ! Listing surface body particles
 j = 1
diff --git a/src/Body_Transport/RHS_body_dynamics.f90 b/src/Body_Transport/RHS_body_dynamics.f90
index 76b3beb..2b3aae9 100644
--- a/src/Body_Transport/RHS_body_dynamics.f90
+++ b/src/Body_Transport/RHS_body_dynamics.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -38,17 +37,13 @@ use Dynamic_allocation_module
 implicit none
 integer(4) :: npartint,i,j,npi,npj,Ncb,Nfzn,aux,nbi,npk,k,nbj,nbk
 integer(4) :: n_interactions,aux2,aux3,test,aux_locx_min,aux_locx_max,aux_int
-! AA!!! test
-integer(4) :: aux_scal_test
 double precision :: c2,k_masses,r_per,r_par,temp_dden,temp_acc,alfa_boun
 double precision :: aux_impact_vel,aux4,pres_mir
 double precision :: f_pres(3),temp(3),r_par_vec(3),f_coll_bp_bp(3)          
 double precision :: f_coll_bp_boun(3),dvar(3),pos_aux(3),normal_plane(3)
 double precision :: u_rel(3),x_rel(3),aux_acc(3),aux_vec(3),aux_vec2(3)
 double precision :: loc_pos(3),aux_locx_vert(3)
-! AA!!! test
 double precision :: aux_mat(3,3)
-integer(4),dimension(:),allocatable :: inter_front
 double precision,dimension(:,:),allocatable :: Force_mag_sum,r_per_min
 double precision,dimension(:,:),allocatable :: aux_gravity
 double precision,dimension(:,:,:),allocatable :: Force,Moment
@@ -57,24 +52,6 @@ double precision, external :: Gamma_boun
 !------------------------
 ! Explicit interfaces
 !------------------------
-interface
-   subroutine point_inout_convex_non_degenerate_polygon(point,n_sides,         &
-                                                        point_pol_1,           &
-                                                        point_pol_2,           &
-                                                        point_pol_3,           &
-                                                        point_pol_4,           &
-                                                        point_pol_5,           &
-                                                        point_pol_6,test)
-      implicit none
-      integer(4),intent(in) :: n_sides
-      double precision,intent(in) :: point(2),point_pol_1(2),point_pol_2(2)
-      double precision,intent(in) :: point_pol_3(2),point_pol_4(2)
-      double precision,intent(in) :: point_pol_5(2),point_pol_6(2)
-      integer(4),intent(inout) :: test
-      double precision :: dis1,dis2
-      double precision :: normal(2)
-   end subroutine point_inout_convex_non_degenerate_polygon
-end interface
 !------------------------
 ! Allocations
 !------------------------
@@ -85,8 +62,6 @@ allocate(Moment(n_bodies,aux,3))
 allocate(Force_mag_sum(n_bodies,aux))
 allocate(r_per_min(n_bodies,aux))
 allocate(aux_gravity(n_bodies,3))
-! AA!!! test 
-allocate(inter_front(n_bodies))
 !------------------------
 ! Initializations
 !------------------------
@@ -95,10 +70,6 @@ Moment = 0.d0
 Force_mag_sum = 0.d0
 r_per_min = 1000000.d0
 aux2 = 0
-! AA!!! test start
-inter_front(:) = 0
-aux_scal_test = 0
-! AA!!! test end
 !------------------------
 ! Statements
 !------------------------
@@ -246,21 +217,12 @@ do npi=1,n_body_part
                   aux_mat(:,1) = BoundaryFace(j)%T(:,1)
                   aux_mat(:,2) = BoundaryFace(j)%T(:,2)
                   aux_mat(:,3) = BoundaryFace(j)%T(:,3)
-                  if (BoundaryFace(j)%nodes==4) then
-                     call reference_system_change(bp_arr(npi)%pos,             &
-                        BoundaryFace(j)%Node(4)%GX,aux_mat,loc_pos)
-                     elseif (BoundaryFace(j)%nodes==3) then
-                        call reference_system_change(bp_arr(npi)%pos,          &
-                           BoundaryFace(j)%Node(3)%GX,aux_mat,loc_pos)
-                  endif
                   call reference_system_change(bp_arr(npi)%pos,                &
                      BoundaryFace(j)%Node(4)%GX,aux_mat,loc_pos)
-                  call point_inout_convex_non_degenerate_polygon(loc_pos(1:2), &
+                  call point_inout_polygone(loc_pos(1:2),                      &
                      BoundaryFace(j)%nodes,BoundaryFace(j)%Node(1)%LX(1:2),    &
                      BoundaryFace(j)%Node(2)%LX(1:2),                          &
                      BoundaryFace(j)%Node(3)%LX(1:2),                          &
-                     BoundaryFace(j)%Node(4)%LX(1:2),                          &
-                     BoundaryFace(j)%Node(4)%LX(1:2),                          &
                      BoundaryFace(j)%Node(4)%LX(1:2),test)
                   if ((r_per>0.d0).and.(r_per<=(2.d0*Domain%h)).and.           &
                      (test==1) ) then     
@@ -299,19 +261,12 @@ do npi=1,n_body_part
                            min(r_per,r_per_min(bp_arr(npi)%body,n_bodies+j))
                         if (Gamma_boun(r_per,Domain%h)<=0.d0)                  &
                            impact_vel(aux2,n_bodies+j) = 0.d0
-! AA!!! test
-                        aux_scal_test = aux_scal_test + 1                            
                         endif
                      endif
                   endif  
                endif
             end do 
          endif
-! AA!!! test start
-         inter_front(bp_arr(npi)%body) = max(inter_front(bp_arr(npi)%body),    &
-                                         aux_scal_test) 
-         aux_scal_test = 0
-! AA!!! test end
 ! 2D case
          if (ncord==2) then
             do j=1,NumBSides
@@ -430,10 +385,9 @@ do npi=1,n_body_part
 enddo     
 ! Loop over the transported bodies (global contributions from body-body and 
 ! boundary-body impacts; computation of Ic and its inverse)
-! AA!!!test sub for inter_front
 !$omp parallel do default(none) private(i,j,k_masses,alfa_boun,aux_int)        &
 !$omp shared(n_bodies,body_arr,ncord,it_start,it_corrente,aux,r_per_min,Domain)&
-!$omp shared(Force_mag_sum,Force,Moment,inter_front)
+!$omp shared(Force_mag_sum,Force,Moment)
 do i=1,n_bodies
    if (body_arr(i)%imposed_kinematics==0) then
 ! Forces and torques/moments
@@ -448,8 +402,6 @@ do i=1,n_bodies
             if (Force_mag_sum(i,j)>0.d0) then
                alfa_boun = (Gamma_boun(r_per_min(i,j),Domain%h) /              &
                            r_per_min(i,j) * k_masses) / Force_mag_sum(i,j)
-! AA!!! test                           
-               if (j>n_bodies) alfa_boun = alfa_boun / inter_front(i)
                Force(i,j,:) = Force(i,j,:) * alfa_boun
                body_arr(i)%Force(:) = body_arr(i)%Force(:) + Force(i,j,:)
                Moment(i,j,:) = Moment(i,j,:) * alfa_boun
@@ -519,8 +471,6 @@ deallocate(Moment)
 deallocate(Force_mag_sum)
 deallocate(r_per_min)
 deallocate(aux_gravity)
-! AA!!! test
-deallocate(inter_front)
 return
 end subroutine RHS_body_dynamics
 
diff --git a/src/Body_Transport/body_particles_to_continuity.f90 b/src/Body_Transport/body_particles_to_continuity.f90
index 3351bab..ea3c84f 100644
--- a/src/Body_Transport/body_particles_to_continuity.f90
+++ b/src/Body_Transport/body_particles_to_continuity.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Body_Transport/body_pressure_mirror.f90 b/src/Body_Transport/body_pressure_mirror.f90
index 958a2da..ba3ed0d 100644
--- a/src/Body_Transport/body_pressure_mirror.f90
+++ b/src/Body_Transport/body_pressure_mirror.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Body_Transport/body_pressure_postpro.f90 b/src/Body_Transport/body_pressure_postpro.f90
index d35ead7..528f72b 100644
--- a/src/Body_Transport/body_pressure_postpro.f90
+++ b/src/Body_Transport/body_pressure_postpro.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Body_Transport/body_to_smoothing_pres.f90 b/src/Body_Transport/body_to_smoothing_pres.f90
index 06992b5..d2ff984 100644
--- a/src/Body_Transport/body_to_smoothing_pres.f90
+++ b/src/Body_Transport/body_to_smoothing_pres.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Body_Transport/body_to_smoothing_vel.f90 b/src/Body_Transport/body_to_smoothing_vel.f90
index 03d9ce9..00edbcf 100644
--- a/src/Body_Transport/body_to_smoothing_vel.f90
+++ b/src/Body_Transport/body_to_smoothing_vel.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Constitutive_Equation/mixture_viscosity.f90 b/src/Constitutive_Equation/mixture_viscosity.f90
index 5ff54e6..454d2cf 100644
--- a/src/Constitutive_Equation/mixture_viscosity.f90
+++ b/src/Constitutive_Equation/mixture_viscosity.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Constitutive_Equation/viscapp.f90 b/src/Constitutive_Equation/viscapp.f90
index 673c7f1..2457357 100644
--- a/src/Constitutive_Equation/viscapp.f90
+++ b/src/Constitutive_Equation/viscapp.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -39,7 +38,7 @@ implicit none
 double precision,parameter :: alfa = 1.0d0
 integer(4) :: npi
 double precision :: mu, mumax, secinv,cuin, smalen, smalenq, visc1, visc2 
-character(100),external :: lcase
+character(80),external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/DB_SPH/BC_wall_elements.f90 b/src/DB_SPH/BC_wall_elements.f90
index 37eba5a..a78ec2c 100644
--- a/src/DB_SPH/BC_wall_elements.f90
+++ b/src/DB_SPH/BC_wall_elements.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -104,7 +103,7 @@ do npi=1,nag
 ! Solution (density) in the central zone (here the wall element): subscript star
       uR = pg_w(npj)%vel(1) * pg_w(npj)%normal(1) + pg_w(npj)%vel(2) *         &
            pg_w(npj)%normal(2) + pg_w(npj)%vel(3) * pg_w(npj)%normal(3)
-      cL = dsqrt(Med(pg(npi)%imed)%eps/rhoL)
+      cL = Dsqrt(Med(pg(npi)%imed)%eps/rhoL)
       rhostar = rhoL + (uL - uR) * rhoL / cL
       if (rhostar<10.d0) then
          rhostar = 10.d0
@@ -117,14 +116,14 @@ do npi=1,nag
          pstar = -99000.d0
       endif 
 ! Linearized Partial Riemann Solver: end
-! "den" is an auxiliary vector to add contributions to the density and 
+! den(pnj) is an auxiliary vector to add contributions to the density and 
 ! pressure denominators
       Ww_Shep = pg(npi)%mass / pg(npi)%dens * kernel_fw(1,npartint) 
-      den(npj) = den(npj) + Ww_Shep
       pg_w(npj)%dens = pg_w(npj)%dens + rhostar * Ww_Shep
+      den(npj) = den(npj) + Ww_Shep
       pg_w(npj)%pres = pg_w(npj)%pres + pstar * Ww_Shep
-   enddo
-enddo
+   end do
+end do
 ! Updating wall element pressure and density
 !$omp parallel do default(none) private(npi) shared(neigh_w,pg_w,den,DBSPH)
 do npi=1,DBSPH%n_w
diff --git a/src/DB_SPH/DBSPH_BC_shear_viscosity_term.f90 b/src/DB_SPH/DBSPH_BC_shear_viscosity_term.f90
index 0c964f0..bebf834 100644
--- a/src/DB_SPH/DBSPH_BC_shear_viscosity_term.f90
+++ b/src/DB_SPH/DBSPH_BC_shear_viscosity_term.f90
@@ -1,14 +1,13 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-; SPHERA has been authored for RSE SpA by 
-!    Andrea Amicarelli, Antonio Di Monaco, Sauro Manenti, Elia Bon, Daria Gatti, Giordano Agate, Stefano Falappi, 
-!    Barbara Flamini, Roberto Guandalini, David ZuccalÃ ).
-! Main numerical developments of SPHERA: 
-!    Amicarelli et al. (2015,CAF), Amicarelli et al. (2013,IJNME), Manenti et al. (2012,JHE), Di Monaco et al. (2011,EACFM). 
-! Email contact: andrea.amicarelli@rse-web.it
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-! SPHERA is free software: you can redistribute it and/or modify
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
 ! it under the terms of the GNU General Public License as published by
 ! the Free Software Foundation, either version 3 of the License, or
 ! (at your option) any later version.
diff --git a/src/DB_SPH/DBSPH_IC_surface_elements.f90 b/src/DB_SPH/DBSPH_IC_surface_elements.f90
index cf32369..bed58f1 100644
--- a/src/DB_SPH/DBSPH_IC_surface_elements.f90
+++ b/src/DB_SPH/DBSPH_IC_surface_elements.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -60,36 +59,30 @@ if (.not.allocated(pg_w)) then
       call diagnostic (arg1=5,arg2=340)
       stop ! Stop the main program
       else
+         pg_w(:)%cella = 0
+         pg_w(:)%adjacent_faces(1) = 0
+         pg_w(:)%adjacent_faces(2) = 0
+         pg_w(:)%adjacent_faces(3) = 0         
+         pg_w(:)%coord(1) = 0.d0
+         pg_w(:)%coord(2) = 0.d0
+         pg_w(:)%coord(3) = 0.d0
+         pg_w(:)%vel(1) = 0.d0
+         pg_w(:)%vel(2) = 0.d0         
+         pg_w(:)%vel(3) = 0.d0
+         pg_w(:)%dens = 0.d0
+         pg_w(:)%pres = 0.d0
+         pg_w(:)%normal(1) = 0.d0
+         pg_w(:)%normal(2) = 0.d0
+         pg_w(:)%normal(3) = 0.d0
+         pg_w(:)%weight = 0.d0 
+         pg_w(:)%wet = 0 
+         pg_w(:)%mass = 0.d0 
+         pg_w(:)%k_d = 0.d0
+         pg_w(:)%volume = 0.d0
          write (nout,*) "Allocation of pg_w in DBSPH_IC_surface_elements ",    &
                         "successfully completed."
    endif   
-endif
-pg_w(:)%cella = 0
-pg_w(:)%surface_mesh_file_ID = DBSPH%surf_mesh%surface_mesh_file_ID(:)
-pg_w(:)%adjacent_faces(1) = 0
-pg_w(:)%adjacent_faces(2) = 0
-pg_w(:)%adjacent_faces(3) = 0         
-pg_w(:)%coord(1) = 0.d0
-pg_w(:)%coord(2) = 0.d0
-pg_w(:)%coord(3) = 0.d0
-pg_w(:)%vel(1) = 0.d0
-pg_w(:)%vel(2) = 0.d0         
-pg_w(:)%vel(3) = 0.d0
-pg_w(:)%dens = 0.d0
-pg_w(:)%pres = 0.d0
-pg_w(:)%normal(1) = 0.d0
-pg_w(:)%normal(2) = 0.d0
-pg_w(:)%normal(3) = 0.d0
-pg_w(:)%weight = 0.d0 
-pg_w(:)%grad_vel_VSL_times_mu(1) = 0.d0
-pg_w(:)%grad_vel_VSL_times_mu(2) = 0.d0
-pg_w(:)%grad_vel_VSL_times_mu(3) = 0.d0
-pg_w(:)%sigma = 0.d0
-pg_w(:)%wet = 0 
-pg_w(:)%mass = 0.d0 
-pg_w(:)%k_d = 0.d0
-pg_w(:)%volume = 0.d0
-pg_w(:)%kin_visc_semi_part = 0.d0
+endif 
 !$omp parallel do default(none) shared(DBSPH,pg_w,Med,pg,ncord) private(i)
 do i=1,DBSPH%n_w 
    if (ncord==3) then
@@ -106,9 +99,13 @@ DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(i)%vert_list(3))%pos(:) +       &
 DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(i)%vert_list(4))%pos(:) ) / 4.d0    
    endif
    pg_w(i)%cella = ParticleCellNumber(pg_w(i)%coord)
+   pg_w(i)%vel(:) = 0.d0
    pg_w(i)%dens = Med(1)%den0                         
+   pg_w(i)%pres = 0.d0                          
    pg_w(i)%normal(:) = DBSPH%surf_mesh%faces(i)%normal(:)                      
    pg_w(i)%weight = DBSPH%surf_mesh%faces(i)%area
+   pg_w(i)%wet = 0       
+   pg_w(i)%adjacent_faces(:) = 0
 end do
 !$omp end parallel do
 ! Initializing fictitious surface elements representing DB-SPH inlet sections
@@ -119,7 +116,11 @@ do i=(DBSPH%n_w+1),(DBSPH%n_w+DBSPH%n_inlet)
    pg_w(i)%cella = ParticleCellNumber(pg_w(i)%coord)
    pg_w(i)%vel(:) = DBSPH%inlet_sections(j,7:9)
    pg_w(i)%dens = Med(1)%den0                         
+   pg_w(i)%pres = 0.d0                          
    pg_w(i)%normal(:) = DBSPH%inlet_sections(j,4:6)                      
+   pg_w(i)%weight = 0.d0
+   pg_w(i)%wet = 0       
+   pg_w(i)%adjacent_faces(:) = 0
 end do
 !$omp end parallel do
 ! Initializing fictitious surface elements representing DB-SPH outlet sections
@@ -128,8 +129,13 @@ do i=(DBSPH%n_w+DBSPH%n_inlet+1),(DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet)
    j= i - (DBSPH%n_w + DBSPH%n_inlet)  
    pg_w(i)%coord(:) = DBSPH%outlet_sections(j,1:3)
    pg_w(i)%cella = ParticleCellNumber(pg_w(i)%coord)
+   pg_w(i)%vel(:) = 0.d0
    pg_w(i)%dens = Med(1)%den0                         
+   pg_w(i)%pres = 0.d0                          
    pg_w(i)%normal(:) = DBSPH%outlet_sections(j,4:6)                      
+   pg_w(i)%weight = 0.d0
+   pg_w(i)%wet = 0       
+   pg_w(i)%adjacent_faces(:) = 0
 end do
 !$omp end parallel do
 !------------------------
diff --git a/src/DB_SPH/DBSPH_find_close_faces.f90 b/src/DB_SPH/DBSPH_find_close_faces.f90
index 4f379f7..0e192a9 100644
--- a/src/DB_SPH/DBSPH_find_close_faces.f90
+++ b/src/DB_SPH/DBSPH_find_close_faces.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/DB_SPH/DBSPH_inlet_outlet.f90 b/src/DB_SPH/DBSPH_inlet_outlet.f90
index 4308ae0..bd7ee7f 100644
--- a/src/DB_SPH/DBSPH_inlet_outlet.f90
+++ b/src/DB_SPH/DBSPH_inlet_outlet.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/DB_SPH/DBSPH_kinematics.f90 b/src/DB_SPH/DBSPH_kinematics.f90
index a2eac10..8396e33 100644
--- a/src/DB_SPH/DBSPH_kinematics.f90
+++ b/src/DB_SPH/DBSPH_kinematics.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: DBSPH_kinematics
 ! Description: Imposing input kinematics for the DB-SPH elements (linear interpolation of input data).             
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine DBSPH_kinematics
 !------------------------
 ! Modules
@@ -37,21 +37,10 @@ use I_O_diagnostic_module
 ! Declarations
 !------------------------
 implicit none
-integer(4) :: i,j,i_a
-double precision :: rel_pos(3)
-double precision :: vel_aux(DBSPH%surface_mesh_files,3)
-double precision :: omega_aux(DBSPH%surface_mesh_files,3)
+integer(4) :: j
 !------------------------
 ! Explicit interfaces
 !------------------------
-interface
-   subroutine Vector_Product(uu,VV,ww,SPACEDIM)
-     implicit none
-     integer(4),intent(IN) :: SPACEDIM
-     double precision,intent(IN),dimension(SPACEDIM) :: uu,VV
-     double precision,intent(INOUT),dimension(SPACEDIM) :: ww
-   end subroutine Vector_Product
-end interface
 !------------------------
 ! Allocations
 !------------------------
@@ -64,45 +53,21 @@ end interface
 ! Loop over the kinematics records to provide a linear interpolation of the 
 ! imposed velocity to the first surface element.
 if (DBSPH%n_w>0) then
-!$omp parallel do default(none)                                                & 
-!$omp shared(DBSPH,tempo)                                                      &
-!$omp private(i,j,vel_aux,omega_aux)
-   do i=1,DBSPH%surface_mesh_files
-      do j=1,DBSPH%n_kinematics_records(i)
-         if (DBSPH%kinematics(i,j,1)>=tempo) then
-            if (DBSPH%kinematics(i,j,1)==tempo) then
-               vel_aux(i,:) = DBSPH%kinematics(i,j,2:4)
-               omega_aux(i,:) = DBSPH%kinematics(i,j,5:7)
-               else
-                  vel_aux(i,:) = DBSPH%kinematics(i,j-1,2:4) +                 &
-                               (DBSPH%kinematics(i,j,2:4) -                    &
-                               DBSPH%kinematics(i,j-1,2:4)) /                  &
-                               (DBSPH%kinematics(i,j,1) -                      &
-                               DBSPH%kinematics(i,j-1,1)) * (tempo -           &
-                               DBSPH%kinematics(i,j-1,1)) 
-                  omega_aux(i,:) = DBSPH%kinematics(i,j-1,5:7) +               &
-                                 (DBSPH%kinematics(i,j,5:7) -                  &
-                                 DBSPH%kinematics(i,j-1,5:7)) /                &
-                                 (DBSPH%kinematics(i,j,1) -                    &
-                                 DBSPH%kinematics(i,j-1,1)) * (tempo -         &
-                                 DBSPH%kinematics(i,j-1,1))                  
-            endif
-            exit
+   do j=1,DBSPH%n_kinematics_records
+      if (DBSPH%kinematics(j,1)>=tempo) then
+         if (DBSPH%kinematics(j,1)==tempo) then
+            pg_w(1)%vel(:) = DBSPH%kinematics(j,2:4)
+            else
+               pg_w(1)%vel(:) = DBSPH%kinematics(j-1,2:4) +                    &
+                                (DBSPH%kinematics(j,2:4) -                     &
+                                DBSPH%kinematics(j-1,2:4)) /                   &
+                                (DBSPH%kinematics(j,1) -                       &
+                                DBSPH%kinematics(j-1,1))                       &
+                                * (tempo - DBSPH%kinematics(j-1,1))
          endif
-      enddo
-   enddo
-!$omp parallel do default(none)                                                &
-!$omp shared(DBSPH,pg_w,i)                                                     &
-!$omp private(i_a,rel_pos,vel_aux,omega_aux)
-   do i_a=1,DBSPH%n_w
-      rel_pos(:) = pg_w(i_a)%coord(:) -                                        &
-                DBSPH%rotation_centre(pg_w(i_a)%surface_mesh_file_ID,:)          
-      call Vector_Product(omega_aux(pg_w(i_a)%surface_mesh_file_ID,1:3),       &
-         rel_pos,pg_w(i_a)%vel,3)
-      pg_w(i_a)%vel(:) = pg_w(i_a)%vel(:) +                                    &
-                         vel_aux(pg_w(i_a)%surface_mesh_file_ID,:)
+         exit
+      endif
    enddo
-!$omp end parallel do
 endif
 !------------------------
 ! Deallocations
diff --git a/src/DB_SPH/DBSPH_velocity_gradients_VSL_SNBL.f90 b/src/DB_SPH/DBSPH_velocity_gradients_VSL_SNBL.f90
index 1058e9c..d8f8c50 100644
--- a/src/DB_SPH/DBSPH_velocity_gradients_VSL_SNBL.f90
+++ b/src/DB_SPH/DBSPH_velocity_gradients_VSL_SNBL.f90
@@ -1,14 +1,13 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-; SPHERA has been authored for RSE SpA by 
-!    Andrea Amicarelli, Antonio Di Monaco, Sauro Manenti, Elia Bon, Daria Gatti, Giordano Agate, Stefano Falappi, 
-!    Barbara Flamini, Roberto Guandalini, David ZuccalÃ ).
-! Main numerical developments of SPHERA: 
-!    Amicarelli et al. (2015,CAF), Amicarelli et al. (2013,IJNME), Manenti et al. (2012,JHE), Di Monaco et al. (2011,EACFM). 
-! Email contact: andrea.amicarelli@rse-web.it
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-! SPHERA is free software: you can redistribute it and/or modify
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
 ! it under the terms of the GNU General Public License as published by
 ! the Free Software Foundation, either version 3 of the License, or
 ! (at your option) any later version.
diff --git a/src/DB_SPH/Gradients_to_MUSCL.f90 b/src/DB_SPH/Gradients_to_MUSCL.f90
index 195d915..eb5547e 100644
--- a/src/DB_SPH/Gradients_to_MUSCL.f90
+++ b/src/DB_SPH/Gradients_to_MUSCL.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -56,7 +55,7 @@ double precision :: vol_Shep,Ww_Shep
 !$omp parallel do default(none)                                                &
 !$omp private(npi,contj,npj,npartint,vol_Shep)                                 &
 !$omp shared(nag,pg,NMAXPARTJ,rag,nPartIntorno,Partintorno,PartKernel)         &
-!$omp shared(nPartIntorno_fw,DBSPH,NMedium)
+!$omp shared(nPartIntorno_fw,DBSPH)
 ! Loop over the fluid computational particles
 do npi=1,nag 
    if (nPartIntorno_fw(npi)>0) then   
@@ -65,7 +64,7 @@ do npi=1,nag
       pg(npi)%dvel = zero
 ! Loop over the fluid neighbouring particles
       do contj=1,nPartIntorno(npi)   
-         npartint = (npi - 1) * NMAXPARTJ + contj
+         npartint = (npi - 1)* NMAXPARTJ + contj
          npj = PartIntorno(npartint)
          if (pg(npi)%imed==pg(npj)%imed) then
             vol_Shep = pg(npj)%mass / pg(npj)%dens 
@@ -85,9 +84,8 @@ do npi=1,nag
                                 Partkernel(1,npartint) * vol_Shep
          endif
       end do 
-      if ((DBSPH%MUSCL_boundary_flag.eqv.(.true.)).and.(NMedium==1)) then
-         call Gradients_to_MUSCL_boundary(npi)
-      endif
+      if (DBSPH%MUSCL_boundary_flag.eqv..true.) call                           &
+         Gradients_to_MUSCL_boundary(npi)
    endif
 end do 
 !$omp end parallel do
diff --git a/src/DB_SPH/Gradients_to_MUSCL_boundary.f90 b/src/DB_SPH/Gradients_to_MUSCL_boundary.f90
index 294d028..79f2dd2 100644
--- a/src/DB_SPH/Gradients_to_MUSCL_boundary.f90
+++ b/src/DB_SPH/Gradients_to_MUSCL_boundary.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/DB_SPH/Import_ply_surface_meshes.f90 b/src/DB_SPH/Import_ply_surface_meshes.f90
index 42d581b..6a0dd31 100644
--- a/src/DB_SPH/Import_ply_surface_meshes.f90
+++ b/src/DB_SPH/Import_ply_surface_meshes.f90
@@ -1,34 +1,28 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: Import_ply_surface_meshes
-! Description: To import the surface meshes (generated by SnappyHexMesh 
-!              -OpenFOAM-), as converted by Paraview into .ply files.
-!              This subroutine is mandatory and activated only for the DB-SPH 
-!              boundary treatment scheme. In 3D, SPHERA (DBSPH) works with 
-!              triangular faces, in 2D with quadrilateral faces. Input .ply 
-!              files must be triangular/quadrilateral/pentagonal/hexagonal 
-!              meshes in 3D or square meshes in 2D.    
+! Description: To import the surface meshes (generated by SnappyHexMesh -OpenFOAM-), as converted by Paraview into .ply files.
+!              This subroutine is mandatory and activated only for the DB-SPH boundary treatment scheme.                 
 !----------------------------------------------------------------------------------------------------------------------------------
 
 subroutine Import_ply_surface_meshes
@@ -44,12 +38,10 @@ use I_O_diagnostic_module
 ! Declarations
 !------------------------
 implicit none
-integer(4) :: file_stat,n_vertices,old_size_vert,old_size_face,new_size_vert
+integer(4) :: file_stat,n_vertices,old_size_vert,old_size_face,new_size_vert 
 integer(4) :: new_size_face,dealloc_stat,alloc_stat,n_faces,face_vert_num,i,j,k
-integer(4) :: surface_mesh_file_ID
-integer(4) :: aux_face_vert(6)
-character(100) :: file_name,aux_char_1,aux_char_2
-integer(4),dimension(:),allocatable :: aux_surface_mesh_file_ID 
+integer(4) :: aux_face_vert(4)
+character(80) :: file_name,aux_char_1,aux_char_2
 type(vertex_der_type),dimension(:),allocatable :: aux_der_type_vert
 type(face_der_type),dimension(:),allocatable :: aux_der_type_faces
 !------------------------
@@ -70,26 +62,23 @@ end interface
 ! Initializations
 !------------------------
 new_size_face = 0
-surface_mesh_file_ID = 0
 !------------------------
 ! Statements
 !------------------------
 ! Open the file name list (surface_mesh_list.inp)
 open(unit_file_list,file="surface_mesh_list.inp",IOSTAT=file_stat)
 if (file_stat/=0) then
-   write(nscr,*) 'Error in opening surface_mesh_list.inp in ',                 &
-      'Import_pl_surface_meshes; the program stops here'
+   write(*,*) 'Error in opening surface_mesh_list.inp in ',                    &
+              'Import_pl_surface_meshes; the program terminates here'
    stop
 endif
 read(unit_file_list,*,IOSTAT=file_stat) 
 if (file_stat/=0) then
-   write(nscr,*) 'Error in reading surface_mesh_list.inp in ',                 &
-      'Import_pl_surface_meshes; the program stops here'
+   write(*,*) 'Error in reading surface_mesh_list.inp in ',                    &
+              'Import_pl_surface_meshes; the program terminates here'
    stop
 endif
-do 
-! To increment the file_number
-   surface_mesh_file_ID = surface_mesh_file_ID + 1
+do
 ! Read the file name    
    read (unit_file_list,'(a)',IOSTAT=file_stat) file_name
 ! Exit the cicle at the end of file
@@ -98,54 +87,58 @@ do
 ! Open the on-going mesh file
    open(unit_DBSPH_mesh,file=file_name,IOSTAT=file_stat)
    if (file_stat/=0) then
-      write(nscr,*) 'Error in opening a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here'
+      write(*,*) 'Error in opening a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here'
       stop
    endif   
    read(unit_DBSPH_mesh,"(3/)",IOSTAT=file_stat)
    if (file_stat/=0) then
-      write(nscr,*) 'Error in reading a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here'
+      write(*,*) 'Error in reading a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here'
       stop
    endif   
 ! Read the number of vertices in the file    
    read(unit_DBSPH_mesh,*,IOSTAT=file_stat) aux_char_1,aux_char_2,n_vertices
    if (file_stat/=0) then
-      write(nscr,*) 'Error in reading a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here'
+      write(*,*) 'Error in reading a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here'
       stop
    endif
    read(unit_DBSPH_mesh,"(2/)",IOSTAT=file_stat)
    if (file_stat/=0) then
-      write(nscr,*) 'Error in reading a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here'
+      write(*,*) 'Error in reading a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here'
       stop
    endif
 ! Read the number of faces in the file
    read(unit_DBSPH_mesh,*,IOSTAT=file_stat) aux_char_1,aux_char_2,n_faces
    if (file_stat/=0) then
-      write(nscr,*) 'Error in reading a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here'
+      write(*,*) 'Error in reading a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here'
       stop
    endif   
    read(unit_DBSPH_mesh,"(1/)",IOSTAT=file_stat)
    if (file_stat/=0) then
-      write(nscr,*) 'Error in reading a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here.'
+      write(*,*) 'Error in reading a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here.'
       stop
    endif   
    if (.not.allocated(DBSPH%surf_mesh%vertices)) then
       allocate(DBSPH%surf_mesh%vertices(n_vertices),STAT=alloc_stat)
       if (alloc_stat/=0) then
-         write(nscr,*) 'Allocation of DBSPH%surf_mesh%vertices in ',           &
-            'Import_ply_surface_mesh failed; the program stops here.'
+         write(nout,*) 'Allocation of DBSPH%surf_mesh%vertices in ',           &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here.'
+! Stop the main program
          stop 
       endif
       if (.not.allocated(aux_der_type_vert)) then
           allocate(aux_der_type_vert(n_vertices),STAT=alloc_stat)
           if (alloc_stat/=0) then
-             write(nscr,*) 'Allocation of aux_der_type_vert in ',              &
-                'Import_ply_surface_mesh failed; the program stops here.'
+             write(nout,*) 'Allocation of aux_der_type_vert in ',              &
+                           'Import_ply_surface_mesh failed; the program ',     &
+                           'terminates here.'
+! Stop the main program
              stop 
           endif
       endif    
@@ -156,29 +149,37 @@ do
          aux_der_type_vert(:) = DBSPH%surf_mesh%vertices(:)
          deallocate(DBSPH%surf_mesh%vertices,STAT=dealloc_stat)
          if (dealloc_stat/=0) then
-            write(nscr,*) 'Deallocation of DBSPH%surf_mesh%vertices in ',      &
-               'Import_ply_surface_mesh failed; the program stops here.'
+            write(*,*) 'Deallocation of DBSPH%surf_mesh%vertices in ',         &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here.'
+! Stop the main program
             stop 
          endif          
          allocate(DBSPH%surf_mesh%vertices(new_size_vert),STAT=alloc_stat)
          if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of DBSPH%surf_mesh%vertices in ',        &
-               'Import_ply_surface_mesh failed; the program stops here'
+            write(*,*) 'Allocation of DBSPH%surf_mesh%vertices in ',           &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here'
+! Stop the main program
             stop 
          endif         
          DBSPH%surf_mesh%vertices(1:old_size_vert) = aux_der_type_vert(:)
          if (allocated(aux_der_type_vert)) then
             deallocate(aux_der_type_vert,STAT=dealloc_stat)
             if (dealloc_stat/=0) then
-               write(nscr,*) 'Deallocation of aux_der_type_vert in ',          &
-                  'Import_ply_surface_mesh failed; the program stops here.'
+               write(nout,*) 'Deallocation of aux_der_type_vert in ',          &
+                             'Import_ply_surface_mesh failed; the program ',   &
+                             'terminates here.'
+! Stop the main program
                stop 
             endif   
          endif         
          allocate(aux_der_type_vert(new_size_vert),STAT=alloc_stat)
          if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of aux_der_type_vert in ',               &
-               'Import_ply_surface_mesh failed; the program stops here.'
+            write(nout,*) 'Allocation of aux_der_type_vert in ',               &
+                          'Import_ply_surface_mesh failed; the program ',      &
+                          'terminates here.'
+! Stop the main program
             stop 
          endif
    endif
@@ -186,291 +187,106 @@ do
    do j=(old_size_vert+1),(old_size_vert+n_vertices)
       read (unit_DBSPH_mesh,*) DBSPH%surf_mesh%vertices(j)%pos(:)
    enddo
-! To allocate or resize DBSPH%surf_mesh%faces on the maximum number of faces
-! (worst case with all hexagonal faces). To allocate                           &
-! DBSPH%surf_mesh%surface_mesh_file_ID and auxiliary arrays, accordingly.
+! Allocate or resize DBSPH%surf_mesh%faces on the maximum number of n_faces*2 
+! (worst case with all quadrilateral faces)
    if (.not.allocated(DBSPH%surf_mesh%faces)) then
       if (ncord==3) then
-         allocate(DBSPH%surf_mesh%faces((DBSPH%ply_n_face_vert-2)*n_faces),    &
-            STAT=alloc_stat)
+         allocate(DBSPH%surf_mesh%faces(2*n_faces),STAT=alloc_stat)
          else
             allocate(DBSPH%surf_mesh%faces(n_faces),STAT=alloc_stat)
       endif
       if (alloc_stat/=0) then
-         write(nscr,*) 'Allocation of DBSPH%surf_mesh%faces in ',              &
-            'Import_ply_surface_mesh failed; the program stops here.'
+         write(nout,*) 'Allocation of DBSPH%surf_mesh%faces in ',              &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here.'
+! Stop the main program
          stop 
       endif
       if (.not.allocated(aux_der_type_faces)) then
          if (ncord==3) then
-             allocate(aux_der_type_faces((DBSPH%ply_n_face_vert-2)*n_faces),   &
-                STAT=alloc_stat)
+             allocate(aux_der_type_faces(2*n_faces),STAT=alloc_stat)
             else
              allocate(aux_der_type_faces(n_faces),STAT=alloc_stat)
          endif
          if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of aux_der_type_faces in ',              &
-               'Import_ply_surface_mesh failed; the program stops here.'
+            write(nout,*) 'Allocation of aux_der_type_faces in ',              &
+                          'Import_ply_surface_mesh failed; the program ',      &
+                          'terminates here.'
+! Stop the main program
             stop 
          endif
       endif
-      if (.not.allocated(DBSPH%surf_mesh%surface_mesh_file_ID)) then
-         if (ncord==3) then
-             allocate(DBSPH%surf_mesh%surface_mesh_file_ID(                    &
-                (DBSPH%ply_n_face_vert-2)*n_faces),STAT=alloc_stat)
-            else
-             allocate(DBSPH%surf_mesh%surface_mesh_file_ID(n_faces),           &
-                STAT=alloc_stat)
-         endif
-         if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of DBSPH%surf_mesh%surface_mesh_file_ID '&
-               'in Import_ply_surface_mesh failed; the program stops here.'
-            stop 
-         endif
-      endif  
-      if (.not.allocated(DBSPH%surf_mesh%surface_mesh_file_ID)) then
-         if (ncord==3) then
-             allocate(DBSPH%surf_mesh%surface_mesh_file_ID(                    &
-                (DBSPH%ply_n_face_vert-2)*n_faces),STAT=alloc_stat)
-            else
-             allocate(DBSPH%surf_mesh%surface_mesh_file_ID(n_faces),           &
-                STAT=alloc_stat)
-         endif
-         if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of DBSPH%surf_mesh%surface_mesh_file_ID',&
-               ' in Import_ply_surface_mesh failed; the program stops here.'
-            stop 
-         endif
-      endif   
-      if (.not.allocated(aux_surface_mesh_file_ID)) then
-         if (ncord==3) then
-             allocate(aux_surface_mesh_file_ID(                                &
-                (DBSPH%ply_n_face_vert-2)*n_faces),STAT=alloc_stat)
-            else
-             allocate(aux_surface_mesh_file_ID(n_faces),STAT=alloc_stat)
-         endif
-         if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of aux_surface_mesh_file_ID ',           &
-               'in Import_ply_surface_mesh failed; the program stops here.'
-            stop 
-         endif
-      endif   
       old_size_face = 0
       else
          old_size_face = size(DBSPH%surf_mesh%faces)
          if (ncord==3) then
-            new_size_face = old_size_face + (DBSPH%ply_n_face_vert - 2) *      &
-                            n_faces
+            new_size_face = old_size_face + 2 *n_faces
             else
                new_size_face = old_size_face + n_faces
          endif
          aux_der_type_faces(:) = DBSPH%surf_mesh%faces(:)
          deallocate(DBSPH%surf_mesh%faces,STAT=dealloc_stat)
          if (dealloc_stat/=0) then
-            write(nscr,*) 'Deallocation of DBSPH%surf_mesh%faces in ',         &
-               'Import_ply_surface_mesh failed; the program stops here'
+            write(*,*) 'Deallocation of DBSPH%surf_mesh%faces in ',            &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here'
+! Stop the main program
             stop 
          endif          
          allocate(DBSPH%surf_mesh%faces(new_size_face),STAT=alloc_stat)
          if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of DBSPH%surf_mesh%faces in ',           &
-               'Import_ply_surface_mesh failed; the program stops here'
+            write(*,*) 'Allocation of DBSPH%surf_mesh%faces in ',              &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here'
+! Stop the main program
             stop 
          endif         
          DBSPH%surf_mesh%faces(1:old_size_face) = aux_der_type_faces(:)
          if (allocated(aux_der_type_faces)) then
             deallocate(aux_der_type_faces,STAT=dealloc_stat)
             if (dealloc_stat/=0) then
-               write(nscr,*) 'Deallocation of aux_der_type_faces in ',         &
-                  'Import_ply_surface_mesh failed; the program stops here.'
+               write(nout,*) 'Deallocation of aux_der_type_faces in ',         &
+                             'Import_ply_surface_mesh failed; the program ',   &
+                             'terminates here.'
+! Stop the main program
                stop 
             endif   
          endif         
          allocate(aux_der_type_faces(new_size_face),STAT=alloc_stat)
          if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of aux_der_type_faces in ',              &
-               'Import_ply_surface_mesh failed; the program stops here.'
-            stop 
-         endif
-         aux_surface_mesh_file_ID(:) = DBSPH%surf_mesh%surface_mesh_file_ID(:)
-         deallocate(DBSPH%surf_mesh%surface_mesh_file_ID,STAT=dealloc_stat)
-         if (dealloc_stat/=0) then
-            write(nscr,*) 'Deallocation of ',                                  &
-               'DBSPH%surf_mesh%surface_mesh_file_ID in ',                     &
-               'Import_ply_surface_mesh failed; the program stops here. '
-            stop 
-         endif          
-         allocate(DBSPH%surf_mesh%surface_mesh_file_ID(new_size_face),         &
-            STAT=alloc_stat)
-         if (alloc_stat/=0) then
-            write(nscr,*) 'Allocation of DBSPH%surf_mesh%surface_mesh_file_ID',&
-               ' in Import_ply_surface_mesh failed; the program stops here. '
-            stop 
-         endif         
-         DBSPH%surf_mesh%surface_mesh_file_ID(1:old_size_face) =               &
-            aux_surface_mesh_file_ID(:)
-         if (allocated(aux_surface_mesh_file_ID)) then
-            deallocate(aux_surface_mesh_file_ID,STAT=dealloc_stat)
-            if (dealloc_stat/=0) then
-               write(nscr,*) 'Deallocation of aux_surface_mesh_file_ID in ',   &
-                  'Import_ply_surface_mesh failed; the program stops here.'
-               stop 
-            endif   
-         endif         
-         allocate(aux_surface_mesh_file_ID(new_size_face),STAT=alloc_stat)
-         if (alloc_stat/=0) then
-            write(nout,*) 'Allocation of aux_surface_mesh_file_ID in ',        &
-               'Import_ply_surface_mesh failed; the program stops here.'
+            write(nout,*) 'Allocation of aux_der_type_faces in ',              &
+                          'Import_ply_surface_mesh failed; the program ',      &
+                          'terminates here.'
+! Stop the main program
             stop 
          endif
    endif 
 ! Read the face vertices: start
-   k = old_size_face + 1
+  k=old_size_face+1
    do j=1,n_faces
-      read(unit_DBSPH_mesh,*) face_vert_num,aux_face_vert(1:face_vert_num)
-! Assignation of vertices with eventual conversion of any 4/5/6-side face  
-! into 2/3/4 triangles; computation of area and normal 
+      read(unit_DBSPH_mesh,*) face_vert_num,aux_face_vert(:)
+! Assignation of vertices with eventual conversion of any quadrilateral 
+! into 2 triangles; computation of area and normal 
       if (ncord==3) then
-         select case (face_vert_num)
-            case(3)
-! To import vertices of the triangular face          
-! Face 1: vertices 1,2,3
-               DBSPH%surf_mesh%faces(k)%vert_list(1:3) = old_size_vert +       &
-                                                         aux_face_vert(1:3) + 1
-               DBSPH%surf_mesh%faces(k)%vert_list(4) = 0
-               DBSPH%surf_mesh%surface_mesh_file_ID(k) = surface_mesh_file_ID
-               k = k+1
-! Computation of area and normal of the face
-               call area_triangle(                                             &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(3))%pos,         &
-                  DBSPH%surf_mesh%faces(k-1)%area,                             &
-                  DBSPH%surf_mesh%faces(k-1)%normal)                         
-            case(4)
-! To import vertices of the quadrilateral face, split in 2 triangular faces
-! Face 1: vertices 1,2,3 
-            DBSPH%surf_mesh%faces(k)%vert_list(1:3) = old_size_vert +          &
-                                                      aux_face_vert(1:3) + 1
-            DBSPH%surf_mesh%faces(k)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k) = surface_mesh_file_ID
-! Face 2: vertices 1,3,4            
-            DBSPH%surf_mesh%faces(k+1)%vert_list(1) = old_size_vert +          &
-                                                      aux_face_vert(1) + 1
-            DBSPH%surf_mesh%faces(k+1)%vert_list(2:3) = old_size_vert +        &
-                                                       aux_face_vert(3:4) + 1
-            DBSPH%surf_mesh%faces(k+1)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k+1) = surface_mesh_file_ID
-            k = k+2
-! Computation of area and normal of the 2 faces
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(2))%pos,         & 
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-2)%area,                                &
-               DBSPH%surf_mesh%faces(k-2)%normal)
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-1)%area,                                &
-               DBSPH%surf_mesh%faces(k-1)%normal)            
-            case(5)
-! To import vertices of the pentagonal face, split in 3 triangular faces
-! Face 1: vertices 1,2,5
-            DBSPH%surf_mesh%faces(k)%vert_list(1:2) = old_size_vert +          &
-                                                      aux_face_vert(1:2) + 1
-            DBSPH%surf_mesh%faces(k)%vert_list(3) = old_size_vert +            &
-                                                    aux_face_vert(5) + 1
-            DBSPH%surf_mesh%faces(k)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k) = surface_mesh_file_ID
-! Face 2: vertices 2,3,5
-            DBSPH%surf_mesh%faces(k+1)%vert_list(1:2) = old_size_vert +        &
-                                                        aux_face_vert(2:3) + 1
-            DBSPH%surf_mesh%faces(k+1)%vert_list(3)= old_size_vert +           &
-                                                     aux_face_vert(5) + 1
-            DBSPH%surf_mesh%faces(k+1)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k+1) = surface_mesh_file_ID
-! Face 3: vertices 3,4,5
-            DBSPH%surf_mesh%faces(k+2)%vert_list(1:3) = old_size_vert +        &
-                                                        aux_face_vert(3:5) + 1
-            DBSPH%surf_mesh%faces(k+2)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k+2) = surface_mesh_file_ID
-            k = k+3
-! Computation of area and normal of the 3 faces
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-3)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-3)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-3)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-3)%area,                                &
-               DBSPH%surf_mesh%faces(k-3)%normal)   
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(2))%pos,         & 
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-2)%area,                                &
-               DBSPH%surf_mesh%faces(k-2)%normal)
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-1)%area,                                &
-               DBSPH%surf_mesh%faces(k-1)%normal)            
-            case(6)
-! To import vertices of the hexagonal face, split in 4 triangular faces
-! Face 1: vertices 1,2,6
-            DBSPH%surf_mesh%faces(k)%vert_list(1:2) = old_size_vert +          &
-                                                      aux_face_vert(1:2) + 1
-            DBSPH%surf_mesh%faces(k)%vert_list(3) = old_size_vert +            &
-                                                    aux_face_vert(6) + 1
-            DBSPH%surf_mesh%faces(k)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k) = surface_mesh_file_ID
-! Face 2: vertices 2,5,6
-            DBSPH%surf_mesh%faces(k+1)%vert_list(1) = old_size_vert +          &
-                                                      aux_face_vert(2) + 1
-            DBSPH%surf_mesh%faces(k+1)%vert_list(2:3)= old_size_vert +         &
-                                                       aux_face_vert(5:6) + 1
-            DBSPH%surf_mesh%faces(k+1)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k+1) = surface_mesh_file_ID
-! Face 3: vertices 2,3,5
-            DBSPH%surf_mesh%faces(k+2)%vert_list(1:2) = old_size_vert +        &
-                                                        aux_face_vert(2:3) + 1
-            DBSPH%surf_mesh%faces(k+2)%vert_list(3)= old_size_vert +           &
-                                                     aux_face_vert(5) + 1
-            DBSPH%surf_mesh%faces(k+2)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k+2) = surface_mesh_file_ID
-! Face 4: vertices 3,4,5 
-            DBSPH%surf_mesh%faces(k+3)%vert_list(1:3) = old_size_vert +        &
-                                                        aux_face_vert(3:5) + 1
-            DBSPH%surf_mesh%faces(k+3)%vert_list(4) = 0
-            DBSPH%surf_mesh%surface_mesh_file_ID(k+3) = surface_mesh_file_ID
-            k = k+4
-! Computation of area and normal of the 4 faces
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-4)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-4)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-4)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-4)%area,                                &
-               DBSPH%surf_mesh%faces(k-4)%normal) 
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-3)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-3)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-3)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-3)%area,                                &
-               DBSPH%surf_mesh%faces(k-3)%normal)   
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(2))%pos,         & 
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-2)%area,                                &
-               DBSPH%surf_mesh%faces(k-2)%normal)
-            call area_triangle(                                                &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(1))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(2))%pos,         &
-DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(3))%pos,         &
-               DBSPH%surf_mesh%faces(k-1)%area,                                &
-               DBSPH%surf_mesh%faces(k-1)%normal)             
-         endselect
+         DBSPH%surf_mesh%faces(k)%vert_list(1:3) = old_size_vert +             &
+                                                   aux_face_vert(1:3) + 1
+         DBSPH%surf_mesh%faces(k+1)%vert_list(1) = old_size_vert +             &
+                                                   aux_face_vert(1) + 1
+         DBSPH%surf_mesh%faces(k+1)%vert_list(2:3)= old_size_vert +            &
+                                                    aux_face_vert(3:4) + 1
+         DBSPH%surf_mesh%faces(k)%vert_list(4) = 0
+         k = k+2
+! Computation of area and normal 
+         call area_triangle(                                                   &
+         DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(1))%pos,&
+         DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(2))%pos,& 
+         DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-2)%vert_list(3))%pos,&
+            DBSPH%surf_mesh%faces(k-2)%area,DBSPH%surf_mesh%faces(k-2)%normal)
+         call area_triangle(                                                   &
+         DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(1))%pos,&
+         DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(2))%pos,&
+         DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(3))%pos,&
+         DBSPH%surf_mesh%faces(k-1)%area,DBSPH%surf_mesh%faces(k-1)%normal)
          else
             DBSPH%surf_mesh%faces(k)%vert_list(1:4) = old_size_vert +          &
                                                       aux_face_vert(1:4) + 1
@@ -493,87 +309,64 @@ DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(k-1)%vert_list(1))%pos          &
    enddo  
    close(unit_DBSPH_mesh,IOSTAT=file_stat)
    if (file_stat/=0) then
-      write(nscr,*) 'Error in closing a surface mesh file in ',                &
-         'Import_pl_surface_meshes; the program stops here. '
+      write(*,*) 'Error in closing a surface mesh file in ',                   &
+                 'Import_pl_surface_meshes; the program terminates here'
       stop
    endif
 ! Read the face vertices: end   
 ! Resize DBSPH%surf_mesh%faces on the actual number of faces 
-! new_size_face = estimated_new_size_face - overestimation
    if (ncord==3) then
-      new_size_face = size(DBSPH%surf_mesh%faces) - (k - old_size_face - 1 -   &
-                      (DBSPH%ply_n_face_vert - 2) * n_faces) 
+      new_size_face = size(DBSPH%surf_mesh%faces) - (k - old_size_face - 1 - 2 &
+                      * n_faces)   
       else
          new_size_face = size(DBSPH%surf_mesh%faces) - (k - old_size_face - 1  &
-                         - n_faces)     
+                         - n_faces)   
    endif
    old_size_face = size(DBSPH%surf_mesh%faces)
    if (new_size_face>old_size_face) then
       aux_der_type_faces(:) = DBSPH%surf_mesh%faces(:)
       deallocate(DBSPH%surf_mesh%faces,STAT=dealloc_stat)
       if (dealloc_stat/=0) then
-         write(nscr,*) 'Deallocation of DBSPH%surf_mesh%faces in ',            &
-            'Import_ply_surface_mesh failed; the program stops here.'
+         write(*,*) 'Deallocation of DBSPH%surf_mesh%faces in ',               &
+                    'Import_ply_surface_mesh failed; the program terminates ', &
+                    'here.'
+! Stop the main program
          stop 
       endif          
       allocate(DBSPH%surf_mesh%faces(new_size_face),STAT=alloc_stat)
       if (alloc_stat/=0) then
-         write(nscr,*) 'Allocation of DBSPH%surf_mesh%faces in ',              &
-            'Import_ply_surface_mesh failed; the program stops here.'
+         write(*,*) 'Allocation of DBSPH%surf_mesh%faces in ',                 &
+                    'Import_ply_surface_mesh failed; the program terminates ', &
+                    'here.'
+! Stop the main program
          stop 
       endif         
       DBSPH%surf_mesh%faces(:) = aux_der_type_faces(1:old_size_face)
       if (allocated(aux_der_type_faces)) then
          deallocate(aux_der_type_faces,STAT=dealloc_stat)
          if (dealloc_stat/=0) then
-            write(nscr,*) 'Deallocation of aux_der_type_faces in ',            &
-               'Import_ply_surface_mesh failed; the program stops here.'
+            write(nout,*) 'Deallocation of aux_der_type_faces in ',            &
+                          'Import_ply_surface_mesh failed; the program ',      &
+                          'terminates here.'
+! Stop the main program
             stop 
          endif   
       endif         
       allocate(aux_der_type_faces(new_size_face),STAT=alloc_stat)
       if (alloc_stat/=0) then
-         write(nscr,*) 'Allocation of aux_der_type_faces in ',                 &
-            'Import_ply_surface_mesh failed; the program stops here.'
-         stop 
-      endif
-      aux_surface_mesh_file_ID(:) = DBSPH%surf_mesh%surface_mesh_file_ID(:)
-      deallocate(DBSPH%surf_mesh%surface_mesh_file_ID,STAT=dealloc_stat)
-      if (dealloc_stat/=0) then
-         write(nscr,*) 'Deallocation of ',                                     &
-            'DBSPH%surf_mesh%surface_mesh_file_ID in Import_ply_surface_mesh ',&
-            'failed; the program stops here.'
-         stop 
-      endif          
-      allocate(DBSPH%surf_mesh%surface_mesh_file_ID(new_size_face),            &
-         STAT=alloc_stat)
-      if (alloc_stat/=0) then
-         write(nscr,*) 'Allocation of DBSPH%surf_mesh%surface_mesh_file_ID in',&
-            ' Import_ply_surface_mesh failed; the program stops here.'
-         stop 
-      endif         
-      DBSPH%surf_mesh%surface_mesh_file_ID(:) =                                &
-         aux_surface_mesh_file_ID(1:old_size_face)
-      if (allocated(aux_surface_mesh_file_ID)) then
-         deallocate(aux_surface_mesh_file_ID,STAT=dealloc_stat)
-         if (dealloc_stat/=0) then
-            write(nscr,*) 'Deallocation of aux_surface_mesh_file_ID in ',      &
-               'Import_ply_surface_mesh failed; the program stops here.'
-            stop 
-         endif   
-      endif         
-      allocate(aux_surface_mesh_file_ID(new_size_face),STAT=alloc_stat)
-      if (alloc_stat/=0) then
-         write(nscr,*) 'Allocation of aux_surface_mesh_file_ID in ',           &
-            'Import_ply_surface_mesh failed; the program stops here.'
+         write(nout,*) 'Allocation of aux_der_type_faces in ',                 &
+                       'Import_ply_surface_mesh failed; the program ',         &
+                       'terminates here.'
+! Stop the main program
          stop 
       endif
    endif
+! Read the face vertices: end
 enddo   
 close(unit_file_list,IOSTAT=file_stat)
 if (file_stat/=0) then
-   write(nscr,*) 'Error in closing surface_mesh_list.inp in ',                 &
-      'Import_pl_surface_meshes; the program stops here.'
+   write(*,*) 'Error in closing surface_mesh_list.inp in ',                    &
+              'Import_pl_surface_meshes; the program terminates here.'
    stop
 endif
 ! Initializing the number of surface elements
@@ -584,24 +377,20 @@ DBSPH%n_w = new_size_face
 if (allocated(aux_der_type_vert)) then
    deallocate(aux_der_type_vert,STAT=dealloc_stat)
    if (dealloc_stat/=0) then
-      write(nscr,*) 'Deallocation of aux_der_type_vert in ',                   &
-         'Import_ply_surface_mesh failed; the program stops here.'
+      write(nout,*) 'Deallocation of aux_der_type_vert in ',                   &
+                    'Import_ply_surface_mesh failed; the program terminates ', &
+                    'here.'
+! Stop the main program
       stop 
    endif   
 endif 
 if (allocated(aux_der_type_faces)) then
    deallocate(aux_der_type_faces,STAT=dealloc_stat)
    if (dealloc_stat/=0) then
-      write(nscr,*) 'Deallocation of aux_der_type_faces in ',                  &
-         'Import_ply_surface_mesh failed; the program stops here.'
-      stop 
-   endif   
-endif
-if (allocated(aux_surface_mesh_file_ID)) then
-   deallocate(aux_surface_mesh_file_ID,STAT=dealloc_stat)
-   if (dealloc_stat/=0) then
-      write(nscr,*) 'Deallocation of aux_surface_mesh_file_ID in ',            &
-         'Import_ply_surface_mesh failed; the program stops here.'
+      write(nout,*) 'Deallocation of aux_der_type_faces in ',                  &
+                    'Import_ply_surface_mesh failed; the program terminates ', &
+                    'here.'
+! Stop the main program
       stop 
    endif   
 endif
diff --git a/src/DB_SPH/adjacent_faces_isolated_points.f90 b/src/DB_SPH/adjacent_faces_isolated_points.f90
index 4d6bb21..019e264 100644
--- a/src/DB_SPH/adjacent_faces_isolated_points.f90
+++ b/src/DB_SPH/adjacent_faces_isolated_points.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/DB_SPH/drafts.f90 b/src/DB_SPH/drafts.f90
index 7a57fee..dc83654 100644
--- a/src/DB_SPH/drafts.f90
+++ b/src/DB_SPH/drafts.f90
@@ -1,29 +1,74 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
+!----------------------------------------------------------------------------------------------------------------------------------
+
 !----------------------------------------------------------------------------------------------------------------------------------
+! Program unit: viscomorris_wall_elements
+! Description: Wall element contributions to Morris' viscosity term.              
+!----------------------------------------------------------------------------------------------------------------------------------
+
+subroutine viscomorris_wall_elements(npi,npj,npartint,dervel,rvw)
+!------------------------
+! Modules
+!------------------------ 
+use Static_allocation_module
+use Hybrid_allocation_module
+use Dynamic_allocation_module
+!------------------------
+! Declarations
+!------------------------
+implicit none
+integer(4),intent(IN) :: npi,npj,npartint
+double precision,intent(IN)  :: dervel(3)
+double precision,intent(OUT) :: rvw(3)
+double precision :: rhoWw,rhotilde,anuitilde,factivis,dis2
+!------------------------
+! Explicit interfaces
+!------------------------
+!------------------------
+! Allocations
+!------------------------
+!------------------------
+! Initializations
+!------------------------
+!------------------------
+! Statements
+!------------------------
+rhoWw = pg_w(npj)%dens * pg_w(npj)%weight * kernel_fw(1,npartint) 
+rhotilde  = (pg(npi)%visc * pg(npi)%dens + pg(npi)%visc * pg_w(npj)%dens +     &
+            0.001d0)
+anuitilde = 4.0d0 * (pg(npi)%visc * pg(npi)%visc)    
+factivis = rhoWw * anuitilde / rhotilde
+dis2 = (rag_fw(1,npartint) * rag_fw(1,npartint) + rag_fw(2,npartint) *         &
+       rag_fw(2,npartint) + rag_fw(3,npartint) * rag_fw(3,npartint))
+rvw(:) = factivis * dervel(:) * (rag_fw(:,npartint) * pg_w(npj)%normal(:)) /   &
+         dis2
+!------------------------
+! Deallocations
+!------------------------
+return
+end subroutine viscomorris_wall_elements
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: viscomon_wall_elements
-! Description: Wall element contributions for Monaghan artificial viscosity term.
-!              This term is not activated.               
+! Description: Wall element contributions for Monaghan artificial viscosity term.               
 !----------------------------------------------------------------------------------------------------------------------------------
 
 subroutine viscomon_wall_elements(npi,npj,npartint,dervel,rvwalfa,rvwbeta)
diff --git a/src/DB_SPH/semi_particle_volumes.f90 b/src/DB_SPH/semi_particle_volumes.f90
index bf38871..6ca20f0 100644
--- a/src/DB_SPH/semi_particle_volumes.f90
+++ b/src/DB_SPH/semi_particle_volumes.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -112,7 +111,7 @@ DBSPH%surf_mesh%vertices(DBSPH%surf_mesh%faces(pg_w(i)%adjacent_faces(j))%vert_l
                        "; the run terminates here."
          stop
       endif 
-! Compute the angle between the normal vectors
+! Compute the spread angle between the normal vectors
       aux_scalar = dot_product(pg_w(i)%normal,                                 &
                                pg_w(pg_w(i)%adjacent_faces(j))%normal)
       aux_vec(:) = aux_face2(ID_P_b_iso,:) - aux_face1(ID_P_0_iso,:) 
diff --git a/src/DB_SPH/wall_elements_pp.f90 b/src/DB_SPH/wall_elements_pp.f90
index 6219c52..655f271 100644
--- a/src/DB_SPH/wall_elements_pp.f90
+++ b/src/DB_SPH/wall_elements_pp.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -54,8 +53,8 @@ integer(4),external :: CellIndices, CellNumber
 !------------------------
 ! Allocations
 !------------------------
-allocate(pres_wpp(DBSPH%n_w))
-allocate(den_wpp(DBSPH%n_w))
+allocate (pres_wpp(DBSPH%n_w))
+allocate (den_wpp(DBSPH%n_w))
 !------------------------
 ! Initializations
 !------------------------
@@ -199,8 +198,8 @@ endif
 !------------------------
 ! Deallocations
 !------------------------
-deallocate(pres_wpp)
-deallocate(den_wpp)
+deallocate (pres_wpp)
+deallocate (den_wpp)
 return
 end subroutine wall_elements_pp
 
diff --git a/src/DB_SPH/wavy_inlet.f90 b/src/DB_SPH/wavy_inlet.f90
index 4a30a1a..4f53ad0 100644
--- a/src/DB_SPH/wavy_inlet.f90
+++ b/src/DB_SPH/wavy_inlet.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Erosion_Criterion/Shields.f90 b/src/Erosion_Criterion/Shields.f90
index 3d010f1..5b04301 100755
--- a/src/Erosion_Criterion/Shields.f90
+++ b/src/Erosion_Criterion/Shields.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     à).
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Erosion_Criterion/compute_k_BetaGamma.f90 b/src/Erosion_Criterion/compute_k_BetaGamma.f90
index 10305d2..fed44f8 100644
--- a/src/Erosion_Criterion/compute_k_BetaGamma.f90
+++ b/src/Erosion_Criterion/compute_k_BetaGamma.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Erosion_Criterion/drafts.f90 b/src/Erosion_Criterion/drafts.f90
index acfdb25..0266798 100755
--- a/src/Erosion_Criterion/drafts.f90
+++ b/src/Erosion_Criterion/drafts.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     à).
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Erosion_Criterion/fixed_bed_slope_limited.f90 b/src/Erosion_Criterion/fixed_bed_slope_limited.f90
index d3ea945..1a9cf18 100644
--- a/src/Erosion_Criterion/fixed_bed_slope_limited.f90
+++ b/src/Erosion_Criterion/fixed_bed_slope_limited.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/IsPointInternal.f90 b/src/Geometry/IsPointInternal.f90
index 94affae..10a0c11 100644
--- a/src/Geometry/IsPointInternal.f90
+++ b/src/Geometry/IsPointInternal.f90
@@ -1,34 +1,31 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: IsPointInternal  
-! Description: Checking wheather a point with local normal coordinates csi(1:3) is internal to a given face, whose type code  
-!              is fk (=1 triangle, =2 quadrilateral), or not.
-!              This procedure is based on the subroutine "LocalNormalCoordinatesGiven". They will be replaced by the subroutine 
-!              "point_inout_convex_non_degenerate_polygon" (already available in SPHERA), which is more effective and can be 
-!              applied to any polygon (it already works for triangles and quadrilaterals).
+! Description: Checking wheather a point with local normal coordinates csi() is internal to a given face, whose code  
+!              is fk (=1 triangle, =2 parallelogram).
 !----------------------------------------------------------------------------------------------------------------------------------
-logical function IsPointInternal(fk,csi)
+
+Logical Function IsPointInternal(fk,csi)
 !------------------------
 ! Modules
 !------------------------ 
@@ -37,9 +34,8 @@ use Static_allocation_module
 ! Declarations
 !------------------------
 implicit none
-integer(4),intent(in) :: fk
-double precision,intent(in) :: csi(SPACEDIM)
-integer(4) :: i
+integer(4) :: i,fk
+double precision, dimension(1:SPACEDIM) :: csi
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -49,7 +45,7 @@ integer(4) :: i
 !------------------------
 ! Initializations
 !------------------------
-IsPointInternal = .false.
+IsPointInternal = .FALSE.
 !------------------------
 ! Statements
 !------------------------
@@ -58,19 +54,19 @@ if (fk==1) then
    do i=1,3
      if (csi(i)<zero) return
      if (csi(i)>one) return
-   enddo
-   IsPointInternal = .true.
-   elseif (fk==2) then
+   end do
+   IsPointInternal = .TRUE.
+   else if (fk==2) then
 ! Quadrilateral 
       do i=1,2
          if (csi(i)<zero) return
          if (csi(i)>one) return
-      enddo
-      IsPointInternal = .true.
-endif
+      end do
+      IsPointInternal = .TRUE.
+end if
 !------------------------
 ! Deallocations
 !------------------------
 return
-end function IsPointInternal
+end Function IsPointInternal
 
diff --git a/src/Geometry/LocalNormalCoordinates.f90 b/src/Geometry/LocalNormalCoordinates.f90
index 0eae26a..c620c36 100644
--- a/src/Geometry/LocalNormalCoordinates.f90
+++ b/src/Geometry/LocalNormalCoordinates.f90
@@ -1,33 +1,31 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: LocalNormalCoordinates  
-! Description: Given the local Cartesian coordinates PX(1:2) of a point P laying on the plane of the boundary face nf, this
-!              procedure assigns to csi(1:3) the non-Cartesian coordinates in a different local reference systems, whose axis are 
-!              aligned with the face sides. Scaling provides coordinate values to go from 0 to 1 for internal points. This 
-!              procedure applies for triangular faces and simplier works for rectangular faces (not for quadrilateral faces).   
+! Description: Given the local coordinates PX(1 to 2) of a point P laying on the plane of the boundary face nf, the procedure
+!              assigns to csi(1 to 3) the normal coordinates of the point Q corresponding to P in the inverse linear tranformation.  
 !----------------------------------------------------------------------------------------------------------------------------------
-subroutine LocalNormalCoordinates(PX,csi,nf)
+
+subroutine LocalNormalCoordinates ( PX, csi, nf )
 !------------------------
 ! Modules
 !------------------------ 
@@ -38,13 +36,13 @@ use Dynamic_allocation_module
 ! Declarations
 !------------------------
 implicit none
-integer(4),intent(in) :: nf
-double precision,intent(in) :: PX(SPACEDIM)
-double precision,intent(inout) :: csi(SPACEDIM)
+integer(4),intent(IN) :: nf
+double precision,intent(IN), dimension(1:SPACEDIM) :: PX
+double precision,intent(INOUT),dimension(1:SPACEDIM) :: csi
 integer(4) :: i,j,k,nodes,fkod
 double precision :: AA,BB,CC,DueArea,UsuDueArea,xj,yj,xk,yk
-integer(4),dimension(3) :: iseg = (/ 2,3,1 /)
-integer(4) :: mainod(2,3)
+integer(4), dimension(3)   :: iseg = (/ 2,3,1 /)
+integer(4), dimension(2,3) :: mainod 
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -54,14 +52,16 @@ integer(4) :: mainod(2,3)
 !------------------------
 ! Initializations
 !------------------------
+! Modification for compatibility xlf90 (IBM compiler): start
 mainod(1,1) = 1
 mainod(1,2) = 2
 mainod(1,3) = 3
 mainod(2,1) = 1
 mainod(2,2) = 3
 mainod(2,3) = 4
+! Modification for compatibility xlf90 (IBM compiler): end
 nodes = 4
-if (BoundaryFace(nf)%Node(4)%name<0) nodes = 3
+if (BoundaryFace(nf)%Node(4)%name<=0) nodes = 3
 fkod = nodes - 2                    ! = 1 (triangle), =2 (quadrilateral)
 DueArea = (3 - fkod) * BoundaryFace(nf)%Area
 UsuDueArea = one / DueArea
@@ -79,7 +79,7 @@ do i=1,2
    BB = yj - yk
    CC = xk - xj
    csi(i) = (AA + BB * PX(1) + CC * PX(2)) * UsuDueArea
-enddo
+end do
 csi(3) = one - (csi(1) + csi(2))
 !------------------------
 ! Deallocations
diff --git a/src/Geometry/MatrixProduct.f90 b/src/Geometry/MatrixProduct.f90
index b14c7d5..21477f0 100644
--- a/src/Geometry/MatrixProduct.f90
+++ b/src/Geometry/MatrixProduct.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/MatrixTransposition.f90 b/src/Geometry/MatrixTransposition.f90
index 8e27298..f42cf9d 100644
--- a/src/Geometry/MatrixTransposition.f90
+++ b/src/Geometry/MatrixTransposition.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/Matrix_Inversion_2x2.f90 b/src/Geometry/Matrix_Inversion_2x2.f90
index 3e985d7..6f43526 100644
--- a/src/Geometry/Matrix_Inversion_2x2.f90
+++ b/src/Geometry/Matrix_Inversion_2x2.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/Matrix_Inversion_3x3.f90 b/src/Geometry/Matrix_Inversion_3x3.f90
index 84ccb5d..d02a5e1 100644
--- a/src/Geometry/Matrix_Inversion_3x3.f90
+++ b/src/Geometry/Matrix_Inversion_3x3.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/Vector_Product.f90 b/src/Geometry/Vector_Product.f90
index 48b05c6..d86fd16 100644
--- a/src/Geometry/Vector_Product.f90
+++ b/src/Geometry/Vector_Product.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: Vector_Product    
 ! Description: To return in ww the cross product of vectors uu and vv.           
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine Vector_Product(uu,VV,ww,SPACEDIM)
 !------------------------
 ! Modules
diff --git a/src/Geometry/area_quadrilateral.f90 b/src/Geometry/area_quadrilateral.f90
index f0cd3a1..dc2663a 100644
--- a/src/Geometry/area_quadrilateral.f90
+++ b/src/Geometry/area_quadrilateral.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/area_triangle.f90 b/src/Geometry/area_triangle.f90
index a245679..ca3ac30 100644
--- a/src/Geometry/area_triangle.f90
+++ b/src/Geometry/area_triangle.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/dis_point_plane.f90 b/src/Geometry/dis_point_plane.f90
index 2923543..3699acf 100644
--- a/src/Geometry/dis_point_plane.f90
+++ b/src/Geometry/dis_point_plane.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/distance_point_line_2D.f90 b/src/Geometry/distance_point_line_2D.f90
index 1659f65..62408b1 100644
--- a/src/Geometry/distance_point_line_2D.f90
+++ b/src/Geometry/distance_point_line_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/distance_point_line_3D.f90 b/src/Geometry/distance_point_line_3D.f90
index 2b42d20..30ceaa7 100644
--- a/src/Geometry/distance_point_line_3D.f90
+++ b/src/Geometry/distance_point_line_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/line_plane_intersection.f90 b/src/Geometry/line_plane_intersection.f90
index 430fb34..9e616da 100644
--- a/src/Geometry/line_plane_intersection.f90
+++ b/src/Geometry/line_plane_intersection.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/point_inout_convex_non_degenerate_polygon.f90 b/src/Geometry/point_inout_convex_non_degenerate_polygon.f90
index ce9df52..e6edfd5 100644
--- a/src/Geometry/point_inout_convex_non_degenerate_polygon.f90
+++ b/src/Geometry/point_inout_convex_non_degenerate_polygon.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/point_inout_hexagon.f90 b/src/Geometry/point_inout_hexagon.f90
index 1d8e30a..82a2e8d 100644
--- a/src/Geometry/point_inout_hexagon.f90
+++ b/src/Geometry/point_inout_hexagon.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>. 
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/point_inout_pentagon.f90 b/src/Geometry/point_inout_pentagon.f90
index 3dd325f..279dce3 100644
--- a/src/Geometry/point_inout_pentagon.f90
+++ b/src/Geometry/point_inout_pentagon.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/point_inout_quadrilateral.f90 b/src/Geometry/point_inout_quadrilateral.f90
index c917ed8..2941f76 100644
--- a/src/Geometry/point_inout_quadrilateral.f90
+++ b/src/Geometry/point_inout_quadrilateral.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/quadratic_equation.f90 b/src/Geometry/quadratic_equation.f90
index a42cf34..5d3d3a4 100644
--- a/src/Geometry/quadratic_equation.f90
+++ b/src/Geometry/quadratic_equation.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/reference_system_change.f90 b/src/Geometry/reference_system_change.f90
index 8e2d7bf..71729d5 100644
--- a/src/Geometry/reference_system_change.f90
+++ b/src/Geometry/reference_system_change.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/three_plane_intersection.f90 b/src/Geometry/three_plane_intersection.f90
index 4feee68..a110cab 100644
--- a/src/Geometry/three_plane_intersection.f90
+++ b/src/Geometry/three_plane_intersection.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Geometry/vector_rotation.f90 b/src/Geometry/vector_rotation.f90
index 84d117a..c04c13e 100644
--- a/src/Geometry/vector_rotation.f90
+++ b/src/Geometry/vector_rotation.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/IC/GeneratePart.f90 b/src/IC/GeneratePart.f90
index b7ffc12..7721e29 100644
--- a/src/IC/GeneratePart.f90
+++ b/src/IC/GeneratePart.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -33,15 +32,19 @@ use Static_allocation_module
 use Hybrid_allocation_module
 use Dynamic_allocation_module
 use I_O_diagnostic_module
+
 !------------------------
 ! Declarations
 !------------------------
+!------------------------
+! Explicit interfaces
+!------------------------
 implicit none
 integer(4),intent(IN) :: IC_loop
 integer(4) :: Nt,Nz,Mate,IsopraS,NumParticles,i,j,k,dimensioni,NumPartPrima    
 integer(4) :: aux_factor,i_vertex,j_vertex,test_xy,test_z,n_levels,nag_aux
 integer(4) :: i_face,j_node,npi,ier,test_face,test_dam,test_xy_2
-double precision :: distance_hor,z_min,aux_scal,rnd,h_reservoir
+double precision :: distance_hor,z_min,aux_scal,rnd
 double precision :: aux_vec(3)
 integer(4),dimension(SPACEDIM) :: Npps
 double precision,dimension(SPACEDIM) :: MinOfMin,XminReset
@@ -50,44 +53,14 @@ double precision,dimension(:,:),allocatable :: Xmin,Xmax
 character(len=lencard)  :: nomsub = "GeneratePart"
 type(TyParticle),dimension(:),allocatable    :: pg_aux
 !------------------------
-! Explicit interfaces
-!------------------------
-interface
-   subroutine point_inout_convex_non_degenerate_polygon(point,n_sides,         &
-                                                        point_pol_1,           &
-                                                        point_pol_2,           &
-                                                        point_pol_3,           &
-                                                        point_pol_4,           &
-                                                        point_pol_5,           &
-                                                        point_pol_6,test)
-      implicit none
-      integer(4),intent(in) :: n_sides
-      double precision,intent(in) :: point(2),point_pol_1(2),point_pol_2(2)
-      double precision,intent(in) :: point_pol_3(2),point_pol_4(2)
-      double precision,intent(in) :: point_pol_5(2),point_pol_6(2)
-      integer(4),intent(inout) :: test
-      double precision :: dis1,dis2
-      double precision :: normal(2)
-   end subroutine point_inout_convex_non_degenerate_polygon
-end interface
-!------------------------
 ! Allocations
 !------------------------
 call random_seed()
 test_z = 0
 if (IC_loop==2) then
    do Nz=1,NPartZone
-      if (Partz(Nz)%IC_source_type==2) then
-         test_z = 1
-         if (Domain%tipo=="bsph") then
-! In case of DB-SPH boundary treatment, there is a fictitious fluid reservoir 
-! top, which completes the kernel suppport (only for pre-processing)
-            h_reservoir = Partz(Nz)%H_res + 3.d0 * Domain%h
-            else
-               h_reservoir = Partz(Nz)%H_res
-         endif
-      endif
-   enddo 
+      if (Partz(Nz)%IC_source_type==2) test_z = 1
+   end do 
 endif
 if (test_z==0) nag = 0 
 NumParticles = 0
@@ -96,7 +69,7 @@ if (ncord == 2) then
    else
       dimensioni = NumFacce
 end if
-allocate(xmin(spacedim,dimensioni),xmax(spacedim,dimensioni))
+allocate (xmin(spacedim,dimensioni),xmax(spacedim,dimensioni))
 !------------------------
 ! Initializations
 !------------------------
@@ -122,19 +95,19 @@ first_cycle: do Nz=1,NPartZone
 ! in 3D
          else
          call FindFrame(Xmin,Xmax,Nt)
-      endif
+      end if
 ! To evaluate the minimum and maximum coordinates of the zone checking for 
 ! all the subzones
       do i=1,Spacedim
          if (Xmin(i,nt)<Partz(Nz)%coordMM(i,1)) Partz(Nz)%coordMM(i,1) =       &
-            Xmin(i,nt)
-         if (Xmax(i,nt)>Partz(Nz)%coordMM(i,2)) Partz(Nz)%coordMM(i,2) =       &
-            Xmax(i,nt)
+                                                   Xmin(i,nt)
+         if ( Xmax(i,nt) > Partz(Nz)%coordMM(i,2) ) Partz(Nz)%coordMM(i,2) =   &
+                                                       Xmax(i,nt)
 ! To evaluate the minimum of subzones minimum coordinates
          MinOfMin(i) = min(MinOfMin(i),Xmin(i,nt))
-      enddo
-   enddo
-enddo first_cycle
+      end do
+   end do
+end do first_cycle
 ! Loop over the zone in order to set the particle locations
 second_cycle: do Nz=1,NPartZone
 ! To skip the boundaries not having types equal to "perimeter" or "pool"
@@ -162,13 +135,11 @@ second_cycle: do Nz=1,NPartZone
 ! Loops over Cartesian topography points
          do i_vertex=Partz(Nz)%ID_first_vertex,Partz(Nz)%ID_last_vertex
 ! Check if the vertex is inside the plan_reservoir     
-            call point_inout_convex_non_degenerate_polygon(                    &
-               Vertice(1:2,i_vertex),Partz(Nz)%plan_reservoir_points,          &
+            call point_inout_polygone(Vertice(1:2,i_vertex),                   &
+               Partz(Nz)%plan_reservoir_points,                                &
                Partz(Nz)%plan_reservoir_pos(1,1:2),                            &
                Partz(Nz)%plan_reservoir_pos(2,1:2),                            &
                Partz(Nz)%plan_reservoir_pos(3,1:2),                            &
-               Partz(Nz)%plan_reservoir_pos(4,1:2),                            &
-               Partz(Nz)%plan_reservoir_pos(4,1:2),                            &
                Partz(Nz)%plan_reservoir_pos(4,1:2),test_xy)
             if (test_xy==1) then
 ! Set the minimum topography height among the closest 9 points
@@ -184,7 +155,8 @@ second_cycle: do Nz=1,NPartZone
                end do
 ! Generating daughter points of the Cartesian topography, according to dx
 ! (maybe the function "ceiling" would be better than "int" here)
-               n_levels = int((h_reservoir - z_aux(i_vertex)) / Domain%dd) 
+               n_levels = int((Partz(Nz)%H_res - z_aux(i_vertex)) /            &
+                          Domain%dd) 
                do i=1,aux_factor
                   do j=1,aux_factor
                      do k=1,n_levels
@@ -203,7 +175,7 @@ second_cycle: do Nz=1,NPartZone
                                                         * Domain%dd + (j -     &
                                                         1 + 0.5d0) *           &
                                                         Domain%dd
-                        pg_aux(NumParticles)%coord(3) = (h_reservoir -         &
+                        pg_aux(NumParticles)%coord(3) = (Partz(Nz)%H_res -     &
                                                         Domain%dd / 2.d0) -    &
                                                         (k - 1) * Domain%dd
 ! Test if the particle is below the reservoir
@@ -219,15 +191,13 @@ second_cycle: do Nz=1,NPartZone
                            if (Tratto(BoundaryFace(i_face)%stretch)%zone==     &
                               Partz(Nz)%Car_top_zone) then  
 ! Test if the point lies inside the plan projection of the face     
-                              call point_inout_convex_non_degenerate_polygon(  &
+                              call point_inout_polygone(                       &
                                  pg_aux(NumParticles)%coord(1:2),              &
                                  BoundaryFace(i_face)%nodes,                   &
                                  BoundaryFace(i_face)%Node(1)%GX(1:2),         &
                                  BoundaryFace(i_face)%Node(2)%GX(1:2),         &
                                  BoundaryFace(i_face)%Node(3)%GX(1:2),         &
                                  BoundaryFace(i_face)%Node(4)%GX(1:2),         &
-                                 BoundaryFace(i_face)%Node(4)%GX(1:2),         &
-                                 BoundaryFace(i_face)%Node(4)%GX(1:2),         &
                                  test_xy)
                               if (test_xy==1) then
 ! No need for a critical section to update test_face: only one face/process 
@@ -253,14 +223,12 @@ second_cycle: do Nz=1,NPartZone
                         test_dam = 0
                         if (Partz(Nz)%dam_zone_ID>0) then
 ! Test if the point lies inside the plan projection of the dam zone
-                           call point_inout_convex_non_degenerate_polygon(     &
+                           call point_inout_polygone(                          &
                               pg_aux(NumParticles)%coord(1:2),                 &
                               Partz(Nz)%dam_zone_n_vertices,                   &
                               Partz(Nz)%dam_zone_vertices(1,1:2),              &
                               Partz(Nz)%dam_zone_vertices(2,1:2),              &
                               Partz(Nz)%dam_zone_vertices(3,1:2),              &
-                              Partz(Nz)%dam_zone_vertices(4,1:2),              &
-                              Partz(Nz)%dam_zone_vertices(4,1:2),              &
                               Partz(Nz)%dam_zone_vertices(4,1:2),test_xy)
                            if (test_xy==1) then
                               test_face = 0
@@ -275,17 +243,15 @@ second_cycle: do Nz=1,NPartZone
 ! top                                  
 if ((Tratto(BoundaryFace(i_face)%stretch)%zone==Partz(Nz)%dam_zone_ID).and.    &
                                        (BoundaryFace(i_face)%T(3,3)<0.)) then 
-! Test if the particle horizontal coordinates lie inside the horizontal 
+! Test if the particle horizontal coordinates ly inside the horizontal 
 ! projection of the face
- call point_inout_convex_non_degenerate_polygon(                               &
+                                    call point_inout_polygone(                 &
                                        pg_aux(NumParticles)%coord(1:2),        &
                                        BoundaryFace(i_face)%nodes,             &
                                        BoundaryFace(i_face)%Node(1)%GX(1:2),   &
                                        BoundaryFace(i_face)%Node(2)%GX(1:2),   &
                                        BoundaryFace(i_face)%Node(3)%GX(1:2),   &
                                        BoundaryFace(i_face)%Node(4)%GX(1:2),   &
-                                       BoundaryFace(i_face)%Node(4)%GX(1:2),   &
-                                       BoundaryFace(i_face)%Node(4)%GX(1:2),   &
                                        test_xy_2)
                                     if (test_xy_2==1) then
 ! Note: even if a particle simultanously belongs to 2 faces test_dam will 
@@ -375,7 +341,7 @@ if ((Tratto(BoundaryFace(i_face)%stretch)%zone==Partz(Nz)%dam_zone_ID).and.    &
       endif
       else
 ! Loop over the different regions belonging to a same zone
-         do Nt = Partz(Nz)%Indix(1),Partz(Nz)%Indix(2)
+         do Nt = Partz(Nz)%Indix(1), Partz(Nz)%Indix(2)
 ! To evaluate the number of particles for the subdomain Npps along all the 
 ! directions
             if ((Xmin(1,nt)== max_positive_number).or.                         &
@@ -383,12 +349,12 @@ if ((Tratto(BoundaryFace(i_face)%stretch)%zone==Partz(Nz)%dam_zone_ID).and.    &
 ! The zone is declared but is not used
                Npps = -1
                else 
-               do i=1,SPACEDIM
-                  NumPartPrima = nint((Xmin(i,nt) - MinOfMin(i)) / Domain%dd)
+               do i=1,spacedim
+                  NumPartPrima = Nint((Xmin(i,nt) - MinOfMin(i)) / Domain%dd)
                   Xminreset(i) = MinOfMIn(i) + NumPartPrima * Domain%dd
-                  Npps(i) = nint((Xmax(i,nt) - XminReset(i)) / Domain%dd)  
-               enddo
-            endif
+                  Npps(i) = NInt((Xmax(i,nt) - XminReset(i)) / Domain%dd)  
+               end do
+            end if
 ! To force almost one particle if the domain width in a direction is smaller  
 ! than dx
             if (ncord==2) where (Npps==0) Npps = 1
@@ -401,24 +367,25 @@ if ((Tratto(BoundaryFace(i_face)%stretch)%zone==Partz(Nz)%dam_zone_ID).and.    &
                   IsopraS = 0
             end if     
 ! To set the particles in the zone
-            call SetParticles(Nt,Nz,Mate,XminReset,Npps,NumParticles,IsopraS)
-         enddo
+            Call SetParticles (Nt,Nz,Mate,XminReset,Npps,NumParticles,         &
+                               IsopraS)
+         end do
 ! To set the upper pointer for the particles in the nz-th zone
          Partz(Nz)%limit(2) = NumParticles
    endif
-enddo second_cycle
+end do second_cycle
 test_z = 0
 if (IC_loop==2) then
    do Nz=1,NPartZone
       if (Partz(Nz)%IC_source_type==2) test_z = 1
-   enddo 
+   end do 
 endif
 if (test_z==0) nag = NumParticles
 nagpg = nag
 !------------------------
 ! Deallocations
 !------------------------
-deallocate(xmin,xmax)
+deallocate (xmin,xmax)
 return
 end subroutine GeneratePart
 
diff --git a/src/IC/IsParticleInternal2D.f90 b/src/IC/IsParticleInternal2D.f90
index 4b1b586..0a2f5bf 100644
--- a/src/IC/IsParticleInternal2D.f90
+++ b/src/IC/IsParticleInternal2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/IC/IsParticleInternal3D.f90 b/src/IC/IsParticleInternal3D.f90
index f4347b9..f81b1a3 100644
--- a/src/IC/IsParticleInternal3D.f90
+++ b/src/IC/IsParticleInternal3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.  
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/IC/SetParticleParameters.f90 b/src/IC/SetParticleParameters.f90
index 95fcf85..68ecc5a 100644
--- a/src/IC/SetParticleParameters.f90
+++ b/src/IC/SetParticleParameters.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -82,7 +81,6 @@ if (Domain%tipo=="bsph") then
    pg(npi)%rhoSPH_new = zero
    pg(npi)%uni = zero
    pg(npi)%sigma = zero
-   pg(npi)%sigma_same_fluid = zero
    pg(npi)%dShep = zero 
    pg(npi)%FS = 0 
    pg(npi)%Gamma_last_active = zero
diff --git a/src/IC/SetParticles.f90 b/src/IC/SetParticles.f90
index a173287..2f629cd 100644
--- a/src/IC/SetParticles.f90
+++ b/src/IC/SetParticles.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: SetParticles     
 ! Description: Particle coordinates (initial conditions).                
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine SetParticles(Nt,Nz,mate,Xmin,npps,NumParticles,IsopraS)
 !------------------------
 ! Modules
@@ -37,10 +37,10 @@ use I_O_diagnostic_module
 ! Declarations
 !------------------------
 implicit none
-integer(4),intent(in):: Nt,Nz,mate
-integer(4),intent(in) :: npps(SPACEDIM)
-double precision,intent(in) :: Xmin(SPACEDIM)
-integer(4),intent(inout) :: NumParticles,IsopraS
+integer(4),intent(IN):: Nt, Nz, mate
+integer(4),intent(IN), dimension(SPACEDIM) :: npps
+double precision,intent(IN), dimension(SPACEDIM) :: Xmin
+integer(4),intent(INOUT) :: NumParticles, IsopraS
 logical :: particellainterna
 integer(4) :: i,j,k,iaux,test,Nz_aux,nag_aux
 double precision :: aux1,aux2,aux3,rnd,tstop
@@ -61,10 +61,10 @@ logical,external :: IsParticleInternal3D,IsParticleInternal2D
 !------------------------
 if (nagpg>0) then
 ! To compute "time stop" for particles of type "law"
-   call stoptime(partz(Nz),tstop)
+   call stoptime (partz(Nz),tstop)
 ! To compute velocity for particles of type "law"
-   call vellaw(partz(Nz)%vlaw,Partz(Nz)%vel,Partz(Nz)%npointv)
-endif
+   call vellaw (partz(Nz)%vlaw,Partz(Nz)%vel,Partz(Nz)%npointv)
+end if
 if (Domain%tipo=="bsph") then
    if (ncord==3) then
       aux1 = + 0.25d0 * Domain%dd
@@ -81,7 +81,7 @@ if (Domain%tipo=="bsph") then
       aux3 = - Domain%dd * half
 endif
 PX(1) = Xmin(1) + aux1
-! In case the zone is declared, but not used.
+! In case the zone is declared but is not used.
 if (npps(1)<0) return
 ! Loop over the X direction.
 do i=1,(npps(1)-iaux)
@@ -100,8 +100,8 @@ do i=1,(npps(1)-iaux)
             particellainterna = IsParticleInternal2D(Nt,PX)
             else 
                 particellainterna = IsParticleInternal3D(Nt,PX,IsopraS)
-         endif
-! In case the particle is inside the zone
+         end if
+! In case the particle is inside the domain
          if (particellainterna) then
 ! the zone counter is increased
             NumParticles = NumParticles + 1
@@ -110,7 +110,7 @@ do i=1,(npps(1)-iaux)
             test = 0
             do Nz_aux=1,NPartZone
                if (Partz(Nz_aux)%IC_source_type==2) test = 1
-            enddo 
+            end do 
             if (test==0) then
                nag = nag + 1 
 ! To check the storage for the reached number of particles
@@ -133,7 +133,7 @@ do i=1,(npps(1)-iaux)
                                       Domain%dd
                else
                   pg(nag_aux)%coord = PX
-            endif
+            end if
             pg(nag_aux)%CoordOld = pg(nag_aux)%coord
 ! Setting Particle Parameters
             if (test==0) then
@@ -145,8 +145,8 @@ do i=1,(npps(1)-iaux)
             if ((Domain%tipo=="bsph").and.                                     &
                (Partz(pg(nag_aux)%izona)%tipo=="sour"))                        &
                call wavy_inlet(Partz(pg(nag_aux)%izona))
-         endif 
-      enddo
+         end if 
+      end do
    enddo
 enddo
 !------------------------
diff --git a/src/IC/SubCalcPreIdro.f90 b/src/IC/SubCalcPreIdro.f90
index 2fe3a2d..ff9e11b 100644
--- a/src/IC/SubCalcPreIdro.f90
+++ b/src/IC/SubCalcPreIdro.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/IC/initialization_fixed_granular_particle.f90 b/src/IC/initialization_fixed_granular_particle.f90
index fab590d..8ce4bd9 100644
--- a/src/IC/initialization_fixed_granular_particle.f90
+++ b/src/IC/initialization_fixed_granular_particle.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Interface_dispersion/drafts.f90 b/src/Interface_dispersion/drafts.f90
index d06fff9..d1aae64 100644
--- a/src/Interface_dispersion/drafts.f90
+++ b/src/Interface_dispersion/drafts.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Main_algorithm/Gest_Dealloc.f90 b/src/Main_algorithm/Gest_Dealloc.f90
index 8f55755..1845e94 100644
--- a/src/Main_algorithm/Gest_Dealloc.f90
+++ b/src/Main_algorithm/Gest_Dealloc.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -55,7 +54,7 @@ character(LEN=lencard), intent(IN) :: nomsub
 write (nout,'(1x,a)') ">> Storage deallocation in routine "//trim(nomsub)
 check = .true.
 if (allocated(Vertice)) then
-   deallocate(Vertice,stat=ier)
+   deallocate (Vertice,stat=ier)
       if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: VERTICE not deallocated with error code: ",ier
@@ -65,7 +64,7 @@ if (allocated(Vertice)) then
    endif
 endif
 if (allocated(Tratto)) then
-   deallocate(Tratto,stat=ier)
+   deallocate (Tratto,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: TRATTO not deallocated with error code: ",ier
@@ -75,7 +74,7 @@ if (allocated(Tratto)) then
    endif
 endif
 if (allocated(BoundaryFace)) then
-   deallocate(BoundaryFace,stat=ier)
+   deallocate (BoundaryFace,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: BoundaryFace not deallocated with error code: ",ier
@@ -85,7 +84,7 @@ if (allocated(BoundaryFace)) then
    endif
 endif
 if (allocated(BFaceList)) then 
-   deallocate(BFaceList,stat=ier)
+   deallocate (BFaceList,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: BFACELIST not deallocated with error code: ",ier
@@ -95,7 +94,7 @@ if (allocated(BFaceList)) then
    endif
 endif 
 if (allocated(BoundaryVertex)) then
-   deallocate(BoundaryVertex,stat=ier)
+   deallocate (BoundaryVertex,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: BOUNDARYVERTEX not deallocated with error code: ",ier
@@ -105,7 +104,7 @@ if (allocated(BoundaryVertex)) then
    endif
 endif
 if (allocated(BoundarySide)) then
-   deallocate(BoundarySide,stat=ier)
+   deallocate (BoundarySide,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: BOUNDARYSIDE not deallocated with error code: ",ier
@@ -115,7 +114,7 @@ if (allocated(BoundarySide)) then
    endif
 endif
 if (allocated(Partz)) then
-   deallocate(Partz,stat=ier)
+   deallocate (Partz,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: PARTZ not deallocated with error code: ",ier
@@ -125,7 +124,7 @@ if (allocated(Partz)) then
    endif
 endif
 if (allocated(Med)) then
-   deallocate(Med,stat=ier)
+   deallocate (Med,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
       "   Array: MED not deallocated with error code: ",ier
@@ -135,7 +134,7 @@ if (allocated(Med)) then
    endif
 endif
 if (allocated(OpCount)) then
-   deallocate(OpCount,stat=ier)
+   deallocate (OpCount,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: OpCount not deallocated with error code: ",ier
@@ -145,7 +144,7 @@ if (allocated(OpCount)) then
    endif
 endif
 if (allocated(SpCount)) then
-   deallocate(SpCount,stat=ier)
+   deallocate (SpCount,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: SpCount not deallocated with error code: ",ier
@@ -155,7 +154,7 @@ if (allocated(SpCount)) then
    endif
 endif
 if (allocated(EpCount)) then
-   deallocate(EpCount,stat=ier)
+   deallocate (EpCount,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: EpCount not deallocated with error code: ",ier
@@ -165,7 +164,7 @@ if (allocated(EpCount)) then
    endif
 endif
 if (allocated(EpOrdGrid)) then
-   deallocate(EpOrdGrid,stat=ier)
+   deallocate (EpOrdGrid,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: EpOrdGrid not deallocated with error code: ",ier
@@ -175,7 +174,7 @@ if (allocated(EpOrdGrid)) then
    endif
 endif
 if (allocated(Control_Sections)) then
-   deallocate(Control_Sections,stat=ier)
+   deallocate (Control_Sections,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: CONTROL_SECTION not deallocated with error code: ",ier
@@ -186,7 +185,7 @@ if (allocated(Control_Sections)) then
    endif
 endif
 if (allocated(Control_Points)) then
-   deallocate(Control_Points,stat=ier)
+   deallocate (Control_Points,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: CONTROL_POINTS not deallocated with error code: ",ier
@@ -197,7 +196,7 @@ if (allocated(Control_Points)) then
    endif
 endif
 if (allocated(Control_Lines)) then
-   deallocate(Control_Lines,stat=ier)
+   deallocate (Control_Lines,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: CONTROL_LINES not deallocated with error code: ",ier
@@ -208,7 +207,7 @@ if (allocated(Control_Lines)) then
    endif
 endif
 if (allocated(Pg)) then
-   deallocate(Pg,stat=ier)
+   deallocate (Pg,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: PG not deallocated with error code: ",ier
@@ -218,7 +217,7 @@ if (allocated(Pg)) then
    endif
 endif
 if (allocated(ts0_pg)) then
-   deallocate(ts0_pg,stat=ier)
+   deallocate (ts0_pg,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
       "   Array: ts0_pg not deallocated with error code: ",ier
@@ -288,7 +287,7 @@ if (allocated(PartKernel)) then
    endif
 endif
 if (allocated(rag)) then
-   deallocate(rag,stat=ier)
+   deallocate (rag,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: rag not deallocated with error code: ",ier
@@ -308,7 +307,7 @@ if (allocated(BoundaryDataTab)) then
    endif
 endif
 if (allocated(BoundaryDataPointer)) then
-   deallocate(BoundaryDataPointer,stat=ier)
+   deallocate (BoundaryDataPointer,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: BoundaryDataPointer not deallocated with error code: ",ier
@@ -351,7 +350,7 @@ if (Domain%tipo=="bsph") then
       endif
    endif
    if (allocated(nPartIntorno_fw)) then
-      deallocate(nPartIntorno_fw,stat=ier)
+      deallocate (nPartIntorno_fw,stat=ier)
       if (ier/=0) then
          write (nout,'(1x,a,i2)')                                              &
          "   Array: nPartIntorno_fw not deallocated with error code: ",ier
@@ -362,39 +361,28 @@ if (Domain%tipo=="bsph") then
       endif
    endif
    if (allocated(PartIntorno_fw)) then
-      deallocate(PartIntorno_fw,stat=ier)
+      deallocate (PartIntorno_fw,stat=ier)
       if (ier/=0) then
          write (nout,'(1x,a,i2)')                                              &
-            "   Array PartIntorno_fw not deallocated with error code: ",ier
+            "   Array: PartIntorno_fw not deallocated with error code: ",ier
          check = .false.
          else
             write (nout,'(1x,a)')                                              &
-               "   Array PartIntorno_fw successfully deallocated "
-      endif
-   endif
-   if (allocated(grad_vel_VSL_fw)) then
-      deallocate(grad_vel_VSL_fw,stat=ier)
-      if (ier/=0) then
-         write (nout,'(1x,a,i2)')                                              &
-            "   Array grad_vel_VSL_fw not deallocated with error code: ",ier
-         check = .false.
-         else
-            write (nout,'(1x,a)')                                              &
-               "   Array grad_vel_VSL_fw successfully deallocated "
+               "   Array: PartIntorno_fw successfully deallocated "
       endif
    endif
    if (allocated(kernel_fw)) then
-      deallocate(kernel_fw,stat=ier)
+      deallocate (kernel_fw,stat=ier)
       if (ier/=0) then
          write (nout,'(1x,a,i2)')                                              &
-            "   Array kernel_fw not deallocated with error code: ",ier
+            "   Array: kernel_fw not deallocated with error code: ",ier
          check = .false.
          else
-            write (nout,'(1x,a)') "   Array kernel_fw successfully deallocated"
+            write (nout,'(1x,a)') "   Array: kernel_fw successfully deallocated"
         endif
    endif
    if (allocated(rag_fw)) then
-      deallocate(rag_fw,stat=ier)
+      deallocate (rag_fw,stat=ier)
       if (ier/=0) then
          write (nout,'(1x,a,i2)')                                              &
             "   Array: rag_fw not deallocated with error code: ",ier
@@ -406,7 +394,7 @@ if (Domain%tipo=="bsph") then
 endif
 do i=1,n_bodies
    if (allocated(body_arr(i)%body_kinematics)) then
-      deallocate(body_arr(i)%body_kinematics,stat =ier)
+      deallocate (body_arr(i)%body_kinematics,stat =ier)
       if (ier/=0) then
          write (nout,'(1x,2a,i2)') "   Array: body_arr(i)%body_kinematics not",&
              " deallocated with error code: ",ier
@@ -418,7 +406,7 @@ do i=1,n_bodies
    endif
 enddo
 if (allocated(body_arr)) then
-   deallocate(body_arr,stat =ier)
+   deallocate (body_arr,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: body_arr not deallocated with error code: ",ier
@@ -428,7 +416,7 @@ if (allocated(body_arr)) then
    endif
 endif
 if (allocated(bp_arr)) then
-   deallocate(bp_arr,stat =ier)
+   deallocate (bp_arr,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: bp_arr not deallocated with error code: ",ier
@@ -438,7 +426,7 @@ if (allocated(bp_arr)) then
    endif
 endif
 if (allocated(Icont_bp)) then
-   deallocate(Icont_bp,stat=ier)
+   deallocate (Icont_bp,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: Icont_bp not deallocated with error code: ",ier
@@ -448,7 +436,7 @@ if (allocated(Icont_bp)) then
    endif
 endif
 if (allocated(NPartOrd_bp)) then
-   deallocate(NPartOrd_bp,stat =ier)
+   deallocate (NPartOrd_bp,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: NPartOrd_bp not deallocated with error code: ",ier
@@ -458,7 +446,7 @@ if (allocated(NPartOrd_bp)) then
    endif
 endif
 if (allocated(nPartIntorno_bp_f)) then
-   deallocate(nPartIntorno_bp_f,stat=ier)
+   deallocate (nPartIntorno_bp_f,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
       "   Array: nPartIntorno_bp_f not deallocated with error code: ",ier
@@ -469,7 +457,7 @@ if (allocated(nPartIntorno_bp_f)) then
    endif
 endif
 if (allocated(PartIntorno_bp_f)) then
-   deallocate(PartIntorno_bp_f,stat=ier)
+   deallocate (PartIntorno_bp_f,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: PartIntorno_bp_f not deallocated with error code: ",ier
@@ -480,7 +468,7 @@ if (allocated(PartIntorno_bp_f)) then
    endif
 endif
 if (allocated(KerDer_bp_f_cub_spl)) then
-   deallocate(KerDer_bp_f_cub_spl,stat =ier)
+   deallocate (KerDer_bp_f_cub_spl,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: KerDer_bp_f_cub_spl not deallocated with error code: ",ier
@@ -491,7 +479,7 @@ if (allocated(KerDer_bp_f_cub_spl)) then
    endif
 endif
 if (allocated(KerDer_bp_f_Gal)) then
-   deallocate(KerDer_bp_f_Gal,stat =ier)
+   deallocate (KerDer_bp_f_Gal,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: KerDer_bp_f_Gal not deallocated with error code: ",ier
@@ -502,7 +490,7 @@ if (allocated(KerDer_bp_f_Gal)) then
    endif
 endif 
 if (allocated(rag_bp_f)) then
-   deallocate(rag_bp_f,stat =ier)
+   deallocate (rag_bp_f,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: rag_bp_f not deallocated with error code: ",ier
@@ -512,7 +500,7 @@ if (allocated(rag_bp_f)) then
    endif
 endif
 if (allocated(surf_body_part)) then
-   deallocate(surf_body_part,stat =ier)
+   deallocate (surf_body_part,stat =ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: surf_body_part not deallocated with error code: ",ier
@@ -523,7 +511,7 @@ if (allocated(surf_body_part)) then
    endif
 endif 
 if (allocated(nPartIntorno_bp_bp)) then
-   deallocate(nPartIntorno_bp_bp,stat=ier)
+   deallocate (nPartIntorno_bp_bp,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: nPartIntorno_bp_bp not deallocated with error code: ",ier
@@ -534,7 +522,7 @@ if (allocated(nPartIntorno_bp_bp)) then
    endif
 endif
 if (allocated(PartIntorno_bp_bp)) then
-   deallocate(PartIntorno_bp_bp,stat=ier)
+   deallocate (PartIntorno_bp_bp,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: PartIntorno_bp_bp not deallocated with error code: ",ier
@@ -545,7 +533,7 @@ if (allocated(PartIntorno_bp_bp)) then
    endif
 endif
 if (allocated(rag_bp_bp)) then
-   deallocate(rag_bp_bp,stat=ier)
+   deallocate (rag_bp_bp,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: rag_bp_bp not deallocated with error code: ",ier
@@ -555,7 +543,7 @@ if (allocated(rag_bp_bp)) then
    endif
 endif
 if (allocated(impact_vel)) then
-   deallocate(impact_vel,stat=ier)
+   deallocate (impact_vel,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: impact_vel not deallocated with error code: ",ier
@@ -565,7 +553,7 @@ if (allocated(impact_vel)) then
    endif
 endif
 if (allocated(BoundaryConvexEdge)) then
-   deallocate(BoundaryConvexEdge,stat=ier)
+   deallocate (BoundaryConvexEdge,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: BoundaryConvexEdge not deallocated with error code: ",ier
@@ -576,7 +564,7 @@ if (allocated(BoundaryConvexEdge)) then
    endif
 endif
 if (allocated(GCBFVector)) then
-   deallocate(GCBFVector,stat=ier)
+   deallocate (GCBFVector,stat=ier)
    if (ier/=0) then
       write (nout,'(1x,a,i2)')                                                 &
          "   Array: GCBFVector not deallocated with error code: ",ier
@@ -598,34 +586,12 @@ endif
 if (allocated(DBSPH%kinematics)) then
    deallocate(DBSPH%kinematics,STAT=ier)
    if (ier/=0) then
-      write(nout,*) 'Deallocation of DBSPH%kinematics in ',                    &
-         'GestDealloc failed; the program terminates here. '
+      write(nout,*) 'Deallocation of aux_array in GestDealloc failed; ',       &
+         'the program terminates here.'
       call diagnostic (arg1=5,arg2=340)       
       else
-         write (nout,'(1x,a)') "Deallocation of DBSPH%kinematics ",            &
-            "in GestDealloc successfully completed."
-   endif
-endif
-if (allocated(DBSPH%n_kinematics_records)) then
-   deallocate(DBSPH%n_kinematics_records,STAT=ier)
-   if (ier/=0) then
-      write(nout,*) 'Deallocation of DBSPH%n_kinematics_records in ',          &
-         'GestDealloc failed; the program terminates here. '
-      call diagnostic (arg1=5,arg2=340)       
-      else
-         write (nout,'(1x,a)') "Deallocation of DBSPH%n_kinematics_records ",  &
-            "in GestDealloc successfully completed."
-   endif
-endif
-if (allocated(DBSPH%rotation_centre)) then
-   deallocate(DBSPH%rotation_centre,STAT=ier)
-   if (ier/=0) then
-      write(nout,*) 'Deallocation of DBSPH%rotation_centre in ',               &
-         'GestDealloc failed; the program terminates here. '
-      call diagnostic (arg1=5,arg2=340)       
-      else
-         write (nout,'(1x,a)') "Deallocation of DBSPH%rotation_centre ",       &
-            "in GestDealloc successfully completed."
+         write (nout,'(1x,a)')                                                 &
+            "Deallocation of aux_array in GestDealloc successfully completed."
    endif
 endif
 if (allocated(DBSPH%inlet_sections)) then
diff --git a/src/Main_algorithm/Gest_Trans.f90 b/src/Main_algorithm/Gest_Trans.f90
index c60a54e..04b2dfc 100644
--- a/src/Main_algorithm/Gest_Trans.f90
+++ b/src/Main_algorithm/Gest_Trans.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -39,14 +38,14 @@ use I_O_diagnostic_module
 !------------------------
 implicit none
 integer(4),parameter :: ner0 = 0
-integer(4) :: npi,NumCellmax,i,ier,k,kk,k1,k2,nlinee,nvalori,alloc_stat
+integer(4) :: npi,NumCellmax,i,ier,k,kk,k1,k2,nlinee,nvalori
 character(len=lencard) :: nomsub = "GEST_TRANS"
 character(len=lencard) :: filename,stringa,prefix,filevtk
 character(len=200)     :: cargo
 double precision,dimension(:),allocatable :: verticecolore
 logical,external :: check_files2
 integer(4),external :: stepdata
-character(100), external :: lcase
+character(80), external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -59,14 +58,14 @@ character(100), external :: lcase
 !------------------------
 ! Statements
 !------------------------
-write(nout,"(/)")
-write(nout,*) "Initial number of particles      NAG= ",nag
-write( nout,"(/)" )
+write (nout,"(/)")
+write (nout,*) "Initial number of particles      NAG= ",nag
+write ( nout,"(/)" )
 if (Domain%ioutopt<0) then
-   write(nout,*) 
-   write(nout,*) "======== PARTICLES COORDINATES =========="
+   write (nout,*) 
+   write (nout,*) "======== PARTICLES COORDINATES =========="
    do npi=1,nag
-      write(nout,"(i10,4f14.5)") npi,pg(npi)%coord,pg(npi)%tstop
+      write (nout,"(i10,4f14.5)") npi,pg(npi)%coord,pg(npi)%tstop
    enddo
 endif
 ! Array initialization for vtkconverter
@@ -77,37 +76,37 @@ Time_Block = zero
 MaxNcbs = int(MAXCLOSEBOUNDSIDES * PARTICLEBUFFER)
 MaxNcbf = int(Domain%MAXCLOSEBOUNDFACES * PARTICLEBUFFER)
 if ((Domain%tipo=="semi").or.(Domain%tipo=="bsph"))  then
-   allocate(BoundaryDataPointer(1:3,1:PARTICLEBUFFER),stat=ier)
+   allocate (BoundaryDataPointer(1:3,1:PARTICLEBUFFER),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays BoundaryDataPointer not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays BoundaryDataPointer successfully allocated "
    endif
    if (Ncord==2) then
       write(nout,'(a,i15)') "     Max num of close boundary sides: MaxNcbs = ",&
          MaxNcbs
-      allocate(BoundaryDataTab(1:MaxNcbs),stat=ier)
+      allocate (BoundaryDataTab(1:MaxNcbs),stat=ier)
       if (ier/=0) then
-         write(nout,'(1x,a,i2)')                                               &
+         write (nout,'(1x,a,i2)')                                              &
             "   Arrays BoundaryDataTab not allocated. Error code: ",ier
           call diagnostic (arg1=4,arg3=nomsub)
          else
-            write(nout,'(1x,a)')                                               &
+            write (nout,'(1x,a)')                                              &
                "   Arrays BoundaryDataTab successfully allocated "
       endif
       else
          write(nout,'(a,i15)')                                                 &
             "     Max num of close boundary faces: MaxNcbf = ",MaxNcbf
-         allocate(BoundaryDataTab(1:MaxNcbf),stat=ier)
+         allocate (BoundaryDataTab(1:MaxNcbf),stat=ier)
          if (ier/=0) then
-            write(nout,'(1x,a,i2)')                                            &
+            write (nout,'(1x,a,i2)')                                           &
                "   Arrays BoundaryDataTab not allocated. Error code: ",ier
             call diagnostic (arg1=4,arg3=nomsub)
             else
-               write(nout,'(1x,a)')                                            &
+               write (nout,'(1x,a)')                                           &
                   "   Arrays BoundaryDataTab successfully allocated"
          endif
    endif
@@ -115,300 +114,289 @@ endif
 NMAXPARTJ = Domain%COEFNMAXPARTJ * (Domain%h * four / Domain%dd) ** Ncord
 write(nout,'(2a,i15)') "     Max num particles surrounding the current ",      &
    "particle: NMAXPARTJ = ",NMAXPARTJ
-allocate(Array_Flu(1:PARTICLEBUFFER),stat=ier)
+allocate (Array_Flu(1:PARTICLEBUFFER),stat=ier)
 if (ier/=0) then
-   write(nout,'(1x,a,i2)') "   Arrays Array_Flu not allocated. Error code: ",  &
+   write (nout,'(1x,a,i2)') "   Arrays Array_Flu not allocated. Error code: ", &
       ier
    call diagnostic (arg1=4,arg3=nomsub)
    else
-      write(nout,'(1x,a)') "   Arrays Array_Flu successfully allocated "
+      write (nout,'(1x,a)') "   Arrays Array_Flu successfully allocated "
 endif
-allocate(nPartIntorno(1:PARTICLEBUFFER),stat=ier)
+allocate (nPartIntorno(1:PARTICLEBUFFER),stat=ier)
 if (ier/=0) then
-   write(nout,'(1x,a,i2)')"   Arrays NPARTINTORNO not allocated. Error code: " &
+   write (nout,'(1x,a,i2)')"   Arrays NPARTINTORNO not allocated. Error code: "&
    ,ier
    call diagnostic (arg1=4,arg3=nomsub)
    else
-      write(nout,'(1x,a)') "   Arrays NPARTINTORNO successfully allocated "
+      write (nout,'(1x,a)') "   Arrays NPARTINTORNO successfully allocated "
 endif
-allocate(PartIntorno(1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
+allocate (PartIntorno(1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
 if (ier/=0) then
-   write(nout,'(1x,a,i2)') "   Arrays PARTINTORNO not allocated. Error code: " &
+   write (nout,'(1x,a,i2)') "   Arrays PARTINTORNO not allocated. Error code: "&
       ,ier
    call diagnostic (arg1=4,arg3=nomsub)
    else
-      write(nout,'(1x,a)') "   Arrays PARTINTORNO successfully allocated "
+      write (nout,'(1x,a)') "   Arrays PARTINTORNO successfully allocated "
 endif
-allocate(PartKernel(1:4,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
+allocate (PartKernel(1:4,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
 if (ier/=0) then
-   write(nout,'(1x,a,i2)') "   Arrays PARTKERNEL not allocated. Error code: ", &
+   write (nout,'(1x,a,i2)') "   Arrays PARTKERNEL not allocated. Error code: ",&
       ier
    call diagnostic (arg1=4,arg3=nomsub)
    else
-      write(nout,'(1x,a)') "   Arrays PARTKERNEL successfully allocated "
+      write (nout,'(1x,a)') "   Arrays PARTKERNEL successfully allocated "
 endif
-allocate(rag(1:3,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
+allocate (rag(1:3,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
 if (ier/=0) then
-   write(nout,'(1x,a,i2)') "   Arrays RAG not allocated. Error code: ",ier
+   write (nout,'(1x,a,i2)') "   Arrays RAG not allocated. Error code: ",ier
    call diagnostic (arg1=4,arg3=nomsub)
    else
-      write(nout,'(1x,a)') "   Arrays RAG successfully allocated "
+      write (nout,'(1x,a)') "   Arrays RAG successfully allocated "
 endif
 if (Domain%tipo=="bsph") then
-   allocate(nPartIntorno_fw(1:PARTICLEBUFFER),stat=ier)
+   allocate (nPartIntorno_fw(1:PARTICLEBUFFER),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays NPARTINTORNO_fw not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays NPARTINTORNO_fw successfully allocated "
    endif
-   allocate(PartIntorno_fw(1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
+   allocate (PartIntorno_fw(1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays PARTINTORNO_fw not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)') "   Array PARTINTORNO_fw successfully allocated"
-   endif
-   allocate(grad_vel_VSL_fw(1:3,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
-   if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
-         "   Array grad_vel_VSL_fw not allocated. Error code: ",ier
-      call diagnostic (arg1=4,arg3=nomsub)
-      else
-         write(nout,'(1x,a)') "   Array grad_vel_VSL_fw successfully allocated "
+         write (nout,'(1x,a)') "   Arrays PARTINTORNO_fw successfully allocated"
    endif
    allocate(kernel_fw(2,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays kernel_fw not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)') "   Array kernel_fw successfully allocated "
+         write (nout,'(1x,a)') "   Arrays kernel_fw successfully allocated "
    endif
-   allocate(rag_fw(1:3,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
+   allocate (rag_fw(1:3,1:NMAXPARTJ*PARTICLEBUFFER),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)') "   Array RAG_fw not allocated. Error code: ",   &
+      write (nout,'(1x,a,i2)') "   Arrays RAG_fw not allocated. Error code: ", &
          ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)') "   Array RAG_fw successfully allocated "
+         write (nout,'(1x,a)') "   Arrays RAG_fw successfully allocated "
    endif
 endif
 if (n_bodies>0) then
-   allocate(nPartIntorno_bp_f(n_body_part),stat=ier)
+   allocate (nPartIntorno_bp_f(n_body_part),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays nPartIntorno_bp_f not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays nPartIntorno_bp_f successfully allocated "
    endif
-   allocate(PartIntorno_bp_f(NMAXPARTJ*n_body_part),stat=ier)
+   allocate (PartIntorno_bp_f(NMAXPARTJ*n_body_part),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays PartIntorno_bp_f not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays PartIntorno_bp_f successfully allocated "
    endif
-   allocate(KerDer_bp_f_cub_spl(NMAXPARTJ*n_body_part),stat=ier)
+   allocate (KerDer_bp_f_cub_spl(NMAXPARTJ*n_body_part),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays KerDer_bp_f_cub_spl not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays KerDer_bp_f_cub_spl successfully allocated "
    endif
-   allocate(KerDer_bp_f_Gal(NMAXPARTJ*n_body_part),stat=ier)
+   allocate (KerDer_bp_f_Gal(NMAXPARTJ*n_body_part),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays KerDer_bp_f_Gal not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays KerDer_bp_f_Gal successfully allocated "
    endif 
-   allocate(rag_bp_f(3,NMAXPARTJ*n_body_part),stat=ier)
+   allocate (rag_bp_f(3,NMAXPARTJ*n_body_part),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)') "   Arrays rag_bp_f not allocated. Error code: " &
+      write (nout,'(1x,a,i2)') "   Arrays rag_bp_f not allocated. Error code: "&
          ,ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)') "   Arrays rag_bp_f successfully allocated "
+         write (nout,'(1x,a)') "   Arrays rag_bp_f successfully allocated "
    endif
-   allocate(nPartIntorno_bp_bp(n_surf_body_part),stat=ier)
+   allocate (nPartIntorno_bp_bp(n_surf_body_part),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays nPartIntorno_bp_bp not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-      write(nout,'(1x,a)')                                                     &
+      write (nout,'(1x,a)')                                                    &
          "   Arrays nPartIntorno_bp_bp successfully allocated "
    endif
-   allocate(PartIntorno_bp_bp(n_surf_body_part*NMAXPARTJ),stat=ier)
+   allocate (PartIntorno_bp_bp(n_surf_body_part*NMAXPARTJ),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays PartIntorno_bp_bp not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)')                                                  &
+         write (nout,'(1x,a)')                                                 &
             "   Arrays PartIntorno_bp_bp successfully allocated "
    endif
-   allocate(rag_bp_bp(3,n_surf_body_part*NMAXPARTJ),stat=ier)
+   allocate (rag_bp_bp(3,n_surf_body_part*NMAXPARTJ),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Arrays rag_bp_bp not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)') "   Arrays rag_bp_bp successfully allocated "
+         write (nout,'(1x,a)') "   Arrays rag_bp_bp successfully allocated "
    endif
    if (ncord==2)                                                               &
-      allocate(impact_vel(n_surf_body_part,(n_bodies+NumBSides)),stat=ier)
+      allocate (impact_vel(n_surf_body_part,(n_bodies+NumBSides)),stat=ier)
    if (ncord==3)                                                               &
-      allocate(impact_vel(n_surf_body_part,(n_bodies+NumFacce)),stat=ier)
+      allocate (impact_vel(n_surf_body_part,(n_bodies+NumFacce)),stat=ier)
    if (ier/=0) then
-      write(nout,'(1x,a,i2)')                                                  &
+      write (nout,'(1x,a,i2)')                                                 &
          "   Array impact_vel not allocated. Error code: ",ier
       call diagnostic (arg1=4,arg3=nomsub)
       else
-         write(nout,'(1x,a)') "   Array impact_vel successfully allocated "
+         write (nout,'(1x,a)') "   Array impact_vel successfully allocated "
    endif
    impact_vel = 0.d0
 endif
-write(nout,'(1x,a)') "..."
-write(nout,'(a,i15)') " Max number of particles  : PARTICLEBUFFER = ",         &
+write (nout,'(1x,a)') "..."
+write (nout,'(a,i15)') " Max number of particles  : PARTICLEBUFFER = ",        &
    PARTICLEBUFFER
-write(nout,*) " Size # of elements in array pg                  : ",size(pg)
-write(nout,*) " Size # of elements in array BoundaryDataTab     : ",           &
+write (nout,*) " Size # of elements in array pg                  : ",size(pg)
+write (nout,*) " Size # of elements in array BoundaryDataTab     : ",          &
    size(BoundaryDataTab)
-write(nout,*) " Size # of elements in array BoundaryDataPointer : ",           &
+write (nout,*) " Size # of elements in array BoundaryDataPointer : ",          &
    size(BoundaryDataPointer)
-write(nout,*) " Size # of elements in array Array_Flu           : ",           &
+write (nout,*) " Size # of elements in array Array_Flu           : ",          &
    size(Array_Flu)
-write(nout,*) " Size # of elements in array nPartIntorno        : ",           &
+write (nout,*) " Size # of elements in array nPartIntorno        : ",          &
    size(nPartIntorno)
-write(nout,*) " Size # of elements in array PartIntorno         : ",           &
+write (nout,*) " Size # of elements in array PartIntorno         : ",          &
    size(PartIntorno)
-write(nout,*) " Size # of elements in array PartKernel          : ",           &
+write (nout,*) " Size # of elements in array PartKernel          : ",          &
    size(PartKernel)
-write(nout,*) " Size # of elements in array rag                 : ",           &
+write (nout,*) " Size # of elements in array rag                 : ",          &
    size(rag)
 if ((Domain%tipo=="bsph").and.(DBSPH%n_w>0)) then
-   write(nout,*) " Size # of elements in array pg_w                : ",        &
+   write (nout,*) " Size # of elements in array pg_w                : ",       &
       size(pg_w)
-   write(nout,*) " Size # of elements in array nPartIntorno_fw     : ",        &
+   write (nout,*) " Size # of elements in array nPartIntorno_fw     : ",       &
       size(nPartIntorno_fw)
-   write(nout,*) " Size # of elements in array PartIntorno_fw      : ",        &
+   write (nout,*) " Size # of elements in array PartIntorno_fw      : ",       &
       size(PartIntorno_fw)
-   write(nout,*) " Size # of elements in array kernel_fw           : ",        &
+   write (nout,*) " Size # of elements in array kernel_fw           : ",       &
       size(kernel_fw)
-   write(nout,*) " Size # of elements in array rag_fw              : ",        &
+   write (nout,*) " Size # of elements in array rag_fw              : ",       &
       size(rag_fw)
-   write(nout,*) " Size # of elements in array grad_vel_VSL_fw     : ",        &
-      size(grad_vel_VSL_fw)   
 endif
 if (n_bodies>0) then
-   write(nout,*) " Size # of elements in array nPartIntorno_bp_f   : ",        &
+   write (nout,*) " Size # of elements in array nPartIntorno_bp_f   : ",       &
       size(nPartIntorno_bp_f)
-   write(nout,*) " Size # of elements in array PartIntorno_bp_f    : ",        &
+   write (nout,*) " Size # of elements in array PartIntorno_bp_f    : ",       &
       size(PartIntorno_bp_f)
-   write(nout,*) " Size # of elements in array KerDer_bp_f_cub_spl : ",        &
+   write (nout,*) " Size # of elements in array KerDer_bp_f_cub_spl : ",       &
       size(KerDer_bp_f_cub_spl)
-   write(nout,*) " Size # of elements in array KerDer_bp_f_Gal     : ",        &
+   write (nout,*) " Size # of elements in array KerDer_bp_f_Gal     : ",       &
       size(KerDer_bp_f_Gal) 
-   write(nout,*) " Size # of elements in array rag_bp_f            : ",        &
+   write (nout,*) " Size # of elements in array rag_bp_f            : ",       &
       size(rag_bp_f)
-   write(nout,*) " Size # of elements in array surf_body_part      : ",        &
+   write (nout,*) " Size # of elements in array surf_body_part      : ",       &
       size(surf_body_part) 
-   write(nout,*) " Size # of elements in array nPartIntorno_bp_bp  : ",        &
+   write (nout,*) " Size # of elements in array nPartIntorno_bp_bp  : ",       &
       size(nPartIntorno_bp_bp)
-   write(nout,*) " Size # of elements in array PartIntorno_bp_bp   : ",        &
+   write (nout,*) " Size # of elements in array PartIntorno_bp_bp   : ",       &
       size(PartIntorno_bp_bp)
-   write(nout,*) " Size # of elements in array rag_bp_bp           : ",        &
+   write (nout,*) " Size # of elements in array rag_bp_bp           : ",       &
       size(rag_bp_bp)
 endif
-write(nout,'(1x,a)') "..."
-write(nout,*) " Size in bytes of array pg                       : ",sizeof(pg)
-write(nout,*) " Size in bytes of array BoundaryDataTab          : ",           &
+write (nout,'(1x,a)') "..."
+write (nout,*) " Size in bytes of array pg                       : ",sizeof(pg)
+write (nout,*) " Size in bytes of array BoundaryDataTab          : ",          &
    sizeof(BoundaryDataTab)
-write(nout,*) " Size in bytes of array BoundaryDataPointer      : ",           &
+write (nout,*) " Size in bytes of array BoundaryDataPointer      : ",          &
    sizeof(BoundaryDataPointer)
-write(nout,*) " Size in bytes of array Array_Flu                : ",           &
+write (nout,*) " Size in bytes of array Array_Flu                : ",          &
    sizeof(Array_Flu)
-write(nout,*) " Size in bytes of array nPartIntorno             : ",           &
+write (nout,*) " Size in bytes of array nPartIntorno             : ",          &
    sizeof(nPartIntorno)
-write(nout,*) " Size in bytes of array PartIntorno              : ",           &
+write (nout,*) " Size in bytes of array PartIntorno              : ",          &
    sizeof(PartIntorno)
-write(nout,*) " Size in bytes of array PartKernel               : ",           &
+write (nout,*) " Size in bytes of array PartKernel               : ",          &
    sizeof(PartKernel)
-write(nout,*) " Size in bytes of array rag                      : ",sizeof(rag)
+write (nout,*) " Size in bytes of array rag                      : ",sizeof(rag)
 if ((Domain%tipo=="bsph").and.(DBSPH%n_w>0)) then
-   write(nout,*) " Size in bytes of array pg_w                     : ",        &
+   write (nout,*) " Size in bytes of array pg_w                     : ",       &
       sizeof(pg_w)
-   write(nout,*) " Size in bytes of array nPartIntorno_fw          : ",        &
+   write (nout,*) " Size in bytes of array nPartIntorno_fw          : ",       &
       sizeof(nPartIntorno_fw)
-   write(nout,*) " Size in bytes of array PartIntorno_fw           : ",        &
+   write (nout,*) " Size in bytes of array PartIntorno_fw           : ",       &
       sizeof(PartIntorno_fw)
-   write(nout,*) " Size in bytes of array kernel_fw                : ",        &
+   write (nout,*) " Size in bytes of array kernel_fw                : ",       &
       sizeof(kernel_fw)
-   write(nout,*) " Size in bytes of array rag_fw                   : ",        &
+   write (nout,*) " Size in bytes of array rag_fw                   : ",       &
       sizeof(rag_fw)
-   write(nout,*) " Size in bytes of array grad_vel_VSL_fw          : ",        &
-      sizeof(grad_vel_VSL_fw)   
 endif
 if (n_bodies>0) then
-   write(nout,*) " Size in bytes of array nPartIntorno_bp_f        : ",        &
+   write (nout,*) " Size in bytes of array nPartIntorno_bp_f        : ",       &
       sizeof(nPartIntorno_bp_f)
-   write(nout,*) " Size in bytes of array PartIntorno_bp_f         : ",        &
+   write (nout,*) " Size in bytes of array PartIntorno_bp_f         : ",       &
       sizeof(PartIntorno_bp_f)
-   write(nout,*) " Size in bytes of array KerDer_bp_f_cub_spl      : ",        &
+   write (nout,*) " Size in bytes of array KerDer_bp_f_cub_spl      : ",       &
       sizeof(KerDer_bp_f_cub_spl)
-   write(nout,*) " Size in bytes of array KerDer_bp_f_Gal          : ",        &
+   write (nout,*) " Size in bytes of array KerDer_bp_f_Gal          : ",       &
       sizeof(KerDer_bp_f_Gal)
-   write(nout,*) " Size in bytes of array rag_bp_f                 : ",        &
+   write (nout,*) " Size in bytes of array rag_bp_f                 : ",       &
       sizeof(rag_bp_f)
-   write(nout,*) " Size in bytes of array surf_body_part           : ",        &
+   write (nout,*) " Size in bytes of array surf_body_part           : ",       &
       sizeof(surf_body_part) 
-   write(nout,*) " Size in bytes of array nPartIntorno_bp_bp       : ",        &
+   write (nout,*) " Size in bytes of array nPartIntorno_bp_bp       : ",       &
       sizeof(nPartIntorno_bp_bp)
-   write(nout,*) " Size in bytes of array PartIntorno_bp_bp        : ",        &
+   write (nout,*) " Size in bytes of array PartIntorno_bp_bp        : ",       &
       sizeof(PartIntorno_bp_bp)
-   write(nout,*) " Size in bytes of array rag_bp_bp                : ",        &
+   write (nout,*) " Size in bytes of array rag_bp_bp                : ",       &
       sizeof(rag_bp_bp)
 endif
-write(nout,'(1x,a)') "..."
-write(nout,'(1x,a)') " "
-write(nout,'(1x,a)') "   end allocation step. "
-write(nout,'(1x,a)') " "
+write (nout,'(1x,a)') "..."
+write (nout,'(1x,a)') " "
+write (nout,'(1x,a)') "   end allocation step. "
+write (nout,'(1x,a)') " "
 ! Writing the cell number and particles within the cell 
 if (Domain%ioutopt<0) then
-   write(nout,*) 
-   write(nout,*) "Number of cells           NCELLS= ",grid%nmax
-   write(nout,*) 
-   write(nout,*) "======== CELLS AND RELATED PARTICLES =========="
+   write (nout,*) 
+   write (nout,*) "Number of cells           NCELLS= ",grid%nmax
+   write (nout,*) 
+   write (nout,*) "======== CELLS AND RELATED PARTICLES =========="
    do i=1,grid%nmax   
       if (Icont(i+1)>Icont(i)) then  
-         write(nout,"(3(a,i5),a)") " cell", i," from",Icont(i)," to",          &
+         write (nout,"(3(a,i5),a)") " cell", i," from",Icont(i)," to",         &
             Icont(i+1),"  particles:"
-         write(nout,"(5i8)") NPartOrd(Icont(i):Icont(i+1)-1) 
+         write (nout,"(5i8)") NPartOrd(Icont(i):Icont(i+1)-1) 
       endif
    enddo
 endif
-write(nout,*) 
-write(nout,*) 
+write (nout,*) 
+write (nout,*) 
 call s_ctime(nout)
-write(nout,*) 
-write(nout,*) "Transient loop begins..."
-write(nout,*)
+write (nout,*) 
+write (nscr,*) "Transient loop begins..."
+write (nout,*) "Transient loop begins..."
+write (nout,*)
 ! To initialize the post-processing file 
 if ((Domain%imemo_fr>0).OR.(Domain%memo_fr>zero)) then
-   open(nres,file=nomefile(2),status="unknown",access="sequential"             &
+   open (nres,file=nomefile(2),status="unknown",access="sequential"            &
       ,form="unformatted")
    else
       nres = -nres
@@ -416,14 +404,14 @@ endif
 if ((Domain%ipllb_fr>0).OR.(Domain%pllb_fr>zero)) then
    open (nplb,file=nomefile(4),status="unknown",access="sequential",           &
       form="formatted")
-   write(nplb,"(a)") "tempo         free_surface_quota"
+   write (nplb,"(a)") "tempo         free_surface_quota"
    else
       nplb = - nplb
 endif
 if ((Domain%imemo_fr>0).OR.(Domain%memo_fr>zero)) then
    open (nfro,file=nomefile(5),status="unknown",access="sequential"            &
       ,form="formatted")
-   write(nfro,"(a)") "tempo         x fronte      (y fronte)    z fronte"
+   write (nfro,"(a)") "tempo         x fronte      (y fronte)    z fronte"
    else
       nfro = - nfro
 endif
@@ -443,7 +431,7 @@ if (vtkconv) then
       k1 = i
       k2 = k1 + 3
       if (k2>numvertici) k2 = numvertici
-      write(stringa,'(4(3(e12.5,1x)))') (vertice(1,k),vertice(2,k),            &
+      write (stringa,'(4(3(e12.5,1x)))') (vertice(1,k),vertice(2,k),           &
          vertice(3,k),k=k1,k2)
       stringa = adjustl(trim(stringa))
       write(unitvtk,'(8x,a)') stringa(1:len_trim(stringa))
@@ -459,14 +447,14 @@ if (vtkconv) then
          nvalori = nvalori + 2
       enddo
       write(unitvtk,'(a,2i8)') 'LINES ', nlinee, nvalori
-      allocate(verticecolore(numvertici))
+      allocate (verticecolore(numvertici))
       verticecolore = zero
       do i=1,numbsides
          if (boundaryside(i)%TIPO=='peri') cycle
          stringa = ' '
          k1 = boundaryside(i)%VERTEX(1) - 1
          k2 = boundaryside(i)%VERTEX(2) - 1
-         write(stringa,'(a,2i10)') '2',k1,k2
+         write (stringa,'(a,2i10)') '2',k1,k2
          stringa = adjustl(trim(stringa))
          write(unitvtk,'(8x,a)') stringa(1:len_trim(stringa))
          if ((boundaryside(i)%TIPO=='velo').or.(boundaryside(i)%TIPO=='flow')  &
@@ -485,11 +473,11 @@ if (vtkconv) then
          k1 = i
          k2 = k1 + 7
          if (k2>numvertici) k2 = numvertici
-         write(stringa,'(8(f10.3,1x))') (verticecolore(k),k=k1,k2)
+         write (stringa,'(8(f10.3,1x))') (verticecolore(k),k=k1,k2)
          stringa = adjustl(trim(stringa))
          write(unitvtk,'(8x,a)') stringa(1:len_trim(stringa))
       enddo
-      deallocate(verticecolore)
+      deallocate (verticecolore)
       write(unitvtk,'(a)') 'LOOKUP_TABLE mytable 3'
       write(unitvtk,'(a)') '0.0 0.0 0.0 1.0'
       write(unitvtk,'(a)') '0.0 0.0 1.0 1.0'
@@ -504,7 +492,7 @@ if (vtkconv) then
             nvalori = nvalori + 1 + BoundaryFace(i)%nodes + 1
          enddo
          write(unitvtk,'(a,2i8)') 'LINES ',nlinee,nvalori
-         allocate(verticecolore(numvertici))
+         allocate (verticecolore(numvertici))
          verticecolore = 0.0
          do i=1,numfacce
             if (tratto(BoundaryFace(i)%stretch)%tipo=='peri') cycle
@@ -513,7 +501,7 @@ if (vtkconv) then
                k1 = k 
                k2 = k1 + 7
                if (k2>BoundaryFace(i)%nodes) k2 = BoundaryFace(i)%nodes
-               write(stringa,'(10i10)') BoundaryFace(i)%nodes+1,               &
+               write (stringa,'(10i10)') BoundaryFace(i)%nodes+1,              &
                  (BoundaryFace(i)%node(kk)%name-1,kk=k1,k2),                   &
                  BoundaryFace(i)%node(1)%name-1
                stringa = adjustl(trim(stringa))
@@ -541,11 +529,11 @@ if (vtkconv) then
             k1 = i
             k2 = k1 + 7
             if (k2>numvertici) k2 = numvertici
-            write(stringa,'(8(f10.3,1x))') (verticecolore(k),k=k1,k2)
+            write (stringa,'(8(f10.3,1x))') (verticecolore(k),k=k1,k2)
             stringa = adjustl(trim(stringa))
             write(unitvtk,'(8x,a)') stringa(1:len_trim(stringa))
          enddo
-         deallocate(verticecolore)
+         deallocate (verticecolore)
          write(unitvtk,'(a)') 'LOOKUP_TABLE mytable 3'
          write(unitvtk,'(a)') '0.0 0.0 0.0 1.0'
          write(unitvtk,'(a)') '0.0 0.0 1.0 1.0'
@@ -565,11 +553,11 @@ if ((Domain%tipo=="semi").or.(Domain%tipo=="bsph")) then
          NumCellmax = Grid%nmax
          allocate(GCBFPointers(NumCellmax,2),stat=ier)
          if (ier/=0) then
-            write(nout,'(1x,a,i2)')                                            &
+            write (nout,'(1x,a,i2)')                                           &
                "   Array GCBFPointers not allocated. Error code: ",ier
             call diagnostic (arg1=4,arg3=nomsub)
             else
-               write(nout,'(1x,a)')                                            &
+               write (nout,'(1x,a)')                                           &
                   "   Array GCBFPointers successfully allocated"
          endif
          if (Domain%tipo=="semi") then
@@ -585,33 +573,9 @@ if ((Domain%tipo=="semi").or.(Domain%tipo=="bsph")) then
 ! Loop over the zones
          do i=1,NPartZone
          if (Partz(i)%IC_source_type==2) then
-            if (.not.allocated(Z_fluid_max)) then
-               allocate(Z_fluid_max(Grid%ncd(1)*Grid%ncd(2)),STAT=alloc_stat) 
-               if (alloc_stat/=0) then
-                  write(nout,*)                                                &
-                  'Allocation of Z_fluid_max in Gest_Trans failed;',           &
-                  ' the program terminates here.'
-                  stop ! Stop the main program
-                  else
-                     write(nout,*)                                            &
-                        'Allocation of Z_fluid_max in Gest_Trans successfully',&
-                        ' completed.'
-               endif   
-            endif
+            allocate(Z_fluid_max(Grid%ncd(1)*Grid%ncd(2)))
             Z_fluid_max = -999.d0
-            if (.not.allocated(q_max)) then
-               allocate(q_max(Grid%ncd(1)*Grid%ncd(2)),STAT=alloc_stat) 
-               if (alloc_stat/=0) then
-                  write(nout,*)                                                &
-                  'Allocation of q_max in Gest_Trans failed;',                 &
-                  ' the program terminates here.'
-                  stop ! Stop the main program
-                  else
-                     write(nout,*)                                             &
-                        'Allocation of q_max in Gest_Trans successfully ',     &
-                        'completed.'
-               endif   
-            endif
+            allocate(q_max(Grid%ncd(1)*Grid%ncd(2)))
             q_max = 0.d0
             exit
          endif
diff --git a/src/Main_algorithm/Loop_Irre_2D.f90 b/src/Main_algorithm/Loop_Irre_2D.f90
index f754985..483fd45 100755
--- a/src/Main_algorithm/Loop_Irre_2D.f90
+++ b/src/Main_algorithm/Loop_Irre_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -39,7 +38,6 @@ use I_O_diagnostic_module
 ! Declarations
 !------------------------
 implicit none
-logical :: done_flag
 integer(4) :: Ncbs,IntNcbs,i,ii,num_out,npi,it,it_print,it_memo,it_rest,ir
 integer(4) :: OpCountot,SpCountot,EpCountot,EpOrdGridtot,ncel,aux,igridi
 integer(4) :: jgridi,kgridi,machine_Julian_day,machine_hour,machine_minute
@@ -60,7 +58,6 @@ integer(4),external :: ParticleCellNumber,CellIndices,CellNumber
 !------------------------
 ! Initializations
 !------------------------
-done_flag = .false.
 if (esplosione) then
    do npi=1,nag
       if (index(Med(pg(npi)%imed)%tipo,"gas")>0) then
@@ -115,10 +112,9 @@ call start_and_stop(3,10)
 ! Removing fictitious reservoirs used for DB-SPH initialization
 call start_and_stop(2,9)
 if ((it_corrente==it_start).and.(Domain%tipo=="bsph")) then
-!$omp parallel do default(none) shared(nag,pg,OpCount,Partz) private(npi) 
+!$omp parallel do default(none) shared(nag,pg,OpCount) private(npi) 
    do npi=1,nag
-      if (Partz(pg(npi)%izona)%DBSPH_fictitious_reservoir_flag.eqv.(.true.))   &
-         then
+      if (pg(npi)%imed/=pg(1)%imed) then
          OpCount(pg(npi)%imed) = OpCount(pg(npi)%imed) + 1    
          pg(npi)%cella = -1
       endif
@@ -173,7 +169,7 @@ endif
 if (nres>0) then
    it_memo = it_eff
    it_rest = it_eff
-   call Memo_Results(it_eff,it_memo,it_rest,dtvel,'inizio')
+   call memo_results ( it_eff, it_memo, it_rest, dtvel, 'inizio' )
 endif
 if (vtkconv) then
    call result_converter ('inizio')
@@ -195,7 +191,6 @@ if (exetype=="linux") then
 endif
 it = it_start
 ITERATION_LOOP: do while (it<Domain%itmax)
-done_flag = .false.
 ! Set the iteration counter
    it = it + 1
    it_corrente = it
@@ -208,597 +203,601 @@ done_flag = .false.
    tempo = tempo + dt
    if (nscr>0) write (nscr,"(a,i8,a,g13.6,a,g12.4,a,i8,a,i5)") " it= ",it,     &
       "   time= ",tempo,"  dt= ",dt,"    npart= ",nag,"   out= ",num_out
-   do while ((done_flag.eqv.(.false.)).or.((Domain%RKscheme>1).and.            &
-      (Domain%time_stage>1)))
-      if (Domain%time_split==0) then
+1100 continue
+   if (Domain%time_split==0) then
 ! Explicit RK schemes 
 ! SPH parameters 
-      call start_and_stop(2,10)
-      if ((Domain%tipo=="semi").and.(Domain%time_stage<2)) call CalcVarLength
-      call start_and_stop(3,10)
+   call start_and_stop(2,10)
+   if ((Domain%tipo=="semi").and.(Domain%time_stage<2)) call CalcVarLength
+   call start_and_stop(3,10)
 ! To evaluate the close boundaries and integrals
 ! for the current particle in every loop and storing them in the general 
 ! storage array.
 ! Computation and storage of the boundary integrals
-      if (Domain%tipo=="semi") then
-         call start_and_stop(2,11)
-         call ComputeBoundaryDataTab
-            call start_and_stop(3,11)
-         endif
+   if (Domain%tipo=="semi") then
+      call start_and_stop(2,11)
+      call ComputeBoundaryDataTab
+         call start_and_stop(3,11)
       endif
-      if (Domain%tipo=="semi") then
+   endif
+   if (Domain%tipo=="semi") then
 ! Stop particles belonging to a rigid block and moving with a fixed 
 ! velocity.
 ! One may loop over particles instead of over zones
-         do ir = 1,NPartZone 
-            if ( Partz(ir)%move/="fix") cycle      
+      do ir = 1,NPartZone 
+         if ( Partz(ir)%move/="fix") cycle      
 ! It assigns the movement with an imposed kinematics ("npointv" velocity data)
-            if (Partz(ir)%npointv>1) then
-               call vellaw(Partz(ir)%vlaw,Partz(ir)%vel,Partz(ir)%npointv)
-               write(nout,"(f12.4,a,i2,a,3f14.9)") tempo,"  zona",ir,"  vel.", &
-                  Partz(ir)%vel
+         if (Partz(ir)%npointv>1) then
+            call vellaw(Partz(ir)%vlaw,Partz(ir)%vel,Partz(ir)%npointv)
+            write(nout,"(f12.4,a,i2,a,3f14.9)") tempo,"  zona",ir,"  vel.",    &
+               Partz(ir)%vel
+! As an alternative, one may loop over particles 
+            do npi = Partz(ir)%limit(1),Partz(ir)%limit(2) 
+               if (pg(npi)%cella==0) cycle
+               pg(npi)%var(:) = Partz(ir)%vel(:)
+               if (tempo>=pg(npi)%tstop) then
+                  pg(npi)%vstart(:) = zero
+                  pg(npi)%vel(:) = zero
+                  else
+                     pg(npi)%vstart(:) = Partz(ir)%vel(:)
+                        pg(npi)%vel(:) = Partz(ir)%vel(:)
+               endif
+            enddo
+! Fixed value of velocity (npointv = 1)
+            elseif (Partz(ir)%npointv==1) then
 ! As an alternative, one may loop over particles 
-               do npi = Partz(ir)%limit(1),Partz(ir)%limit(2) 
+               do npi=Partz(ir)%limit(1),Partz(ir)%limit(2) 
                   if (pg(npi)%cella==0) cycle
                   pg(npi)%var(:) = Partz(ir)%vel(:)
                   if (tempo>=pg(npi)%tstop) then
                      pg(npi)%vstart(:) = zero
                      pg(npi)%vel(:) = zero
                      else
-                        pg(npi)%vstart(:) = Partz(ir)%vel(:)
-                           pg(npi)%vel(:) = Partz(ir)%vel(:)
+                        pg(npi)%vel(:) = Partz(ir)%vel(:)
                   endif
                enddo
-! Fixed value of velocity (npointv = 1)
-               elseif (Partz(ir)%npointv==1) then
-! As an alternative, one may loop over particles 
-                  do npi=Partz(ir)%limit(1),Partz(ir)%limit(2) 
-                     if (pg(npi)%cella==0) cycle
-                     pg(npi)%var(:) = Partz(ir)%vel(:)
-                     if (tempo>=pg(npi)%tstop) then
-                        pg(npi)%vstart(:) = zero
-                        pg(npi)%vel(:) = zero
-                        else
-                           pg(npi)%vel(:) = Partz(ir)%vel(:)
-                     endif
-                  enddo
-            endif
-         enddo
-      endif
-      if ((Domain%time_split==0).and.(Domain%time_stage==1)) then 
+         endif
+      enddo
+   endif
+   if ((Domain%time_split==0).and.(Domain%time_stage==1)) then 
 ! Erosion criterium + continuity equation RHS  
-         call start_and_stop(2,12)
-         if ((erosione).and.(.not.esplosione)) then  
+      call start_and_stop(2,12)
+      if ((erosione).and.(.not.esplosione)) then  
 ! Detection of the mixture particle status ("flu" or "sol") 
-            if (Granular_flows_options%ID_erosion_criterion>1) then
-               if (index(modelloerosione,"shields")>0) then
+         if (Granular_flows_options%ID_erosion_criterion>1) then
+            if (index(modelloerosione,"shields")>0) then
 ! Shields criterion
 !$omp parallel do default(none) shared(pg,nag) private(npi) 
-                  do npi=1,nag
-                     call Shields(npi) 
-                  enddo
+               do npi=1,nag
+                  call Shields(npi) 
+               enddo
 !$omp end parallel do
-                  elseif (index(modelloerosione,"mohr")>0) then
+               elseif (index(modelloerosione,"mohr")>0) then
 ! To compute the second invariant of the rate-strain tensor and density 
 ! derivatives
-                     call inter_EqCont_2D 
+                  call inter_EqCont_2D 
 ! Mohr-Coulomb criterion
-                     call MohrC
-               endif
+                  call MohrC
             endif
+         endif
 ! To update the auxiliary vector, which counts the particles with a status 
 ! different from "sol" 
+         indarrayFlu = 0
+         do npi=1,nag
+            if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
+            if (pg(npi)%state=="flu") then
+               indarrayFlu = indarrayFlu + 1
+! Checking not to overpass array sizes 
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
+               endif
+               Array_Flu(indarrayFlu) = npi
+            endif
+         enddo
+         else
+! No erosion criterion  
             indarrayFlu = 0
             do npi=1,nag
                if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
-               if (pg(npi)%state=="flu") then
-                  indarrayFlu = indarrayFlu + 1
-! Checking not to overpass array sizes 
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
+               indarrayFlu = indarrayFlu + 1
+! Checking not to overpass array sizes. Possible resizing.
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
                endif
+               Array_Flu(indarrayFlu) = npi
             enddo
-            else
-! No erosion criterion  
-               indarrayFlu = 0
-               do npi=1,nag
-                  if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
-                  indarrayFlu = indarrayFlu + 1
-! Checking not to overpass array sizes. Possible resizing.
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
-               enddo
-         endif
-      endif 
+      endif
+   endif 
 ! Momentum equation 
-      call start_and_stop(2,6)
+   call start_and_stop(2,6)
 ! Loop over particles
 !$omp parallel do default(none)                                                &
 !$omp private(npi,ii,tpres,tdiss,tvisc,Ncbs,IntNcbs,BoundReaction)             &
 !$omp shared(nag,Pg,Domain,BoundaryDataPointer,indarrayFlu,Array_Flu,it)
-      do ii=1,indarrayFlu
-         npi = Array_Flu(ii)
-         call inter_EqMoto(npi,tpres,tdiss,tvisc)
+   do ii=1,indarrayFlu
+      npi = Array_Flu(ii)
+      call inter_EqMoto (npi,tpres,tdiss,tvisc)
 ! Searching for the boundary sides, which are the nearest the npi-th current 
 ! particle
-         if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
-            pg(npi)%kodvel = 0
-            pg(npi)%velass = zero
-         endif
+      if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
+         pg(npi)%kodvel = 0
+         pg(npi)%velass = zero
+      endif
 ! Some near boundaries have been detected
 ! Selection of the boundary sides that effectively contribute to the 
 ! momentum equation (SA-SPH)
-         if (Domain%tipo=="semi") then
-            Ncbs = BoundaryDataPointer(1,npi)
-            IntNcbs = BoundaryDataPointer(2,npi)
-         endif
-         if (Domain%tipo=="semi") then
-            if ((Ncbs>0).and.(IntNcbs>0)) then
+      if (Domain%tipo=="semi") then
+         Ncbs = BoundaryDataPointer(1,npi)
+         IntNcbs = BoundaryDataPointer(2,npi)
+      endif
+      if ((Ncbs>0).and.(IntNcbs>0).and.(Domain%tipo=="semi")) then
 ! SA-SPH boundary terms for the balance equations (using 
 ! the geometrical integrals already computed)           
-               call AddBoundaryContributions_to_ME2D(npi,IntNcbs,tpres,tdiss,  &
-                  tvisc)                   
-               if (pg(npi)%kodvel==0) then
-                  BoundReaction = zero
+         call AddBoundaryContributions_to_ME2D(npi,IntNcbs,tpres,tdiss,tvisc)                   
+         if (pg(npi)%kodvel==0) then
+            BoundReaction = zero
 ! Additional repulsive force (it shouldn't be neither called, nor available)
-                  call AddElasticBoundaryReaction_2D(npi,IntNcbs,BoundReaction)
+            call AddElasticBoundaryReaction_2D (npi, IntNcbs, BoundReaction)
 ! Save acceleration and the assigned boundary velocities components 
 ! in the particle array
-                  pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) +            &
-                                   Domain%grav(:) + BoundReaction(:)
-                  else
-                     pg(npi)%acc(:) = zero
-               endif
-               else
-                  if (Domain%tipo=="semi") then
-                     pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) +         &
-                                      Domain%grav(:)
-                     else
-                        pg(npi)%acc(:) = (tpres(:) + tdiss(:) + tvisc(:)) /    &
-                                         pg(npi)%Gamma + Domain%grav(:)
-                  endif
-            endif      
+            pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) + Domain%grav(:)   &
+                             + BoundReaction(:)
+            else
+               pg(npi)%acc(:) = zero
          endif
-      enddo
-!$omp end parallel do
-      if (n_bodies>0) then
-         call start_and_stop(3,6)
-         call start_and_stop(2,19)
-         call RHS_body_dynamics
-         call start_and_stop(3,19)
-         call start_and_stop(2,6)
+         else
+            if (Domain%tipo=="semi") then
+               pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) +               &
+                                Domain%grav(:)
+               else
+                  pg(npi)%acc(:) = (tpres(:) + tdiss(:) + tvisc(:)) /          &
+                                   pg(npi)%Gamma + Domain%grav(:)
+            endif
       endif
+   enddo
+!$omp end parallel do
+   if (n_bodies>0) then
+      call start_and_stop(3,6)
+      call start_and_stop(2,19)
+      call RHS_body_dynamics
+      call start_and_stop(3,19)
+      call start_and_stop(2,6)
+   endif
 ! Time integration scheme for momentum and energy equations
-      if (Domain%time_split==0) then 
+   if (Domain%time_split==0) then 
 ! Explicit RK schemes
-         call start_and_stop(3,6)
+      call start_and_stop(3,6)
 ! Velocity smoothing, trajectory equation, BC, neighboring parameters (start)
-         elseif (Domain%time_split==1) then  
+      elseif (Domain%time_split==1) then  
 ! dt computation 
-            dtvel = half * (dt + DtPreviousStep)         
+         dtvel = half * (dt + DtPreviousStep)         
 !$omp parallel do default(none) private(npi,ii)                                &
 !$omp shared(nag,Pg,dtvel,indarrayFlu,Array_Flu,it)
 ! Loop over particles
-            do ii=1,indarrayFlu
-               npi = Array_Flu(ii)
+         do ii=1,indarrayFlu
+            npi = Array_Flu(ii)
 ! kodvel = 0: the particle is internal to the domain. 
-               if (pg(npi)%kodvel==0) then 
-                  pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)
+            if (pg(npi)%kodvel==0) then 
+               pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)
 ! kodvel = 1: the particle has a critical flux condition. The vertical 
 ! velocity component is assigned.
-                  elseif (pg(npi)%kodvel==1) then            
-                     pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)      
-                     pg(npi)%vel(3) = pg(npi)%velass(3)           
+               elseif (pg(npi)%kodvel==1) then            
+                  pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)      
+                  pg(npi)%vel(3) = pg(npi)%velass(3)           
 ! kodvel = 2: the particle has an assigned normal velocity or source 
 ! condition. All the velocity components are assigned.
-                     elseif (pg(npi)%kodvel==2) then  
-                        pg(npi)%vel(:) = pg(npi)%velass(:)            
-               endif
-            enddo
+                  elseif (pg(npi)%kodvel==2) then  
+                     pg(npi)%vel(:) = pg(npi)%velass(:)            
+            endif
+         enddo
 !$omp end parallel do
-            call start_and_stop(3,6)
+         call start_and_stop(3,6)
 ! Energy equation: start
-            if (esplosione) then
-               do ii=1,indarrayFlu
-                  npi = Array_Flu(ii)
-                  pg(npi)%IntEn = pg(npi)%IntEn + dtvel * pg(npi)%dEdT
-               enddo
-            endif
+         if (esplosione) then
+            do ii=1,indarrayFlu
+               npi = Array_Flu(ii)
+               pg(npi)%IntEn = pg(npi)%IntEn + dtvel * pg(npi)%dEdT
+            enddo
+         endif
 ! Energy equation: end
 ! Time integration for body dynamics
-            if (n_bodies>0) then
-
-               call start_and_stop(2,19)
-               call time_integration_body_dynamics(dtvel)
-               call start_and_stop(3,19)
-            endif
+         if (n_bodies>0) then
+            call start_and_stop(2,19)
+            call time_integration_body_dynamics(dtvel)
+            call start_and_stop(3,19)
+         endif
 ! Partial smoothing for velocity: start 
-            call start_and_stop(2,7)
-            call inter_SmoothVelo_2D
+         call start_and_stop(2,7)
+         call inter_SmoothVelo_2D
 !$omp parallel do default(none) private(npi,ii,TetaV1)                         &
 !$omp shared(nag,Pg,Med,Domain,dt,indarrayFlu,Array_Flu,esplosione,it)
 ! Loop over all the active particles
-            do ii=1,indarrayFlu
-               npi = Array_Flu(ii)
-               if (esplosione) then
-                  TetaV1 = Domain%TetaV * pg(npi)%Csound * dt / Domain%h
-                  else
+         do ii=1,indarrayFlu
+            npi = Array_Flu(ii)
+            if (esplosione) then
+               TetaV1 = Domain%TetaV * pg(npi)%Csound * dt / Domain%h
+               else
 ! TetaV depending on the time step
-                     TetaV1 = Domain%TetaV * Med(pg(npi)%imed)%Celerita * dt   &
-                              / Domain%h
-               endif
-               if (esplosione) pg(npi)%IntEn = pg(npi)%IntEn + TetaV1 *        &
-                  pg(npi)%Envar
-               if (pg(npi)%kodvel==0) then        
+                  TetaV1 = Domain%TetaV * Med(pg(npi)%imed)%Celerita * dt      &
+                           / Domain%h
+            endif
+            if (esplosione) pg(npi)%IntEn = pg(npi)%IntEn + TetaV1 *           &
+               pg(npi)%Envar
+            if (pg(npi)%kodvel==0) then        
 ! The particle is inside the domain and far from boundaries
-                  pg(npi)%var(:) = pg(npi)%vel(:) + TetaV1 * pg(npi)%var(:)      
-                  pg(npi)%vel(:) = pg(npi)%var(:)                                        
-                  else  
+               pg(npi)%var(:) = pg(npi)%vel(:) + TetaV1 * pg(npi)%var(:)      
+               pg(npi)%vel(:) = pg(npi)%var(:)                                        
+               else  
 ! The particle is close to a "source", "level" or "normal velocity boundary
 ! (kodvel = 1 or = 2): the final velocity is kept unmodified
-                     pg(npi)%var(:) = pg(npi)%vel(:) 
-               endif
-            enddo
+                  pg(npi)%var(:) = pg(npi)%vel(:) 
+            endif
+         enddo
 !$omp end parallel do
-            call start_and_stop(3,7)
+         call start_and_stop(3,7)
 ! Partial smoothing for velocity: end
 ! Diffusion coefficient: start (input option not recommended)
-            if (diffusione) then
-               call start_and_stop(2,15)
+         if (diffusione) then
+            call start_and_stop(2,15)
 !$omp parallel do default(none) private(npi,ii,appo1,appo2,appo3)              &
 !$omp shared(nag,Pg,Med,indarrayFlu,Array_Flu)
-               do ii=1,indarrayFlu
-                  npi = Array_Flu(ii)
-                  if ((pg(npi)%VolFra==VFmx).and.                              &
-                     (pg(npi)%visc==Med(pg(npi)%imed)%mumx/pg(npi)%dens)) then
-                     pg(npi)%coefdif = zero
-                     else
-                        call inter_CoefDif (npi)
-                        if (pg(npi)%uni>zero) pg(npi)%veldif = pg(npi)%veldif  &
-                                                               / pg(npi)%uni 
-                        appo1 = (pg(npi)%veldif(1) - pg(npi)%var(1)) *         &
-                                (pg(npi)%veldif(1) - pg(npi)%var(1))
-                        appo2 = (pg(npi)%veldif(2) - pg(npi)%var(2)) *         &
-                                (pg(npi)%veldif(2) - pg(npi)%var(2))
-                        appo3 = (pg(npi)%veldif(3) - pg(npi)%var(3)) *         &
-                                (pg(npi)%veldif(3) - pg(npi)%var(3))
-                        pg(npi)%coefdif = pg(npi)%coefdif * Dsqrt(appo1 +      &
-                                          appo2 + appo3)
-                  endif
-               enddo
+            do ii=1,indarrayFlu
+               npi = Array_Flu(ii)
+               if ((pg(npi)%VolFra==VFmx).and.                                 &
+                  (pg(npi)%visc==Med(pg(npi)%imed)%mumx/pg(npi)%dens)) then
+                  pg(npi)%coefdif = zero
+                  else
+                     call inter_CoefDif (npi)
+                     if (pg(npi)%uni>zero) pg(npi)%veldif = pg(npi)%veldif     &
+                                                            / pg(npi)%uni 
+                     appo1 = (pg(npi)%veldif(1) - pg(npi)%var(1)) *            &
+                             (pg(npi)%veldif(1) - pg(npi)%var(1))
+                     appo2 = (pg(npi)%veldif(2) - pg(npi)%var(2)) *            &
+                             (pg(npi)%veldif(2) - pg(npi)%var(2))
+                     appo3 = (pg(npi)%veldif(3) - pg(npi)%var(3)) *            &
+                             (pg(npi)%veldif(3) - pg(npi)%var(3))
+                     pg(npi)%coefdif = pg(npi)%coefdif * Dsqrt(appo1 +         &
+                                       appo2 + appo3)
+               endif
+            enddo
 !$omp end parallel do
-               call start_and_stop(3,15)
-            endif
+            call start_and_stop(3,15)
+         endif
 ! Diffusion coefficient: end
 ! Update the particle positions
-            call start_and_stop(2,8)
+         call start_and_stop(2,8)
 !$omp parallel do default(none) private(npi) shared(nag,Pg,dt,med)
 ! Loop over the active particles
-            do npi=1,nag
-               if (pg(npi)%cella==0) cycle
+         do npi=1,nag
+            if (pg(npi)%cella==0) cycle
 ! To save the old coordinates
-               pg(npi)%CoordOld(:) = pg(npi)%coord(:)
-               if (pg(npi)%vel_type/="std") then
+            pg(npi)%CoordOld(:) = pg(npi)%coord(:)
+            if (pg(npi)%vel_type/="std") then
 ! If the motion type is not "std", velocities are assigned     
-                  pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%vstart(:)
-                  else
+               pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%vstart(:)
+               else
 ! Otherwise, the partial smoothed velocity field is integrated in time
-                     pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%var(:) 
-               endif
-            enddo
+                  pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%var(:) 
+            endif
+         enddo
 !$omp end parallel do
 ! Wall element trajectories
-            if (Domain%tipo=="bsph") then
+         if (Domain%tipo=="bsph") then
 !$omp parallel do default(none) private(npi) shared(DBSPH,pg_w,dt)
-               do npi=1,DBSPH%n_w
-                  if (pg_w(npi)%cella==0) cycle
-                  pg_w(npi)%coord(:) = pg_w(npi)%coord(:) + dt *               &
-                                       pg_w(npi)%vel(:)
-               enddo
+            do npi=1,DBSPH%n_w
+               if (pg_w(npi)%cella==0) cycle
+               pg_w(npi)%coord(:) = pg_w(npi)%coord(:) + dt *                  &
+                                    pg_w(npi)%vel(:)
+            enddo
 !$omp end parallel do
-            endif
-            call start_and_stop(3,8)
+         endif
+         call start_and_stop(3,8)
 ! Check on the particles gone out of the domain throughout the opened sides
-            call start_and_stop(2,9)
-            if (NumOpenSides>0) call CancelOutgoneParticles_2D
+         call start_and_stop(2,9)
+         if (NumOpenSides>0) call CancelOutgoneParticles_2D
 ! Adding new particles from the inlet sections
-            if (SourceSide/=0) call GenerateSourceParticles_2D 
+         if (SourceSide/=0) call GenerateSourceParticles_2D 
 ! Particle reordering 
-            call OrdGrid1(nout)
-            call start_and_stop(3,9)
+         call OrdGrid1(nout)
+         call start_and_stop(3,9)
 ! Set the parameters for the fixed particles 
-            if (Domain%NormFix) call NormFix
+         if (Domain%NormFix) call NormFix
 ! SPH parameters
-            call start_and_stop(2,10)
-            call CalcVarLength
-            call start_and_stop(3,10)
+         call start_and_stop(2,10)
+         call CalcVarLength
+         call start_and_stop(3,10)
+! Subroutine for wall BC treatment (DB-SPH)
+! Density and pressure updates for wall elements: MUSCL + LPRS  
+! + equation of state 
+         call start_and_stop(2,18)
+         if ((Domain%tipo=="bsph").and.(nag>0).and.(DBSPH%n_w>0)) then
+            call Gradients_to_MUSCL   
+            call BC_wall_elements
+         endif
+         call start_and_stop(3,18)
 ! Assessing the close boundaries and the integrals
 ! for the current particle in every loop and storing them in the general 
 ! storage array.
 ! Computation and storage of the boundary integrals
-            if (Domain%tipo=="semi") then 
-               call start_and_stop(2,11)
-               call ComputeBoundaryDataTab
-               call start_and_stop(3,11)
-            endif
-      endif
+         if (Domain%tipo=="semi") then 
+            call start_and_stop(2,11)
+            call ComputeBoundaryDataTab
+            call start_and_stop(3,11)
+         endif
+   endif
 ! Continuity equation 
 ! Erosion criterion + continuity equation RHS  
-      call start_and_stop(2,12)
-      if ((erosione).and.(.not.esplosione)) then 
-         if (Domain%time_split==1) then 
+   call start_and_stop(2,12)
+   if ((erosione).and.(.not.esplosione)) then 
+      if (Domain%time_split==1) then 
 ! Assessing particle status ("flu" or "sol") of the mixture particles
 ! Calling the proper subroutine for the erosion criterion 
-            select case (Granular_flows_options%ID_erosion_criterion)
-               case(1)
+         select case (Granular_flows_options%ID_erosion_criterion)
+            case(1)
 !$omp parallel do default(none) shared(pg,nag) private(npi,ncel)
-                  do npi=1,nag
-                     pg(npi)%vel_old(:) = pg(npi)%vel(:)
-                     pg(npi)%normal_int_old(:) = pg(npi)%normal_int(:)
-                     call initialization_fixed_granular_particle(npi)             
-                  enddo
+               do npi=1,nag
+                  pg(npi)%vel_old(:) = pg(npi)%vel(:)
+                  pg(npi)%normal_int_old(:) = pg(npi)%normal_int(:)
+                  call initialization_fixed_granular_particle(npi)             
+               enddo
 !$omp end parallel do 
 !$omp parallel do default(none) shared(pg,nag) private(npi) 
-                  do npi=1,nag
-                     call Shields(npi) 
-                  enddo
+               do npi=1,nag
+                  call Shields(npi) 
+               enddo
 !$omp end parallel do
 ! Initializing viscosity for fixed particles
 !$omp parallel do default(none) shared(pg,nag,Granular_flows_options,Med)      &
 !$omp private(npi,ncel,aux,igridi,jgridi,kgridi)
-                  do npi=1,nag
-                     ncel = ParticleCellNumber(pg(npi)%coord)
-                     aux = CellIndices(ncel,igridi,jgridi,kgridi)
-                     if (Granular_flows_options%ID_erosion_criterion==1) then
-                        if (pg(npi)%state=="sol") then
-                           pg(npi)%mu =                                        &
-                              Med(Granular_flows_options%ID_main_fluid)%visc * &
-                              Med(Granular_flows_options%ID_main_fluid)%den0
-                           pg(npi)%visc =                                      &
-                              Med(Granular_flows_options%ID_main_fluid)%visc
-                        endif
+               do npi=1,nag
+                  ncel = ParticleCellNumber(pg(npi)%coord)
+                  aux = CellIndices(ncel,igridi,jgridi,kgridi)
+                  if (Granular_flows_options%ID_erosion_criterion==1) then
+                     if (pg(npi)%state=="sol") then
+                        pg(npi)%mu =                                           &
+                           Med(Granular_flows_options%ID_main_fluid)%visc *    &
+                           Med(Granular_flows_options%ID_main_fluid)%den0
+                        pg(npi)%visc =                                         &
+                           Med(Granular_flows_options%ID_main_fluid)%visc
                      endif
-                  enddo
+                  endif
+               enddo
 !$omp end parallel do  
-               case(2)
+            case(2)
 !$omp parallel do default(none) shared(pg,nag) private(npi)
-                  do npi=1,nag
-                     call Shields(npi) 
-                  enddo
+               do npi=1,nag
+                  call Shields(npi) 
+               enddo
 !$omp end parallel do 
-               case(3)
+            case(3)
 ! To compute the second invariant of the rate-strain tensor and density 
 ! derivatives
-                  call inter_EqCont_2D 
-                  call MohrC
-               case default
-            end select
+               call inter_EqCont_2D 
+               call MohrC
+            case default
+         end select
 ! Update auxiliary vector for counting particles, whose status is not "sol"
-            indarrayFlu = 0
-            do npi=1,nag
-               if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
-               if (pg(npi)%state=="flu") then
-                  indarrayFlu = indarrayFlu + 1
+         indarrayFlu = 0
+         do npi=1,nag
+            if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
+            if (pg(npi)%state=="flu") then
+               indarrayFlu = indarrayFlu + 1
 ! Check the boundary sizes and possible resizing
-                  if (indarrayFlu > PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
+               if (indarrayFlu > PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
                endif
-            enddo
-         endif
+               Array_Flu(indarrayFlu) = npi
+            endif
+         enddo
+      endif
 ! To compute the second invariant of the strain-rate tensor and density 
 ! derivatives'
-         call inter_EqCont_2D
-         else 
+      call inter_EqCont_2D
+      else 
 ! No erosion criterion  
 ! To compute the second invariant of the strain-rate tensor and density 
 ! derivatives
-            call inter_EqCont_2D 
-            if (Domain%time_split==1) then 
-               indarrayFlu = 0
-               do npi=1,nag
-                  if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
-                  indarrayFlu = indarrayFlu + 1
+         call inter_EqCont_2D 
+         if (Domain%time_split==1) then 
+            indarrayFlu = 0
+            do npi=1,nag
+               if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
+               indarrayFlu = indarrayFlu + 1
 ! Check array sizes and possible resizing 
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
-               enddo
-         endif
-      endif 
-      if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
+               endif
+               Array_Flu(indarrayFlu) = npi
+            enddo
+      endif
+   endif 
+   if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
 !$omp parallel do default(none) private(npi) shared(nag,pg)
-         do npi=1,nag
-            pg(npi)%koddens = 0
-            pg(npi)%densass = pg(npi)%dens
-         enddo
+      do npi=1,nag
+         pg(npi)%koddens = 0
+         pg(npi)%densass = pg(npi)%dens
+      enddo
 !$omp end parallel do
-      endif
+   endif
 ! Loop over all the active particles
 ! Density update 
-      if (Domain%tipo=="semi") then
+   if (Domain%tipo=="semi") then
 !$omp parallel do default(none) private(npi,ii,BCrodivV,Ncbs,IntNcbs)          &
 !$omp shared(nag,pg,BoundaryDataPointer,indarrayFlu,Array_Flu,it)
 ! Boundary contributions to the continuity equation (SA-SPH)
-         do ii=1,indarrayFlu
-            npi = Array_Flu(ii)
+      do ii=1,indarrayFlu
+         npi = Array_Flu(ii)
 ! Seaching for the neighbouring sides of the particle "npi"
-            BCrodivV = zero
-            Ncbs = BoundaryDataPointer(1,npi)
-            IntNcbs = BoundaryDataPointer(2,npi)
+         BCrodivV = zero
+         Ncbs = BoundaryDataPointer(1,npi)
+         IntNcbs = BoundaryDataPointer(2,npi)
 ! Detecting the sides with actual contributions
-            if ((Ncbs>0).and.(IntNcbs>0)) then     
-               call AddBoundaryContribution_to_CE2D (npi, IntNcbs, BCrodivV)  
-            endif
-            if (pg(npi)%koddens==0) then
-               pg(npi)%dden = pg(npi)%dden - BCrodivV
-               elseif (pg(npi)%koddens==1) then
-                  pg(npi)%dden = zero  
+         if ((Ncbs>0).and.(IntNcbs>0)) then     
+            call AddBoundaryContribution_to_CE2D (npi, IntNcbs, BCrodivV)  
+         endif
+         if (pg(npi)%koddens==0) then
+            pg(npi)%dden = pg(npi)%dden - BCrodivV
+            elseif (pg(npi)%koddens==1) then
+               pg(npi)%dden = zero  
 ! Boundary type is velocity or source
-                  elseif (pg(npi)%koddens==2) then
-                     pg(npi)%dden = zero
-            endif
-         enddo
+               elseif (pg(npi)%koddens==2) then
+                  pg(npi)%dden = zero
+         endif
+      enddo
 !$omp end parallel do
-      endif  
+   endif  
 ! Loop over all the active particles
 ! Time integration of the continuity equation 
-      if (Domain%time_split==0) then
+   if (Domain%time_split==0) then
 ! Explicit RK schemes
-         call start_and_stop(3,12)
-         elseif (Domain%time_split==1) then 
+      call start_and_stop(3,12)
+      elseif (Domain%time_split==1) then 
 ! Leapfrog scheme
 !$omp parallel do default(none) private(npi,ii)                                &
 !$omp shared(nag,pg,dt,indarrayFlu,Array_Flu,it,Domain,Med)
-            do ii=1,indarrayFlu
-               npi = Array_Flu(ii)
-               if (Domain%tipo=="bsph") pg(npi)%dden = pg(npi)%dden /          & 
-                                                       pg(npi)%uni
+         do ii=1,indarrayFlu
+            npi = Array_Flu(ii)
+            if (Domain%tipo=="bsph") pg(npi)%dden = pg(npi)%dden / pg(npi)%uni
 ! Boundary type is "fixe" or "tapis" or "level"
-               if (pg(npi)%koddens==0) then
-                  if (Domain%tipo=="semi") pg(npi)%dens = pg(npi)%dens + dt *  &
-                                                          pg(npi)%dden
-                  pg(npi)%densass = zero
+            if (pg(npi)%koddens==0) then
+               if (Domain%tipo=="semi") pg(npi)%dens = pg(npi)%dens + dt *     &
+                                                       pg(npi)%dden
+               pg(npi)%densass = zero
 ! Boundary type is "velocity" or "source"
-                  elseif (pg(npi)%koddens==2) then
-                     pg(npi)%dens = pg(npi)%densass  
+               elseif (pg(npi)%koddens==2) then
+                  pg(npi)%dens = pg(npi)%densass  
 ! Density is kept constant 
-               endif
-               if (Domain%density_thresholds==1) then       
-                  if (pg(npi)%dens<(0.9d0*med(pg(npi)%imed)%den0))             &
-                     pg(npi)%dens = 0.9d0 * med(pg(npi)%imed)%den0
-                  if (pg(npi)%dens>(1.1d0*med(pg(npi)%imed)%den0))             &
-                     pg(npi)%dens = 1.1d0 * med(pg(npi)%imed)%den0
-               endif
-            enddo
+            endif
+            if (Domain%density_thresholds==1) then       
+               if (pg(npi)%dens<(0.9d0*med(pg(npi)%imed)%den0)) pg(npi)%dens = &
+                  0.9d0 * med(pg(npi)%imed)%den0
+               if (pg(npi)%dens>(1.1d0*med(pg(npi)%imed)%den0)) pg(npi)%dens = &
+                  1.1d0 * med(pg(npi)%imed)%den0
+            endif
+         enddo
 !$omp end parallel do
-            call start_and_stop(3,12)
+         call start_and_stop(3,12)
 ! Continuity equation: end
-            if (diffusione) then
-               call start_and_stop(2,16)
-               call aggdens
-               call start_and_stop(3,16)
-            endif
+         if (diffusione) then
+            call start_and_stop(2,16)
+            call aggdens
+            call start_and_stop(3,16)
+         endif
 ! Equation of state 
-            call start_and_stop(2,13)
-            call calcpre  
-            call start_and_stop(3,13)
-            if (n_bodies>0) then
-               call start_and_stop(2,19)
-               call body_pressure_mirror
-               call start_and_stop(3,19)
-            endif
-      endif 
-      if (Domain%time_split==0) call time_integration
+         call start_and_stop(2,13)
+         call calcpre  
+         call start_and_stop(3,13)
+         if (n_bodies>0) then
+            call start_and_stop(2,19)
+            call body_pressure_mirror
+            call start_and_stop(3,19)
+         endif
+   endif 
+   if (Domain%time_split==0) call time_integration
 ! Explicit RK schemes
 ! Partial smoothing for pressure and density update
-      call start_and_stop(2,14)
-      if (Domain%TetaP>zero) then
-         if (Domain%Psurf=='s') then
-            call inter_SmoothPres
-            else if (Domain%Psurf=='a') then
-               call PressureSmoothing_2D
-         endif
-      endif
-      call start_and_stop(3,14)
-      if (n_bodies>0) then
-         call start_and_stop(2,19)
-         call body_pressure_postpro
-         call start_and_stop(3,19)
+   call start_and_stop(2,14)
+   if (Domain%TetaP>zero) then
+      if (Domain%Psurf=='s') then
+         call inter_SmoothPres
+         else if (Domain%Psurf=='a') then
+            call PressureSmoothing_2D
       endif
-      if (diffusione) then
-         call start_and_stop(2,16)
+   endif
+   call start_and_stop(3,14)
+   if (n_bodies>0) then
+      call start_and_stop(2,19)
+      call body_pressure_postpro
+      call start_and_stop(3,19)
+   endif
+   if (diffusione) then
+      call start_and_stop(2,16)
 !$omp parallel do default(none) private(npi,ii)                                &
 !$omp shared(nag,Pg,Med,indarrayFlu,Array_Flu)
-         do ii=1,indarrayFlu
-            npi = Array_Flu(ii)
-            if (pg(npi)%koddens/=0) cycle
-            if (pg(npi)%imed==1) then
-               pg(npi)%dens = pg(npi)%pres / (Med(1)%celerita *                &
-                              Med(1)%celerita) + (Med(2)%den0 * VFmn +         &
-                              Med(1)%den0 * (one - VFmn))
-               elseif (pg(npi)%imed==2) then
-                  pg(npi)%dens = pg(npi)%pres / (Med(2)%celerita *             &
-                                 Med(2)%celerita) + (Med(2)%den0 * VFmx +      &
-                                 Med(1)%den0 * (one - VFmx))
-            endif
-            Pg(npi)%rhoc = pg(npi)%pres / (med(2)%celerita * med(2)%celerita) +&
-                           med(2)%den0
-            Pg(npi)%rhow = pg(npi)%pres / (med(1)%celerita * med(1)%celerita) +&
-                           med(1)%den0
-         enddo
+      do ii=1,indarrayFlu
+         npi = Array_Flu(ii)
+         if (pg(npi)%koddens/=0) cycle
+         if (pg(npi)%imed==1) then
+            pg(npi)%dens = pg(npi)%pres / (Med(1)%celerita * Med(1)%celerita)  & 
+                           + (Med(2)%den0 * VFmn + Med(1)%den0 * (one - VFmn))
+            elseif (pg(npi)%imed==2) then
+               pg(npi)%dens = pg(npi)%pres / (Med(2)%celerita *                &
+                              Med(2)%celerita) + (Med(2)%den0 * VFmx +         &
+                              Med(1)%den0 * (one - VFmx))
+         endif
+         Pg(npi)%rhoc = pg(npi)%pres / (med(2)%celerita * med(2)%celerita) +   &
+                        med(2)%den0
+         Pg(npi)%rhow = pg(npi)%pres / (med(1)%celerita * med(1)%celerita) +   &
+                        med(1)%den0
+      enddo
 !$omp end parallel do
-         call start_and_stop(3,16)
-      endif
-      call start_and_stop(2,20)
-      if (Granular_flows_options%ID_erosion_criterion==1) call mixture_viscosity 
-      call start_and_stop(3,20)
+      call start_and_stop(3,16)
+   endif
+   call start_and_stop(2,20)
+   if (Granular_flows_options%ID_erosion_criterion==1) call mixture_viscosity 
+   call start_and_stop(3,20)
 ! Apparent viscosity (input option not recommended) 
-      if ((diffusione).or.(esplosione)) then
-         if ((Domain%time_split==1).or.(Domain%time_stage==Domain%RKscheme))   &
-            then
-            call start_and_stop(2,15)
-            call viscapp
-            call start_and_stop(3,15)
-         endif
+   if ((diffusione).or.(esplosione)) then
+      if ((Domain%time_split==1).or.(Domain%time_stage==Domain%RKscheme)) then
+         call start_and_stop(2,15)
+         call viscapp
+         call start_and_stop(3,15)
       endif
-      if (Domain%tipo=="semi") then
+   endif
+   if (Domain%tipo=="semi") then
 ! Boundary Conditions: start
 ! BC: checks for the particles gone out of the domain throughout the opened 
 ! sides
-         if ((Domain%time_split==0).and.(Domain%time_stage==Domain%RKscheme))  &
-            then
-            call start_and_stop(2,9)
-            if (NumOpenSides>0) call CancelOutgoneParticles_2D
+      if ((Domain%time_split==0).and.(Domain%time_stage==Domain%RKscheme)) then
+         call start_and_stop(2,9)
+         if (NumOpenSides>0) call CancelOutgoneParticles_2D
 ! Adding new particles at the inlet sections
-            if (SourceSide/=0) call GenerateSourceParticles_2D 
+         if (SourceSide/=0) call GenerateSourceParticles_2D 
 ! Particle reordering on the background positioning grid
-            call OrdGrid1 (nout)
-            call start_and_stop(3,9)
+         call OrdGrid1 (nout)
+         call start_and_stop(3,9)
 ! Set the parameters for the fixed particles 
-            if (Domain%NormFix)  call NormFix
-            indarrayFlu = 0
-            do npi=1,nag
-               if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
-                  indarrayFlu = indarrayFlu + 1
+         if (Domain%NormFix)  call NormFix
+         indarrayFlu = 0
+         do npi=1,nag
+            if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
+               indarrayFlu = indarrayFlu + 1
 ! Array sizes check and possibile resizing
-               if (indarrayFlu>PARTICLEBUFFER) then
-                  call diagnostic(arg1=9,arg2=2,arg3=nomsub)
-               endif
-               Array_Flu(indarrayFlu) = npi
-            enddo 
-         endif
-! Boundary Conditions: end
+            if (indarrayFlu>PARTICLEBUFFER) then
+               call diagnostic(arg1=9,arg2=2,arg3=nomsub)
+            endif
+            Array_Flu(indarrayFlu) = npi
+         enddo 
       endif
+! Boundary Conditions: end
+   endif
 ! Subroutine for wall BC treatment (DB-SPH)
-! Density and pressure updates for wall elements: MUSCL + LPRS + state equation 
-      call start_and_stop(2,18)
-      if ((Domain%tipo=="bsph").and.(nag>0).and.(DBSPH%n_w>0)) then
-         call Gradients_to_MUSCL   
-         call BC_wall_elements
-      endif
-      call start_and_stop(3,18)
+! Density and pressure updates for wall elements: MUSCL + LPRS  
+! + state equation 
+   call start_and_stop(2,18)
+   if ((Domain%tipo=="bsph").and.(nag>0).and.(DBSPH%n_w>0)) then
+      call Gradients_to_MUSCL   
+      call BC_wall_elements
+   endif
+   call start_and_stop(3,18)
 ! Update of the time stage
-      if ((Domain%RKscheme>1).and.(Domain%time_split==0)) then
-         Domain%time_stage = MODULO(Domain%time_stage,Domain%RKscheme)
-         Domain%time_stage = Domain%time_stage + 1
+   if ((Domain%RKscheme>1).and.(Domain%time_split==0)) then
+      Domain%time_stage = MODULO(Domain%time_stage,Domain%RKscheme)
+      Domain%time_stage = Domain%time_stage + 1
+! End of the intermediate time stage loop
+      if (Domain%time_stage<2) then
+         continue
          else
-            done_flag = .true.
+            go to 1100
       endif
-   enddo
+   endif
 ! Post-processing
    if (Domain%time_split==0) dtvel = dt
    if (nout>0) then
       call print_results(it_eff,it_print,'loop__')
    endif
    if (nres>0) then
-      call Memo_Results(it_eff,it_memo,it_rest,dtvel,'loop__')
+      call memo_results(it_eff,it_memo,it_rest,dtvel,'loop__')
    endif
 ! Computing variables at the monitoring points
    call CalcVarp
@@ -884,14 +883,13 @@ done_flag = .false.
    if (kill_flag) exit ITERATION_LOOP
    if (tempo>=Domain%tmax) exit ITERATION_LOOP
 enddo  ITERATION_LOOP 
-! Post-processing: log file 
+! Post-processing (also for restart) 
 if ((it_eff/=it_print).AND.(nout>0)) then
    it_print = it_eff
    call print_results(it_eff,it_print,'fine__')
 endif
-! Post-processing: restart file
 if ((it_eff/=it_memo).AND.(nres>0)) then
-   call Memo_Results(it_eff,it_memo,it_rest,dtvel,'fine__')
+   call memo_results(it_eff,it_memo,it_rest,dtvel,'fine__')
 endif
 if (vtkconv) then
    call result_converter ('fine__')
@@ -954,7 +952,7 @@ endif
 !------------------------
 ! Deallocations
 !------------------------
-if ((Domain%tipo=="bsph").and.(DBSPH%n_w>0)) deallocate(pg_w)
+if ((Domain%tipo=="bsph").and.(DBSPH%n_w>0)) deallocate (pg_w)
 return
 end subroutine Loop_Irre_2D
 
diff --git a/src/Main_algorithm/Loop_Irre_3D.f90 b/src/Main_algorithm/Loop_Irre_3D.f90
index 58ad906..fc12094 100755
--- a/src/Main_algorithm/Loop_Irre_3D.f90
+++ b/src/Main_algorithm/Loop_Irre_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     à).
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -38,7 +37,6 @@ use I_O_diagnostic_module
 ! Declarations
 !------------------------
 implicit none
-logical :: done_flag
 integer(4) :: Ncbf,i,npi,it,it_print,it_memo,it_rest,ir,ii,num_out,Ncbf_Max
 integer(4) :: OpCountot,SpCountot,EpCountot,EpOrdGridtot,ncel,aux,igridi
 integer(4) :: jgridi,kgridi,machine_Julian_day,machine_hour,machine_minute
@@ -59,7 +57,6 @@ integer(4),external :: ParticleCellNumber,CellIndices,CellNumber
 !------------------------
 ! Initializations
 !------------------------
-done_flag = .false.
 if (esplosione) then
    do npi=1,nag
       if (index(Med(pg(npi)%imed)%tipo,"gas")>0) then
@@ -113,21 +110,12 @@ call start_and_stop(3,10)
 ! Removing fictitious reservoirs used for DB-SPH initialization
 call start_and_stop(2,9) 
 if ((it_corrente==it_start).and.(Domain%tipo=="bsph")) then
-!$omp parallel do default(none) shared(nag,pg,OpCount,Partz) private(npi) 
+!$omp parallel do default(none) shared(nag,pg,OpCount) private(npi) 
    do npi=1,nag
-! Fictitious air reservoirs
-      if (Partz(pg(npi)%izona)%DBSPH_fictitious_reservoir_flag.eqv.(.true.))  &
-         then
+      if (pg(npi)%imed/=pg(1)%imed) then
          OpCount(pg(npi)%imed) = OpCount(pg(npi)%imed) + 1    
          pg(npi)%cella = -1
       endif
-! Fictitious fluid reservoir top
-      if (Partz(1)%IC_source_type==2) then
-         if (pg(npi)%coord(3)>Partz(pg(npi)%izona)%H_res) then
-            OpCount(pg(npi)%imed) = OpCount(pg(npi)%imed) + 1    
-            pg(npi)%cella = -1
-         endif
-      endif
    enddo
 !$omp end parallel do
    call OrdGrid1 (nout)
@@ -178,7 +166,7 @@ endif
 if (nres>0) then
    it_memo = it_eff
    it_rest = it_eff
-   call Memo_Results(it_eff,it_memo,it_rest,dtvel,'inizio')
+   call memo_results (it_eff, it_memo, it_rest, dtvel, 'inizio')
 endif
 if (vtkconv) then
    call result_converter ('inizio')
@@ -210,598 +198,591 @@ ITERATION_LOOP: do while (it<=Domain%itmax)
    tempo = tempo + dt
    if (nscr>0) write (nscr,"(a,i8,a,g13.6,a,g12.4,a,i8,a,i5)") " it= ",it,     &
       "   time= ",tempo,"  dt= ",dt,"    npart= ",nag,"   out= ",num_out
-   do while ((done_flag.eqv.(.false.)).or.((Domain%RKscheme>1).and.            &
-      (Domain%time_stage>1)))
-      if (Domain%time_split==0) then
+1100 continue
+   if (Domain%time_split==0) then
 ! Explicit RK schemes 
 ! SPH parameters 
-         call start_and_stop(2,10)
-         if ((Domain%tipo=="semi").and.(Domain%time_stage<2)) call CalcVarLength
-         call start_and_stop(3,10)
+      call start_and_stop(2,10)
+      if ((Domain%tipo=="semi").and.(Domain%time_stage<2)) call CalcVarLength
+      call start_and_stop(3,10)
 ! To evaluate the close boundaries and integrals
 ! for the current particle in every loop and storing them in the general 
 ! storage array.
 ! Computation and storage of the boundary integrals
-         if (Domain%tipo=="semi") then
-            call start_and_stop(2,11)
-            call ComputeBoundaryDataTab
-            call start_and_stop(3,11)
-            endif
-      endif
+      if (Domain%tipo=="semi") then
+         call start_and_stop(2,11)
+         call ComputeBoundaryDataTab
+         call start_and_stop(3,11)
+         endif
+   endif
 ! Possible imposed velocities
 ! Stop particles belonging to a rigid block and moving with a fixed 
 ! velocity.
 ! One may loop over particles instead of over zones
-      if (Domain%tipo=="semi") then
-         do ir = 1,NPartZone 
-            if (Partz(ir)%move/="fix") cycle
+   if (Domain%tipo=="semi") then
+      do ir = 1,NPartZone 
+         if (Partz(ir)%move/="fix") cycle
 ! It assigns the movement with an imposed kinematics ("npointv" velocity data)
-            if (Partz(ir)%npointv>1) then
-               call vellaw(Partz(ir)%vlaw,Partz(ir)%vel,Partz(ir)%npointv)
-               write(nout,"(f12.4,a,i2,a,3e12.4)") tempo,"  zona",ir,"  vel."  &
-                  ,Partz(ir)%vel
+         if (Partz(ir)%npointv>1) then
+            call vellaw(Partz(ir)%vlaw,Partz(ir)%vel,Partz(ir)%npointv)
+            write(nout,"(f12.4,a,i2,a,3e12.4)") tempo,"  zona",ir,"  vel."     &
+               ,Partz(ir)%vel
+! As an alternative, one may loop over particles 
+            do npi=Partz(ir)%limit(1),Partz(ir)%limit(2) 
+               if (pg(npi)%cella==0) cycle
+               pg(npi)%var(:) = Partz(ir)%vel(:)
+               if (tempo>=pg(npi)%tstop) then
+                  pg(npi)%vstart(:) = zero
+                  pg(npi)%vel(:) = zero
+                  else
+                     pg(npi)%vstart(:) = Partz(ir)%vel(:)
+                     pg(npi)%vel(:) = Partz(ir)%vel(:)
+               endif
+            enddo
+! Fixed value of velocity (npointv = 1)
+            elseif (Partz(ir)%npointv==1) then
 ! As an alternative, one may loop over particles 
                do npi=Partz(ir)%limit(1),Partz(ir)%limit(2) 
                   if (pg(npi)%cella==0) cycle
                   pg(npi)%var(:) = Partz(ir)%vel(:)
                   if (tempo>=pg(npi)%tstop) then
                      pg(npi)%vstart(:) = zero
-                     pg(npi)%vel(:) = zero
+                     pg(npi)%vel(:)    = zero
                      else
-                        pg(npi)%vstart(:) = Partz(ir)%vel(:)
                         pg(npi)%vel(:) = Partz(ir)%vel(:)
                   endif
                enddo
-! Fixed value of velocity (npointv = 1)
-               elseif (Partz(ir)%npointv==1) then
-! As an alternative, one may loop over particles 
-                  do npi=Partz(ir)%limit(1),Partz(ir)%limit(2) 
-                     if (pg(npi)%cella==0) cycle
-                     pg(npi)%var(:) = Partz(ir)%vel(:)
-                     if (tempo>=pg(npi)%tstop) then
-                        pg(npi)%vstart(:) = zero
-                        pg(npi)%vel(:)    = zero
-                        else
-                           pg(npi)%vel(:) = Partz(ir)%vel(:)
-                     endif
-                  enddo
-            endif
-         enddo
-      endif
-      if ((Domain%time_split==0).and.(Domain%time_stage==1)) then 
+         endif
+      enddo
+   endif
+   if ((Domain%time_split==0).and.(Domain%time_stage==1)) then 
 ! Erosion criterium + continuity equation RHS   
-         call start_and_stop(2,12)
-         if ((erosione).and.(.not.esplosione)) then  
+      call start_and_stop(2,12)
+      if ((erosione).and.(.not.esplosione)) then  
 ! Detection of the mixture particle status ("flu" or "sol") 
-            if (Granular_flows_options%ID_erosion_criterion>1) then
+         if (Granular_flows_options%ID_erosion_criterion>1) then
 ! Erosion criterion
-               if (index(modelloerosione,"shields")>0) then
+            if (index(modelloerosione,"shields")>0) then
 ! Shields criterion
 !$omp parallel do default(none) shared(pg,nag) private(npi) 
-                  do npi=1,nag
-                     call Shields(npi) 
-                  enddo
+               do npi=1,nag
+                  call Shields(npi) 
+               enddo
 !$omp end parallel do
-                  elseif (index(modelloerosione,"mohr")>0) then
+               elseif (index(modelloerosione,"mohr")>0) then
 ! To compute the second invariant of the rate-strain tensor and density 
 ! derivatives
-                     call inter_EqCont_2D 
+                  call inter_EqCont_2D 
 ! Mohr-Coulomb criterion
-                     call MohrC
-               endif
+                  call MohrC
             endif
+         endif
 ! To update the auxiliary vector, which counts the particles with a status 
 ! different from "sol" 
+         indarrayFlu = 0
+         do npi=1,nag
+            if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
+            if (pg(npi)%state=="flu") then
+               indarrayFlu = indarrayFlu + 1
+! Checking not to overpass array sizes and possible resizing
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
+               endif
+               Array_Flu(indarrayFlu) = npi
+            endif
+         enddo
+         else
+! No erosion criterion  
             indarrayFlu = 0
             do npi=1,nag
                if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
-               if (pg(npi)%state=="flu") then
-                  indarrayFlu = indarrayFlu + 1
-! Checking not to overpass array sizes and possible resizing
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
+               indarrayFlu = indarrayFlu + 1
+! Checking not to overpass array sizes. Possible resizing.
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
                endif
+               Array_Flu(indarrayFlu) = npi
             enddo
-            else
-! No erosion criterion  
-               indarrayFlu = 0
-               do npi=1,nag
-                  if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
-                  indarrayFlu = indarrayFlu + 1
-! Checking not to overpass array sizes. Possible resizing.
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
-               enddo
-         endif
-      endif 
+      endif
+   endif 
 ! Momentum equation 
-      Ncbf_Max = 0
-      call start_and_stop(2,6)
+   Ncbf_Max = 0
+   call start_and_stop(2,6)
 !$omp parallel do default(none)                                                &
 !$omp private(npi,ii,tpres,tdiss,tvisc,ncbf,boundreaction)                     &
 !$omp shared(nag,pg,Domain,BoundaryDataPointer,Ncbf_Max,indarrayFlu,Array_Flu) &
 !$omp shared(it)
 ! Loop over particles
-      do ii = 1,indarrayFlu
-         npi = Array_Flu(ii)
-         call inter_EqMoto (npi,tpres,tdiss,tvisc)  
+   do ii = 1,indarrayFlu
+      npi = Array_Flu(ii)
+      call inter_EqMoto (npi,tpres,tdiss,tvisc)  
 ! Searching for the boundary faces, which are the nearest the npi-th current 
 ! particle
-         if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
-            pg(npi)%kodvel = 0
-            pg(npi)%velass = zero
+      if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
+         pg(npi)%kodvel = 0
+         pg(npi)%velass = zero
+      endif
+      if (Domain%tipo=="semi") Ncbf = BoundaryDataPointer(1,npi)
+      if ((Ncbf>0).and.(Domain%tipo=="semi")) then
+         Ncbf_Max = max(Ncbf_Max, Ncbf)
+         call AddBoundaryContributions_to_ME3D(npi,Ncbf,tpres,tdiss,tvisc)
+         if (pg(npi)%kodvel==0) then
+            BoundReaction = zero
+            call AddElasticBoundaryReaction_3D(npi,Ncbf,BoundReaction)
+            pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) + Domain%grav(:) + &
+                             BoundReaction(:)
+            else
+               pg(npi)%acc(:) = zero
          endif
-         if (Domain%tipo=="semi") then
-            Ncbf = BoundaryDataPointer(1,npi)
-            if (Ncbf>0) then
-               Ncbf_Max = max(Ncbf_Max, Ncbf)
-               call AddBoundaryContributions_to_ME3D(npi,Ncbf,tpres,tdiss,tvisc)
-               if (pg(npi)%kodvel==0) then
-                  BoundReaction = zero
-                  call AddElasticBoundaryReaction_3D(npi,Ncbf,BoundReaction)
-                  pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) +            &
-                                   Domain%grav(:) + BoundReaction(:)
-                  else
-                     pg(npi)%acc(:) = zero
-               endif
-               else
-                  if (Domain%tipo=="semi") then
-                     pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) +         &
-                                      Domain%grav(:)
-                     else 
-                        if (Domain%tipo=="bsph") then
-                           pg(npi)%acc(:) = (tpres(:) + tdiss(:) + tvisc(:)) / &
-                                            pg(npi)%Gamma + Domain%grav(:)
-                        endif
+         else
+            if (Domain%tipo=="semi") then
+               pg(npi)%acc(:) = tpres(:) + tdiss(:) + tvisc(:) + Domain%grav(:)
+               else 
+                  if (Domain%tipo=="bsph") then
+                     pg(npi)%acc(:) = (tpres(:) + tdiss(:) + tvisc(:)) /       &
+                                      pg(npi)%Gamma + Domain%grav(:)
                   endif
             endif
-         endif
-      enddo
-!$omp end parallel do
-      if (Ncbf_Max>Domain%MAXCLOSEBOUNDFACES) then
-         write (nout,"(a,i5,a,i5)")                                            &
-            "Increase parameter MAXCLOSEBOUNDFACES from",                      &
-            Domain%MAXCLOSEBOUNDFACES," to ",Ncbf_Max
-         call diagnostic (arg1=9,arg2=3,arg3=nomsub)
       endif
+   enddo
+!$omp end parallel do
+   if (Ncbf_Max>Domain%MAXCLOSEBOUNDFACES) then
+      write (nout,"(a,i5,a,i5)") "Increase parameter MAXCLOSEBOUNDFACES from", &
+         Domain%MAXCLOSEBOUNDFACES," to ",Ncbf_Max
+      call diagnostic (arg1=9,arg2=3,arg3=nomsub)
+   endif
 ! Time integration for body dynamics
-      if (n_bodies>0) then
-         call start_and_stop(3,6)
-         call start_and_stop(2,19)
-         call RHS_body_dynamics
-         call start_and_stop(3,19)
-         call start_and_stop(2,6)
-      endif
+   if (n_bodies>0) then
+      call start_and_stop(3,6)
+      call start_and_stop(2,19)
+      call RHS_body_dynamics
+      call start_and_stop(3,19)
+      call start_and_stop(2,6)
+   endif
 ! Time integration scheme for momentum and energy equations 
-      if (Domain%time_split==0) then   
+   if (Domain%time_split==0) then   
 ! Explicit RK schemes
-         call start_and_stop(3,6)
+      call start_and_stop(3,6)
 ! Velocity smoothing, trajectory equation, BC, neighboring parameters (start)
-         elseif (Domain%time_split==1) then   
+      elseif (Domain%time_split==1) then   
 ! dt computation 
-            dtvel = half * (dt + DtPreviousStep) 
+         dtvel = half * (dt + DtPreviousStep) 
 !$omp parallel do default(none)                                                &
 !$omp private(npi,ii)                                                          &
 !$omp shared(nag,Pg,dtvel,indarrayFlu,Array_Flu)
-            do ii=1,indarrayFlu
-               npi = Array_Flu(ii)
+         do ii=1,indarrayFlu
+            npi = Array_Flu(ii)
 ! kodvel = 0: the particle is internal to the domain. 
-               if (pg(npi)%kodvel==0) then 
-                  pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)
+            if (pg(npi)%kodvel==0) then 
+               pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)
 ! kodvel = 1: the particle has a critical flux condition. The vertical 
 ! velocity component is assigned.
-                  elseif (pg(npi)%kodvel==1) then                                                    
-                     pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)                            
-                     pg(npi)%vel(3) = pg(npi)%velass(3)
+               elseif (pg(npi)%kodvel==1) then                                                    
+                  pg(npi)%vel(:) = pg(npi)%vel(:) + dtvel * pg(npi)%acc(:)                            
+                  pg(npi)%vel(3) = pg(npi)%velass(3)
 ! kodvel = 2: the particle has an assigned normal velocity or source 
 ! condition. All the velocity components are assigned.
-                    elseif (pg(npi)%kodvel==2) then                                                    
-                       pg(npi)%vel(:) = pg(npi)%velass(:)                                                
-               endif 
-            enddo
+                 elseif (pg(npi)%kodvel==2) then                                                    
+                    pg(npi)%vel(:) = pg(npi)%velass(:)                                                
+            endif 
+         enddo
 !$omp end parallel do
-            call start_and_stop(3,6)
+         call start_and_stop(3,6)
 ! Energy equation: start
-            if (esplosione) then
-               do ii = 1,indarrayFlu
-                 npi = Array_Flu(ii)
-                 pg(npi)%IntEn = pg(npi)%IntEn + dtvel * pg(npi)%dEdT
-               enddo
-            endif
+         if (esplosione) then
+            do ii = 1,indarrayFlu
+              npi = Array_Flu(ii)
+              pg(npi)%IntEn = pg(npi)%IntEn + dtvel * pg(npi)%dEdT
+            enddo
+         endif
 ! Energy equation: end
 ! Time integration for body dynamics
-            if (n_bodies>0) then
-               call start_and_stop(2,19)
-               call time_integration_body_dynamics(dtvel)
-               call start_and_stop(3,19)
-            endif
+         if (n_bodies>0) then
+            call start_and_stop(2,19)
+            call time_integration_body_dynamics(dtvel)
+            call start_and_stop(3,19)
+         endif
 ! Partial smoothing for velocity: start 
-            call start_and_stop(2,7)
-            call inter_SmoothVelo_3D
+         call start_and_stop(2,7)
+         call inter_SmoothVelo_3D
 !$omp parallel do default(none) private(npi,ii,TetaV1)                         &
 !$omp shared(nag,Pg,Med,Domain,dt,indarrayFlu,Array_Flu,esplosione)
 ! Loop over all the active particles
-            do ii=1,indarrayFlu
-               npi = Array_Flu(ii)
-               if (esplosione) then
-                  TetaV1 = Domain%TetaV * pg(npi)%Csound * dt / Domain%h
-                  else
+         do ii=1,indarrayFlu
+            npi = Array_Flu(ii)
+            if (esplosione) then
+               TetaV1 = Domain%TetaV * pg(npi)%Csound * dt / Domain%h
+               else
 ! TetaV depending on the time step
-                     TetaV1 = Domain%TetaV * Med(pg(npi)%imed)%Celerita * dt / &
-                              Domain%h
-               endif
-               if (esplosione) pg(npi)%IntEn = pg(npi)%IntEn + TetaV1 *        &
-                                               pg(npi)%Envar
-               if (pg(npi)%kodvel==0) then                                            
+                  TetaV1 = Domain%TetaV * Med(pg(npi)%imed)%Celerita * dt /    &
+                           Domain%h
+            endif
+            if (esplosione) pg(npi)%IntEn = pg(npi)%IntEn + TetaV1 *           &
+                                            pg(npi)%Envar
+            if (pg(npi)%kodvel==0) then                                            
 ! The particle is inside the domain and far from boundaries
-                  pg(npi)%var(:) = pg(npi)%vel(:) + TetaV1 * pg(npi)%var(:)      
-                  pg(npi)%vel(:) = pg(npi)%var(:)                                        
-                  else
+               pg(npi)%var(:) = pg(npi)%vel(:) + TetaV1 * pg(npi)%var(:)      
+               pg(npi)%vel(:) = pg(npi)%var(:)                                        
+               else
 ! The particle is close to a "source", "level" or "normal velocity boundary
 ! (kodvel = 1 or = 2): the final velocity is kept unmodified
-                     pg(npi)%var(:) = pg(npi)%vel(:)                                         
-               endif                                                                 
-            enddo
+                  pg(npi)%var(:) = pg(npi)%vel(:)                                         
+            endif                                                                 
+         enddo
 !$omp end parallel do
-            call start_and_stop(3,7)
+         call start_and_stop(3,7)
 ! Partial smoothing for velocity: end
 ! Diffusion coefficient: start (input option not recommended)
-            if (diffusione) then
-               call start_and_stop(2,15)
+         if (diffusione) then
+            call start_and_stop(2,15)
 !$omp parallel do default(none) private(npi,ii,appo1,appo2,appo3)              &
 !$omp shared(nag,pg,Med,indarrayFlu,Array_Flu)
-               do ii = 1,indarrayFlu
-                  npi = Array_Flu(ii)
-                  if ((pg(npi)%VolFra==VFmx).and.                              &
-                     (pg(npi)%visc==Med(pg(npi)%imed)%mumx/pg(npi)%dens)) then
-                     pg(npi)%coefdif = zero
-                     else
-                        call inter_CoefDif (npi)
-                        if (pg(npi)%uni>zero) pg(npi)%veldif = pg(npi)%veldif  &
-                                                               / pg(npi)%uni 
-                        appo1 = (pg(npi)%veldif(1) - pg(npi)%var(1)) *         &
-                                (pg(npi)%veldif(1) - pg(npi)%var(1))
-                        appo2 = (pg(npi)%veldif(2) - pg(npi)%var(2)) *         &
-                                (pg(npi)%veldif(2) - pg(npi)%var(2))
-                        appo3 = (pg(npi)%veldif(3) - pg(npi)%var(3)) *         &
-                                (pg(npi)%veldif(3) - pg(npi)%var(3))
-                        pg(npi)%coefdif = pg(npi)%coefdif * Dsqrt(appo1 + appo2&
-                                          + appo3)
-                  endif
-               enddo
+            do ii = 1,indarrayFlu
+               npi = Array_Flu(ii)
+               if ((pg(npi)%VolFra==VFmx).and.                                 &
+                  (pg(npi)%visc==Med(pg(npi)%imed)%mumx/pg(npi)%dens)) then
+                  pg(npi)%coefdif = zero
+                  else
+                     call inter_CoefDif (npi)
+                     if (pg(npi)%uni>zero) pg(npi)%veldif = pg(npi)%veldif     &
+                                                            / pg(npi)%uni 
+                     appo1 = (pg(npi)%veldif(1) - pg(npi)%var(1)) *            &
+                             (pg(npi)%veldif(1) - pg(npi)%var(1))
+                     appo2 = (pg(npi)%veldif(2) - pg(npi)%var(2)) *            &
+                             (pg(npi)%veldif(2) - pg(npi)%var(2))
+                     appo3 = (pg(npi)%veldif(3) - pg(npi)%var(3)) *            &
+                             (pg(npi)%veldif(3) - pg(npi)%var(3))
+                     pg(npi)%coefdif = pg(npi)%coefdif * Dsqrt(appo1 + appo2 + &
+                                       appo3)
+               endif
+            enddo
 !$omp end parallel do
-               call start_and_stop(3,15)
-            endif
+            call start_and_stop(3,15)
+         endif
 ! Diffusion coefficient: end
 ! Update the particle positions
-            call start_and_stop(2,8)
+         call start_and_stop(2,8)
 !$omp parallel do default(none) private(npi) shared(nag,pg,dt)
 ! Loop over the active particles
-            do npi=1,nag
-               if (pg(npi)%cella==0) cycle
+         do npi=1,nag
+            if (pg(npi)%cella==0) cycle
 ! To save the old coordinates
-               pg(npi)%CoordOld(:) = pg(npi)%coord(:)
-               if (pg(npi)%vel_type/="std") then
+            pg(npi)%CoordOld(:) = pg(npi)%coord(:)
+            if (pg(npi)%vel_type/="std") then
 ! If the motion type is not "std", velocities are assigned
-                  pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%vstart(:)
-                  else
+               pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%vstart(:)
+               else
 ! Otherwise, the partial smoothed velocity field is integrated in time
-                     pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%var(:)  
-               endif
-            enddo
+                  pg(npi)%coord(:) = pg(npi)%coord(:) + dt * pg(npi)%var(:)  
+            endif
+         enddo
 !$omp end parallel do
 ! Wall element trajectories
-            if (Domain%tipo=="bsph") then
+         if (Domain%tipo=="bsph") then
 !$omp parallel do default(none) private(npi) shared(DBSPH,pg_w,dt)
-               do npi=1,DBSPH%n_w
-                  if (pg_w(npi)%cella==0) cycle
-                  pg_w(npi)%coord(:) = pg_w(npi)%coord(:) + dt *               &
-                                       pg_w(npi)%vel(:)
-               enddo
+            do npi=1,DBSPH%n_w
+               if (pg_w(npi)%cella==0) cycle
+               pg_w(npi)%coord(:) = pg_w(npi)%coord(:) + dt * pg_w(npi)%vel(:)
+            enddo
 !$omp end parallel do
-            endif
-            call start_and_stop(3,8)
+         endif
+         call start_and_stop(3,8)
 ! Check on the particles gone out of the domain throughout the opened faces
-            call start_and_stop(2,9)
-            if (NumOpenFaces>0) call CancelOutgoneParticles_3D
+         call start_and_stop(2,9)
+         if (NumOpenFaces>0) call CancelOutgoneParticles_3D
 ! Adding new particles from the inlet sections
-            if (SourceFace/=0) call GenerateSourceParticles_3D
+         if (SourceFace/=0) call GenerateSourceParticles_3D
 ! Particle reordering 
-            call OrdGrid1 (nout)
-            call start_and_stop(3,9)
+         call OrdGrid1 (nout)
+         call start_and_stop(3,9)
 ! Set the parameters for the fixed particles 
-            if (Domain%NormFix) call NormFix
+         if (Domain%NormFix) call NormFix
 ! SPH parameters
-            call start_and_stop(2,10)
-            call CalcVarLength
-            call start_and_stop(3,10)
+         call start_and_stop(2,10)
+         call CalcVarLength
+         call start_and_stop(3,10)
 ! Assessing the close boundaries and the integrals
 ! for the current particle in every loop and storing them in the general 
 ! storage array.
 ! Computation and storage of the boundary integrals
-            if (Domain%tipo=="semi") then
-               call start_and_stop(2,11)
-               call ComputeBoundaryDataTab
-               call start_and_stop(3,11)
-            endif
-      endif
+         if (Domain%tipo=="semi") then
+            call start_and_stop(2,11)
+            call ComputeBoundaryDataTab
+            call start_and_stop(3,11)
+         endif
+   endif
 ! Continuity equation 
 ! Erosion criterion + continuity equation RHS 
-      call start_and_stop(2,12)
-      Ncbf_Max = 0
-      if (erosione.and..not. esplosione) then  
-         if (Domain%time_split==1) then 
+   call start_and_stop(2,12)
+   Ncbf_Max = 0
+   if (erosione.and..not. esplosione) then  
+      if (Domain%time_split==1) then 
 ! Assessing particle status ("flu" or "sol") of the mixture particles
 ! Calling the proper subroutine for the erosion criterion 
-            select case (Granular_flows_options%ID_erosion_criterion)
-               case(1)
+         select case (Granular_flows_options%ID_erosion_criterion)
+            case(1)
 !$omp parallel do default(none) shared(pg,nag) private(npi,ncel)
-                  do npi=1,nag
-                     pg(npi)%vel_old(:) = pg(npi)%vel(:)
-                     pg(npi)%normal_int_old(:) = pg(npi)%normal_int(:)        
-                     call initialization_fixed_granular_particle(npi)             
-                  enddo
+               do npi=1,nag
+                  pg(npi)%vel_old(:) = pg(npi)%vel(:)
+                  pg(npi)%normal_int_old(:) = pg(npi)%normal_int(:)        
+                  call initialization_fixed_granular_particle(npi)             
+               enddo
 !$omp end parallel do 
 !$omp parallel do default(none) shared(pg,nag) private(npi)
-                  do npi=1,nag
-                     call Shields(npi) 
-                  enddo
+               do npi=1,nag
+                  call Shields(npi) 
+               enddo
 !$omp end parallel do 
 !$omp parallel do default(none) shared(pg,nag,Granular_flows_options,Med)      &
 !$omp private(npi,ncel,aux,igridi,jgridi,kgridi)
-                  do npi=1,nag
-                     ncel = ParticleCellNumber(pg(npi)%coord)
-                     aux = CellIndices(ncel,igridi,jgridi,kgridi)
-                     if (Granular_flows_options%ID_erosion_criterion==1) then
-                        if (pg(npi)%state=="sol") then
-                           pg(npi)%mu =                                        &
-                              Med(Granular_flows_options%ID_main_fluid)%visc * &
-                              Med(Granular_flows_options%ID_main_fluid)%den0
-                           pg(npi)%visc =                                      &
-                              Med(Granular_flows_options%ID_main_fluid)%visc
-                        endif
+               do npi=1,nag
+                  ncel = ParticleCellNumber(pg(npi)%coord)
+                  aux = CellIndices(ncel,igridi,jgridi,kgridi)
+                  if (Granular_flows_options%ID_erosion_criterion==1) then
+                     if (pg(npi)%state=="sol") then
+                        pg(npi)%mu =                                           &
+                           Med(Granular_flows_options%ID_main_fluid)%visc *    &
+                           Med(Granular_flows_options%ID_main_fluid)%den0
+                        pg(npi)%visc =                                         &
+                           Med(Granular_flows_options%ID_main_fluid)%visc
                      endif
-                  enddo
+                  endif
+               enddo
 !$omp end parallel do
-               case(2)
+            case(2)
 !$omp parallel do default(none) shared(pg,nag) private(npi)
-                  do npi=1,nag
-                     call Shields(npi) 
-                  enddo
+               do npi=1,nag
+                  call Shields(npi) 
+               enddo
 !$omp end parallel do 
-               case(3)
+            case(3)
 ! To compute the second invariant of the rate-strain tensor and density 
 ! derivatives
-                  call inter_EqCont_2D 
-                  call MohrC
-               case default
-            end select
+               call inter_EqCont_2D 
+               call MohrC
+            case default
+         end select
 ! Update auxiliary vector for counting particles, whose status is not "sol"
-            indarrayFlu = 0
-            do npi = 1,nag
-               if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
-               if (pg(npi)%state=="flu") then
-                  indarrayFlu = indarrayFlu + 1
+         indarrayFlu = 0
+         do npi = 1,nag
+            if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
+            if (pg(npi)%state=="flu") then
+               indarrayFlu = indarrayFlu + 1
 ! Check the boundary sizes and possible resizing
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
                endif
-            enddo
-         endif
+               Array_Flu(indarrayFlu) = npi
+            endif
+         enddo
+      endif
 ! To compute the second invariant of the strain-rate tensor and density 
 ! derivatives
-         call inter_EqCont_3D
-         else 
+      call inter_EqCont_3D
+      else 
 ! No erosion criterion  
 ! To compute the second invariant of the strain-rate tensor and density 
 ! derivatives
-            call inter_EqCont_3D
-            if (Domain%time_split==1) then 
-               indarrayFlu = 0
-               do npi = 1,nag
-                  if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
-                  indarrayFlu = indarrayFlu + 1
+         call inter_EqCont_3D
+         if (Domain%time_split==1) then 
+            indarrayFlu = 0
+            do npi = 1,nag
+               if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
+               indarrayFlu = indarrayFlu + 1
 ! Check array sizes and possible resizing 
-                  if (indarrayFlu>PARTICLEBUFFER) then
-                     call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-                  endif
-                  Array_Flu(indarrayFlu) = npi
-               enddo
-            endif
-      endif 
-      if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
+               if (indarrayFlu>PARTICLEBUFFER) then
+                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
+               endif
+               Array_Flu(indarrayFlu) = npi
+            enddo
+         endif
+   endif 
+   if ((Domain%time_stage==1).or.(Domain%time_split==1)) then 
 !$omp parallel do default(none) private(npi) shared(nag,pg)
-         do npi=1,nag
-            pg(npi)%koddens = 0
-            pg(npi)%densass = pg(npi)%dens
-         enddo
+      do npi=1,nag
+         pg(npi)%koddens = 0
+         pg(npi)%densass = pg(npi)%dens
+      enddo
 !$omp end parallel do
-      endif
-      if (Domain%tipo=="semi") then
+   endif
+   if (Domain%tipo=="semi") then
 !$omp parallel do default(none) private(npi,ii,BCtorodivV,Ncbf)                &
 !$omp shared(nag,pg,BoundaryDataPointer,Ncbf_Max,indarrayFlu,Array_Flu,it)
 ! Loop over all the active particles
 ! Density update 
 ! Boundary contributions to the continuity equation (SA-SPH)
-         do ii=1,indarrayFlu
-            npi = Array_Flu(ii)
+      do ii=1,indarrayFlu
+         npi = Array_Flu(ii)
 ! Seaching for the neighbouring faces of the particle "npi"
-            BCtorodivV = zero
-            Ncbf = BoundaryDataPointer(1,npi)
+         BCtorodivV = zero
+         Ncbf = BoundaryDataPointer(1,npi)
 ! Detecting the faces with actual contributions
-            if (Ncbf>0) then        
-               Ncbf_Max = max(Ncbf_Max, Ncbf)
-               Call AddBoundaryContribution_to_CE3D (npi, Ncbf, BCtorodivV)
-            endif
-            if (pg(npi)%koddens==0) then
-               pg(npi)%dden = pg(npi)%dden - BCtorodivV
-               elseif (pg(npi)%koddens==1) then
-                  pg(npi)%dden = zero  
+         if (Ncbf>0) then        
+            Ncbf_Max = max(Ncbf_Max, Ncbf)
+            Call AddBoundaryContribution_to_CE3D (npi, Ncbf, BCtorodivV)
+         endif
+         if (pg(npi)%koddens==0) then
+            pg(npi)%dden = pg(npi)%dden - BCtorodivV
+            elseif (pg(npi)%koddens==1) then
+               pg(npi)%dden = zero  
 ! Boundary type is velocity or source
-                  elseif (pg(npi)%koddens==2) then
-                     pg(npi)%dden = zero
-            endif
-         enddo
+               elseif (pg(npi)%koddens==2) then
+                  pg(npi)%dden = zero
+         endif
+      enddo
 !$omp end parallel do
-      endif  
-      if (Ncbf_Max>Domain%MAXCLOSEBOUNDFACES) then
-         write (nout,"(a,i5,a,i5)")                                            &
-            "Increase parameter MAXCLOSEBOUNDFACES from ",                     &
-            Domain%MAXCLOSEBOUNDFACES," to ",Ncbf_Max
-         call diagnostic (arg1=9,arg2=4,arg3=nomsub)
-      endif
+   endif  
+   if (Ncbf_Max>Domain%MAXCLOSEBOUNDFACES) then
+      write (nout,"(a,i5,a,i5)") "Increase parameter MAXCLOSEBOUNDFACES from " &
+         ,Domain%MAXCLOSEBOUNDFACES," to ",Ncbf_Max
+      call diagnostic (arg1=9,arg2=4,arg3=nomsub)
+   endif
 ! Loop over all the active particles
 ! Time integration of the continuity equation 
-      if (Domain%time_split==0) then   
+   if (Domain%time_split==0) then   
 ! Explicit RK schemes
-         call start_and_stop(3,12)
-         elseif (Domain%time_split==1) then 
+      call start_and_stop(3,12)
+      elseif (Domain%time_split==1) then 
 ! Leapfrog scheme
 !$omp parallel do default(none) private(npi,ii)                                &
 !$omp shared(nag,pg,dt,indarrayFlu,Array_Flu,Domain,med)
-            do ii=1,indarrayFlu
-               npi = Array_Flu(ii)
-               if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
-               if (Domain%tipo=="bsph") pg(npi)%dden=pg(npi)%dden/pg(npi)%uni
+         do ii=1,indarrayFlu
+            npi = Array_Flu(ii)
+            if (pg(npi)%cella==0.or.pg(npi)%vel_type/="std") cycle
+            if (Domain%tipo=="bsph") pg(npi)%dden=pg(npi)%dden/pg(npi)%uni
 ! Boundary type is "fixe" or "tapis" or "level"
-               if (pg(npi)%koddens==0) then
-                  if (Domain%tipo=="semi") pg(npi)%dens = pg(npi)%dens + dt *  &
-                     pg(npi)%dden
-                  if (Domain%density_thresholds==1) then        
-                     if (pg(npi)%dens<(0.9d0*med(pg(npi)%imed)%den0))          &
-                        pg(npi)%dens = 0.9d0*med(pg(npi)%imed)%den0
-                     if (pg(npi)%dens>(1.1d0*med(pg(npi)%imed)%den0))          &
-                        pg(npi)%dens = 1.1d0 * med(pg(npi)%imed)%den0
-                  endif   
-                  pg(npi)%densass = zero
+            if (pg(npi)%koddens==0) then
+               if (Domain%tipo=="semi") pg(npi)%dens = pg(npi)%dens + dt *     &
+                  pg(npi)%dden
+               if (Domain%density_thresholds==1) then        
+                  if (pg(npi)%dens<(0.9d0*med(pg(npi)%imed)%den0))             &
+                     pg(npi)%dens = 0.9d0*med(pg(npi)%imed)%den0
+                  if (pg(npi)%dens>(1.1d0*med(pg(npi)%imed)%den0))             &
+                     pg(npi)%dens = 1.1d0 * med(pg(npi)%imed)%den0
+               endif   
+               pg(npi)%densass = zero
 ! Boundary type is "velocity" or "source"
-                  elseif (pg(npi)%koddens==2) then
-                     pg(npi)%dens = pg(npi)%densass  
+               elseif (pg(npi)%koddens==2) then
+                  pg(npi)%dens = pg(npi)%densass  
 ! Density is kept constant'
-               endif
-            enddo
+            endif
+         enddo
 !$omp end parallel do
-            call start_and_stop(3,12)
+         call start_and_stop(3,12)
 ! Continuity equation: end
-            if (diffusione) then
-               call start_and_stop(2,16)
-               call aggdens
-               call start_and_stop(3,16)
-            endif
+         if (diffusione) then
+            call start_and_stop(2,16)
+            call aggdens
+            call start_and_stop(3,16)
+         endif
 ! Equation of state 
-            call start_and_stop(2,13)
-            call calcpre 
-            call start_and_stop(3,13)
-            if (n_bodies>0) then
-               call start_and_stop(2,19)
-               call body_pressure_mirror
-               call start_and_stop(3,19)
-            endif
-      endif
-      if (Domain%time_split==0) call time_integration
+         call start_and_stop(2,13)
+         call calcpre 
+         call start_and_stop(3,13)
+         if (n_bodies>0) then
+            call start_and_stop(2,19)
+            call body_pressure_mirror
+            call start_and_stop(3,19)
+         endif
+   endif
+   if (Domain%time_split==0) call time_integration
 ! Explicit RK schemes
 ! Partial smoothing for pressure and density update
-      if (Domain%TetaP>zero) then
-         call start_and_stop(2,14)
-         if (Domain%Psurf=='s') then
-            call inter_SmoothPres
-            elseif (Domain%Psurf=='a') then
-               call PressureSmoothing_3D
-         endif
-         call start_and_stop(3,14)
-      endif
-      if (n_bodies>0) then
-         call start_and_stop(2,19)
-         call body_pressure_postpro
-         call start_and_stop(3,19)
+   if (Domain%TetaP>zero) then
+      call start_and_stop(2,14)
+      if (Domain%Psurf=='s') then
+         call inter_SmoothPres
+         elseif (Domain%Psurf=='a') then
+            call PressureSmoothing_3D
       endif
-      if (diffusione) then
-         call start_and_stop(2,16)
+      call start_and_stop(3,14)
+   endif
+   if (n_bodies>0) then
+      call start_and_stop(2,19)
+      call body_pressure_postpro
+      call start_and_stop(3,19)
+   endif
+   if (diffusione) then
+      call start_and_stop(2,16)
 !$omp parallel do default(none) private(npi,ii)                                &
 !$omp shared(nag,Pg,Med,indarrayFlu,Array_Flu)
-         do ii = 1,indarrayFlu
-            npi = Array_Flu(ii)
-            if (pg(npi)%koddens/=0) cycle
-            if (pg(npi)%imed==1) then
-               pg(npi)%dens = pg(npi)%pres / (Med(1)%celerita *                &
-                              Med(1)%celerita) + (Med(2)%den0 * VFmn +         &
-                              Med(1)%den0 * (one - VFmn))
-               elseif (pg(npi)%imed==2) then
-                  pg(npi)%dens = pg(npi)%pres / (Med(2)%celerita *             &
-                                 Med(2)%celerita) + (Med(2)%den0 * VFmx +      &
-                                 Med(1)%den0 * (one - VFmx))
-            endif
-            Pg(npi)%rhoc = pg(npi)%pres / (med(2)%celerita * med(2)%celerita) +&
-                           med(2)%den0
-            Pg(npi)%rhow = pg(npi)%pres / (med(1)%celerita * med(1)%celerita) +&
-                           med(1)%den0
-         enddo
+      do ii = 1,indarrayFlu
+         npi = Array_Flu(ii)
+         if (pg(npi)%koddens/=0) cycle
+         if (pg(npi)%imed==1) then
+            pg(npi)%dens = pg(npi)%pres / (Med(1)%celerita * Med(1)%celerita)  & 
+                           + (Med(2)%den0 * VFmn + Med(1)%den0 * (one - VFmn))
+            elseif (pg(npi)%imed==2) then
+               pg(npi)%dens = pg(npi)%pres / (Med(2)%celerita *                &
+                              Med(2)%celerita) + (Med(2)%den0 * VFmx +         &
+                              Med(1)%den0 * (one - VFmx))
+         endif
+         Pg(npi)%rhoc = pg(npi)%pres / (med(2)%celerita * med(2)%celerita) +   &
+                        med(2)%den0
+         Pg(npi)%rhow = pg(npi)%pres / (med(1)%celerita * med(1)%celerita) +   &
+                        med(1)%den0
+      enddo
 !$omp end parallel do
-         call start_and_stop(3,16)
-      endif
-      call start_and_stop(2,20)
-      if (Granular_flows_options%ID_erosion_criterion==1) call mixture_viscosity 
-      call start_and_stop(3,20)
+      call start_and_stop(3,16)
+   endif
+   call start_and_stop(2,20)
+   if (Granular_flows_options%ID_erosion_criterion==1) call mixture_viscosity 
+   call start_and_stop(3,20)
 ! Apparent viscosity (input option not recommended)  
-      if (diffusione.or.esplosione) then
-         if ((Domain%time_split==1).or.(Domain%time_stage==Domain%RKscheme))   &
-            then
-            call start_and_stop(2,15)
-            call viscapp 
-            call start_and_stop(3,15)
-         endif
+   if (diffusione.or.esplosione) then
+      if ((Domain%time_split==1).or.(Domain%time_stage==Domain%RKscheme)) then
+         call start_and_stop(2,15)
+         call viscapp 
+         call start_and_stop(3,15)
       endif
-      if (Domain%tipo=="semi") then
+   endif
+   if (Domain%tipo=="semi") then
 ! Boundary Conditions: start
 ! BC: checks for the particles gone out of the domain throughout the opened 
 ! faces
-         if ((Domain%time_split==0).and.(Domain%time_stage==Domain%RKscheme))  &
-            then
-            call start_and_stop(2,9)
-            if (NumOpenFaces>0) call CancelOutgoneParticles_3D
+      if ((Domain%time_split==0).and.(Domain%time_stage==Domain%RKscheme)) then
+         call start_and_stop(2,9)
+         if (NumOpenFaces>0) call CancelOutgoneParticles_3D
 ! Adding new particles at the inlet sections
-            if (SourceFace/=0) call GenerateSourceParticles_3D
+         if (SourceFace/=0) call GenerateSourceParticles_3D
 ! Particle reordering on the background positioning grid
-            call OrdGrid1 (nout)
-            call start_and_stop(3,9)
+         call OrdGrid1 (nout)
+         call start_and_stop(3,9)
 ! Set the parameters for the fixed particles 
-            if (Domain%NormFix) call NormFix
-            indarrayFlu = 0
-            do npi=1,nag
-               if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
-                  indarrayFlu = indarrayFlu + 1
+         if (Domain%NormFix) call NormFix
+         indarrayFlu = 0
+         do npi=1,nag
+            if ((pg(npi)%cella==0).or.(pg(npi)%vel_type/="std")) cycle
+               indarrayFlu = indarrayFlu + 1
 ! Array sizes check and possibile resizing
-               if (indarrayFlu>PARTICLEBUFFER) then
-                  call diagnostic (arg1=9,arg2=2,arg3=nomsub)
-               endif
-               Array_Flu(indarrayFlu) = npi
-            enddo 
-         endif
-! Boundary Conditions: end
+            if (indarrayFlu>PARTICLEBUFFER) then
+               call diagnostic (arg1=9,arg2=2,arg3=nomsub)
+            endif
+            Array_Flu(indarrayFlu) = npi
+         enddo 
       endif
+! Boundary Conditions: end
+   endif
 ! Subroutine for wall BC treatment (DB-SPH)
 ! Density and pressure updates for wall elements: MUSCL + LPRS  
 ! + state equation 
-      call start_and_stop(2,18)
-      if ((Domain%tipo=="bsph").and.(nag>0).and.(DBSPH%n_w>0)) then
-         call Gradients_to_MUSCL   
-         call BC_wall_elements
-      endif
-      call start_and_stop(3,18)
+   call start_and_stop(2,18)
+   if ((Domain%tipo=="bsph").and.(nag>0).and.(DBSPH%n_w>0)) then
+      call Gradients_to_MUSCL   
+      call BC_wall_elements
+   endif
+   call start_and_stop(3,18)
 ! Update of the time stage
-      if ((Domain%RKscheme>1).and.(Domain%time_split==0)) then
-         Domain%time_stage = MODULO(Domain%time_stage,Domain%RKscheme)
-         Domain%time_stage = Domain%time_stage + 1
+   if ((Domain%RKscheme>1).and.(Domain%time_split==0)) then
+      Domain%time_stage = MODULO(Domain%time_stage,Domain%RKscheme)
+      Domain%time_stage = Domain%time_stage + 1
+! End of the intermediate time stage loop
+      if (Domain%time_stage<2) then
+         continue
          else
-            done_flag = .true.
+            go to 1100
       endif
-   enddo
+   endif
 ! Post-processing
    if (allocated(Z_fluid_max)) then
       if ((int(tempo/Domain%depth_dt_out)>Domain%depth_it_out_last).or.        &
@@ -817,7 +798,7 @@ ITERATION_LOOP: do while (it<=Domain%itmax)
       call print_results (it_eff, it_print, 'loop__')
    endif
    if (nres>0) then
-      call Memo_Results(it_eff,it_memo,it_rest,dtvel,'loop__')
+      call memo_results (it_eff, it_memo, it_rest, dtvel, 'loop__')
    endif
 ! Computing variables at the monitoring points
    call CalcVarp
@@ -907,14 +888,13 @@ ITERATION_LOOP: do while (it<=Domain%itmax)
    if (kill_flag) exit ITERATION_LOOP
    if (tempo>=Domain%tmax) exit ITERATION_LOOP
 enddo  ITERATION_LOOP 
-! Post-processing: log file
+! Post-processing (also for restart)
 if (it_eff/=it_print.and.nout>0) then
    it_print = it_eff
    call print_results (it_eff,it_print,'fine__')
 endif
-! Post-processing: restart file
 if (it_eff/=it_memo.and.nres>0) then
-   call Memo_Results(it_eff,it_memo,it_rest,dtvel,'fine__')
+   call memo_results (it_eff,it_memo,it_rest,dtvel,'fine__')
 endif
 if (vtkconv) then
    call result_converter ('fine__')
diff --git a/src/Main_algorithm/sphera.f90 b/src/Main_algorithm/sphera.f90
index 3c37b59..2e79014 100755
--- a/src/Main_algorithm/sphera.f90
+++ b/src/Main_algorithm/sphera.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -41,7 +40,7 @@ integer(4) :: ier,i,n,narg
 double precision :: starttime,endtime
 character(len=255) :: nomearg
 character(len=lencard) :: nomsub = "Sphera"
-character(100),external :: lcase
+character(80),external :: lcase
 double precision,external :: omp_get_wtime
 !------------------------
 ! Explicit interfaces
@@ -240,17 +239,30 @@ do n=1,narg
 enddo
 ! I/O assignments
 call check_files
+write(nscr,1000) 
 write(nout,1000) 
 1000 format (                                                                  &
 1x,'------------------------------------------------------------------------'/ &
 1x,'This output file is generated by SPHERA (Smoothed Particle Hydrodynamics'/ &
 1x,'research software; mesh-less Computational Fluid Dynamics code).        '/ &
 1x,'Copyright 2005-2015 (RSE SpA-formerly ERSE SpA, formerly CESI RICERCA,  '/ &
-1x,'formerly CESI-):                '/ &
+1x,'formerly CESI-; SPHERA has been authored for RSE SpA by:                '/ &
+1x,'Andrea Amicarelli, Antonio Di Monaco, Sauro Manenti, Elia Bon,          '/ &
+1x,'Daria Gatti, Giordano Agate, Stefano Falappi, Barbara Flamini,          '/ &
+1x,'Roberto Guandalini, David Zuccalà).                                     '/ &
+1x,'Main numerical developments of SPHERA:                                  '/ &
+1x,'Amicarelli et al. (2015,CAF), Amicarelli et al. (2013,IJNME),           '/ &
+1x,'Manenti et al. (2012,JHE), Di Monaco et al. (2011,EACFM).               '/ & 
+1x,'Email contact: andrea.amicarelli@rse-web.it                             '/ &
+1x,'SPHERA is released under the terms of GNU General Public License as     '/ &
+1x,'published by the Free Software Foundation,                              '/ &
+1x,'either version 3 of the License, or (at your option) any later version. '/ &
 1x,'SPHERA is distributed in the hope that it will be                       '/ &
 1x,'useful, but WITHOUT ANY WARRANTY; without even the implied warranty of  '/ &
 1x,'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    '/ &
-1x,' ',//)
+1x,'See the GNU General Public License for more details. You should have    '/ &
+1x,'received a copy of the GNU General Public License                       '/ &
+1x,'along with SPHERA. If not, see <http://www.gnu.org/licenses/>.',//)
 call start_and_stop(0,0)
 write(nout,*)
 write(nout,*) " >> The following files have been assigned and checked:"
@@ -305,25 +317,6 @@ if (nres>0) close(nres)
 if (nplb>0) close(nplb)
 if (nfro>0) close(nfro)
 if (ncpt>0) close(ncpt)
-! To Concatenate the ".txt" output files and remove the original ones
-call system("touch Body_dynamics.tmp")
-call system("cat *Body_dynamics* > Body-dynamics.txt")
-call system("rm -f *Body_dynamics*")
-call system("mv Body-dynamics.txt Body_dynamics.txt")
-call system("touch Body_particles.tmp")
-call system("cat *Body_particles* > Body-particles.txt")
-call system("rm -f *Body_particles*")
-call system("mv Body-particles.txt Body_particles.txt")
-call system("touch temp.cln")
-call system("cat *.cln > monitoring_lines.txt")
-call system("rm -f *.cln")
-call system("touch temp.cpt")
-call system("cat *.cpt > monitoring_points.txt")
-call system("rm -f *.cpt")
-call system("touch blt_interfaces.tmp")
-call system("cat *blt_interfaces* > blt-interfaces.txt")
-call system("rm -f *blt_interfaces*")
-call system("mv blt-interfaces.txt blt_interfaces.txt")
 stop
 !------------------------
 ! Contains
diff --git a/src/Modules/Dynamic_allocation_module.f90 b/src/Modules/Dynamic_allocation_module.f90
index 975790c..7a29322 100755
--- a/src/Modules/Dynamic_allocation_module.f90
+++ b/src/Modules/Dynamic_allocation_module.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: Dynamic_allocation_module           
 ! Description: Module to define dynamically allocated variables.                    
 !----------------------------------------------------------------------------------------------------------------------------------
+
 module Dynamic_allocation_module
 use Hybrid_allocation_module
 ! Vertice(3,n_vertices): array of the geometrical vertices
@@ -70,12 +70,11 @@ integer(4),               dimension(:),    allocatable :: PartIntorno
 ! PartKernel(1,b): -|gradW_0b|/|r_0b|, gradW: kernel gradient (cubic spline);
 !    Thus gradW = |gradW_0b| * (gradW_0b/|gradW_0b|) = - PartKernel*rag, 
 !    rag=-(x_b-x_0) is aligned with gradW
-! PartKernel(2,b): PartKernel(1,b)/(|r_0b|^2+eps^2) = 
-!                  -|gradW_0b|/|r_0b|/(|r_0b|^2+eps^2)
+! PartKernel(2,b): -|gradW_0b|/[|r_0b|(|r_0b|^2+eps^2)], cubic spline kernel
 ! PartKernel(3,b): -|gradW_0b|/|r_0b|, Gallati anti-cluster kernel, 
 !                  used for pressure terms (SA-SPH) 
-! PartKernel(4,b): W_0b: absolute value of the kernel cubic spline (SASPH, but 
-!                        not used)
+! PartKernel(4,b): W_0b: absolute value of the kernel cubic spline,
+!                        used for interpolations and DB-SPH
 ! gradW vector is equal to -PartKernel(1 or 3,b)*rag_0b
 double precision,         dimension(:,:),  allocatable :: PartKernel
 ! rag(3,NMAXPARTJ*PARTICLEBUFFER): 3D vector list of -r_0b=x_0-x_b,
@@ -87,19 +86,12 @@ integer(4),               dimension(:),    allocatable :: nPartIntorno_fw
 ! PartIntorno_fw(NMAXPARTJ*PARTICLEBUFFER): array of the indeces of the 
 ! neighbouring wall particles 
 integer(4),               dimension(:),    allocatable :: PartIntorno_fw   
-! Kernel parameter neighbouring array: kernel_fw(2,NMAXPARTJ*PARTICLEBUFFER),
-! (wall neighbours; DBSPH)
-!    kernel_fw(1,i): W_0a: absolute value of the kernel cubic spline (DBSPH)
-!    kernel_fw(2,i): -|gradW_0s|/|r_0s|, gradW: kernel gradient (cubic spline);
-!    Thus gradW = |gradW_0s| * (gradW_0s/|gradW_0s|) = - kernel_fw*rag, 
-!    rag=-(x_s-x_0) is aligned with gradW; "s" is a semi-particle.
+! Kernel function neighbouring array (wall neighbours), 
+! kernel_fw(NMAXPARTJ*PARTICLEBUFFER)
 double precision,         dimension(:,:),  allocatable :: kernel_fw
 ! Relative distances from wall particles: -r_0a, 
 ! rag_fw(components,NMAXPARTJ*PARTICLEBUFFER)
-double precision,         dimension(:,:),  allocatable :: rag_fw
-! Velocity gradient in VSL, projected along the wall element normal (DB-SPH)
-double precision,         dimension(:,:),  allocatable :: grad_vel_VSL_fw
-! grad_vel_VSL_fw(components,NMAXPARTJ*PARTICLEBUFFER) 
+double precision,         dimension(:,:),  allocatable :: rag_fw  
 ! neighbouring arrays for body dynamics
 ! neighbouring arrays of the body particles 
 ! (body particle - fluid particle interactions; 
diff --git a/src/Modules/Hybrid_allocation_module.f90 b/src/Modules/Hybrid_allocation_module.f90
index 2431994..ee9b1d3 100755
--- a/src/Modules/Hybrid_allocation_module.f90
+++ b/src/Modules/Hybrid_allocation_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
-
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
+
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -25,6 +24,7 @@
 ! Description: Module to define derived types of both dynamically and statically allocated variables. (Di Monaco et al., 2011,
 !              EACFM; Manenti et al., 2012; JHE; Amicarelli et al., 2013, IJNME; Amicarelli et al., 2015, CAF)                    
 !----------------------------------------------------------------------------------------------------------------------------------
+
 module Hybrid_allocation_module
 use Static_allocation_module
 type TyGlobal
@@ -84,7 +84,7 @@ type TyGlobal
    double precision :: coord(3,2) ! Coordinates of 2 vertices of a diagonal 
                                   ! of the parallelepiped domain                       
    character(4)     :: tipo
-   character(100)    :: file
+   character(80)    :: file
    character(1)     :: Psurf 
    character(1)     :: RandomPos ! IC particle distribution noise. "r": slight 
                                  ! white noise is added, otherwise nothing.  
@@ -131,8 +131,7 @@ type TyParticle
    integer(4)       :: icol ! Colour 
    integer(4)       :: imed ! Fluid ID                          
    integer(4)       :: FS ! Free Surface (0,3: no free surface; 1,2: free 
-                          ! surface) (2,3: deactivated for Shep evolution) 
-   integer(4)       :: laminar_flag ! Laminar flag (for bed-load transport)                           
+                          ! surface) (2,3: deactivated for Shep evolution)                            
    double precision :: densass                        
    double precision :: mass ! Mass                          
    double precision :: dens ! Density                          
@@ -175,8 +174,6 @@ type TyParticle
    double precision :: dShep ! Lagrangian derivative of Shepard 
                              ! coefficient 
    double precision :: sigma ! Discrete Shepard coefficient
-   double precision :: sigma_same_fluid ! Discrete Shepard coefficient involving 
-                                        ! neighbours of the same fluid
    double precision :: Gamma ! Integral Shepard coefficient
    double precision :: Gamma_last_active ! Last value of Gamma before FS=3
    double precision :: dens_init_err ! Initial difference between SPH 
@@ -254,25 +251,15 @@ type TyParticle_w
                                          ! at maximum)
    integer(4)       :: wet ! =1 for wet wall particle (distance from fluid 
                            ! particle smaller than 1.3dx)
-   integer(4)       :: surface_mesh_file_ID ! ID of the surface mesh file
    double precision :: dens ! Density
    double precision :: pres ! Pressure
    double precision :: weight ! Area(3D)/length(2D) of the wall element 
    double precision :: mass ! Mass of the semi-particle
    double precision :: k_d ! Depth coefficient
    double precision :: volume ! Semi-particle volume (area in 2D)
-   double precision :: sigma ! Discrete Shepard coefficient of the wall elements
-                             ! depending on fluid particles (not on 
-                             ! semi-particles)
-   double precision :: kin_visc_semi_part ! Kinematic viscosity of the 
-                                          ! semi-particle
    double precision :: normal(3) ! Normal
    double precision :: coord(3) ! Position
    double precision :: vel(3) ! Velocity
-   double precision :: grad_vel_VSL_times_mu(3) ! Velocity gradient in VSL 
-                                                ! (projected along the wall 
-                                                ! element normal) times the 
-                                                ! shear viscosity
 end type TyParticle_w
 
 ! Body elements
@@ -339,12 +326,6 @@ end type body_particle
 
 ! Zone
 type TyZone
-   logical          :: DBSPH_fictitious_reservoir_flag ! .true.(DB-SPH 
-                                                       ! fictitious fluid 
-                                                       ! particles to complete 
-                                                       ! the kernel support at 
-                                                       ! free surface in 
-                                                       ! pre-processing)
    integer(4)       :: ipool 
    integer(4)       :: npoints
    integer(4)       :: icol ! Particle colour or number of vertical strips
@@ -479,12 +460,12 @@ type TyBoundarySide
                                                ! neighbouring particles
    double precision :: angle
    double precision :: velocity(1:SPACEDIM) ! Velocity
-   double precision :: T(1:SPACEDIM,1:SPACEDIM)  ! Direction cosines of the 
+   double precision :: T(1:SPACEDIM, 1:SPACEDIM) ! Direction cosines of the 
                                                  ! local reference system of 
                                                  ! the boundary (the last one
                                                  ! is the normal)
-   double precision :: R(1:SPACEDIM,1:SPACEDIM)      
-   double precision :: RN(1:SPACEDIM,1:SPACEDIM)
+   double precision :: R(1:SPACEDIM, 1:SPACEDIM)      
+   double precision :: RN(1:SPACEDIM, 1:SPACEDIM)
    character(4)     :: tipo ! type: "FIXEd", "PERImeter", "SOURce"(,"TAPIs",  
                             ! "LEVEl", "FLOW", "VELOcity", "CRITic", "OPEN")
 end type TyBoundarySide
@@ -656,8 +637,6 @@ end type
 
 ! Surface mesh for DB-SPH boundaries
 type DBSPH_surf_mesh_der_type 
-! ID of the surface mesh file
-   integer(4),allocatable,dimension(:)            :: surface_mesh_file_ID
 ! List of vertices of the surface mesh
    type(vertex_der_type),allocatable,dimension(:) :: vertices  
 ! List of faces (both 3D and 2D)
@@ -676,14 +655,12 @@ type DBSPH_der_type
    integer(4)        :: n_monitor_regions ! Number of monitoring regions 
                                           ! (0 or 1) to estimate the Force
                                           ! along x-direction 
+   integer(4)        :: n_kinematics_records ! Number of records for imposed
+                                             ! kinematics
    integer(4)        :: n_inlet ! Number of inlet sections (to impose DBSPH 
                                 ! inlet BC)
    integer(4)        :: n_outlet ! Number of outlet sections (to impose 
                                  ! DBSPH outlet BC)
-   integer(4)        :: ply_n_face_vert ! Number of vertices for each surface 
-                                        ! mesh face in the .ply input files 
-   integer(4)        :: surface_mesh_files ! number of files of the DBSPH 
-                                           ! surface meshes
    double precision  :: dx_dxw ! Ratio between the fluid and the 
                                ! semi-particle sizes
    double precision  :: k_w ! Coefficient to compute semi-particle volumes
@@ -691,14 +668,9 @@ type DBSPH_der_type
    double precision  :: monitor_region(6) ! (xmin,xmax,ymin,xmax,zmin,zmax)
                                           ! to detect the monitoring region
 ! IDs of the monitoring points
-   integer(4),allocatable,dimension(:) :: monitor_IDs
-! Number of records for imposed kinematics (surface_mesh_files,n_records)     
-   integer(4),allocatable,dimension(:) :: n_kinematics_records 
-! rotation_centre(surface_mesh_files,3): centre of rotation for DB-SPH frontiers
-   double precision,dimension(:,:),allocatable :: rotation_centre 
-! Array for the imposed kinematics of the DBSPH surface elements 
-! (surface_mesh_files,n_records,4)
-   double precision,dimension(:,:,:),allocatable :: kinematics 
+   integer(4),allocatable,dimension(:) :: monitor_IDs     
+! Array for the imposed kinematics of the DBSPH surface elements (n_records,4)
+   double precision,dimension(:,:),allocatable :: kinematics 
 ! Array for the inlet sections useful to DB-SPH inlet BC (n_records,10): 
 ! positions, normal, velocity, length
    double precision,dimension(:,:),allocatable :: inlet_sections 
@@ -716,6 +688,6 @@ type (TyParticle)   :: PgZero
 type (Tytime_stage) :: ts_pgZero
 type (TyQ_section)  :: Q_sections
 type (TyGranular_flows_options) Granular_flows_options
-type (DBSPH_der_type) :: DBSPH
+type(DBSPH_der_type) :: DBSPH
 
 end module Hybrid_allocation_module
diff --git a/src/Modules/I_O_ENG_module.f90 b/src/Modules/I_O_ENG_module.f90
index 6fe8b3d..199e6a5 100755
--- a/src/Modules/I_O_ENG_module.f90
+++ b/src/Modules/I_O_ENG_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Modules/I_O_ITA_module.f90 b/src/Modules/I_O_ITA_module.f90
index 3ebc331..993ea28 100755
--- a/src/Modules/I_O_ITA_module.f90
+++ b/src/Modules/I_O_ITA_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Modules/I_O_diagnostic_module.f90 b/src/Modules/I_O_diagnostic_module.f90
index 4615391..2535b13 100755
--- a/src/Modules/I_O_diagnostic_module.f90
+++ b/src/Modules/I_O_diagnostic_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -27,7 +26,7 @@
 
 module I_O_diagnostic_module
 interface 
-   subroutine diagnostic(arg1,arg2,arg3)
+   subroutine diagnostic (arg1,arg2,arg3)
       use Static_allocation_module
       integer(4),intent(in) :: arg1
       integer(4),intent(in),optional :: arg2
diff --git a/src/Modules/I_O_file_module.f90 b/src/Modules/I_O_file_module.f90
index 6022a2d..238ed0c 100755
--- a/src/Modules/I_O_file_module.f90
+++ b/src/Modules/I_O_file_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -31,7 +30,7 @@ integer(4) :: nscr = 0 ! Screen
 integer(4) :: ninp = 11 ! Input
 integer(4) :: nout = 12 ! Log 
 integer(4) :: nres = 21 ! Results  
-integer(4) :: nsav = 22 ! Restart file 
+integer(4) :: nsav = 22 ! Restart 
 integer(4) :: nplb = 23 ! Free surface 
 integer(4) :: nfro = 24 ! Fluid front 
 integer(4) :: ncpt = 25 ! Monitoring lines/points 
diff --git a/src/Modules/I_O_language_module.f90 b/src/Modules/I_O_language_module.f90
index 0bd8457..76d22c2 100755
--- a/src/Modules/I_O_language_module.f90
+++ b/src/Modules/I_O_language_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Modules/SA_SPH_module.f90 b/src/Modules/SA_SPH_module.f90
index da1966e..f781b10 100755
--- a/src/Modules/SA_SPH_module.f90
+++ b/src/Modules/SA_SPH_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Modules/Static_allocation_module.f90 b/src/Modules/Static_allocation_module.f90
index 00b0174..fe0e4d2 100755
--- a/src/Modules/Static_allocation_module.f90
+++ b/src/Modules/Static_allocation_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -34,7 +33,7 @@ integer(4),public,parameter :: MAXOPENSIDES = 10
 integer(4),public,parameter :: MAXOPENFACES = 50
 integer(4),public,parameter :: MAXPARTLINE = 2000
 integer(4),public,parameter :: LIMCLOSEBOUNDSIDES = 2
-integer(4),public,parameter :: MAXFACENODES = 6
+integer(4),public,parameter :: MAXFACENODES = 4
 integer(4),public,parameter :: NUMCOLS_BIT = 5
 integer(4),public,parameter :: NUMROWS_BIT = 22
 integer(4),public,parameter :: INT_KERNELTABLE = 40
@@ -148,7 +147,6 @@ double precision :: doublesquareh ! doubleh * doubleh
 double precision :: cubich ! Domain%h*Domain%h*Domain%h
 double precision :: unosuh ! 1./Domain%h
 double precision :: unosusquareh ! 1./(Domain%h*Domain%h)
-
 double precision :: dx_dxbodies ! Ratio between fluid particle and body
                                 ! particle size 
 ! Indices of cells that must be considered around the current one 
@@ -159,7 +157,7 @@ integer(4),dimension(0:3,2) :: icoordp ! Pointer for coordinate location 2D or
                                        ! in the main program for compatibility
                                        ! with xlf90
 character(len=8),parameter :: acode = "SPHERA  "
-character(len=8),parameter :: version = "8.0   "
+character(len=8),parameter :: version = "7.2   "
 character(255) :: nomecaso, nomecas2
 character(1),dimension(0:3) :: xyzlabel = (/ "T", "X", "Y", "Z" /)  
 character(4),dimension(3) :: ncordlabel = (/ "    ", "(2D)", "(3D)" /)  
@@ -170,6 +168,6 @@ character(255) :: nomefileerr ! File name for error file in erosion model
 character(8) :: modelloerosione ! type of erosion criterion (shields, mohr)
 ! "original" or "euristic"
 character(len=8) :: dt_opt = "original" 
-character(100),dimension(MAXTIT) :: title  
+character(80),dimension(MAXTIT) :: title  
 end module
 
diff --git a/src/Modules/Time_module.f90 b/src/Modules/Time_module.f90
index c6c0d81..47947d6 100755
--- a/src/Modules/Time_module.f90
+++ b/src/Modules/Time_module.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/CalcVarLength.f90 b/src/Neighbouring_Search/CalcVarLength.f90
index 9e5e2b4..36b3175 100644
--- a/src/Neighbouring_Search/CalcVarLength.f90
+++ b/src/Neighbouring_Search/CalcVarLength.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -67,15 +66,9 @@ nPartIntorno = 0
 ind_interfaces = 0
 if ((Domain%tipo=="bsph").and.(nag>0)) then
    nPartIntorno_fw = 0
-   grad_vel_VSL_fw = 0.d0
-   allocate(bounded(nag))
+   allocate (bounded(nag))
    bounded = 0
-   allocate(dShep_old(nag))
-   pg_w(:)%sigma = 0.d0
-   pg_w(:)%kin_visc_semi_part = 0.d0
-   pg_w(:)%grad_vel_VSL_times_mu(1) = 0.d0
-   pg_w(:)%grad_vel_VSL_times_mu(2) = 0.d0
-   pg_w(:)%grad_vel_VSL_times_mu(3) = 0.d0
+   allocate (dShep_old(nag))
 endif
 if (n_bodies>0) then 
    nPartIntorno_bp_f = 0
@@ -95,7 +88,7 @@ endif
 !$omp shared(Partintorno,PartKernel,ke_coef,kacl_coef,Doubleh,DoubleSquareh)   &
 !$omp shared(squareh,nomsub,ncord,eta,eta2,nout,nscr,erosione,ind_interfaces)  &
 !$omp shared(DBSPH,pg_w,Icont_w,Npartord_w,rag_fw,nPartIntorno_fw)             &
-!$omp shared(Partintorno_fw,kernel_fw,dShep_old,Granular_flows_options,NMedium)
+!$omp shared(Partintorno_fw,kernel_fw,dShep_old,Granular_flows_options)
 loop_nag: do npi=1,nag
    if (Domain%tipo=="bsph") then
       pg(npi)%rhoSPH_old = pg(npi)%rhoSPH_new
@@ -103,7 +96,6 @@ loop_nag: do npi=1,nag
       dShep_old(npi) = pg(npi)%dShep
       pg(npi)%dShep = zero 
       pg(npi)%sigma = zero 
-      pg(npi)%sigma_same_fluid = zero
       pg(npi)%FS = 0
       pg(npi)%DBSPH_inlet_ID = 0
       pg(npi)%DBSPH_outlet_ID = 0
@@ -230,14 +222,8 @@ loop_nag: do npi=1,nag
             if (Domain%tipo=="bsph") then
                pg(npi)%sigma = pg(npi)%sigma + pg(npj)%mass *                  &
                                PartKernel(4,npartint) / pg(npj)%dens 
-               if (pg(npi)%imed==pg(npj)%imed) then 
-                  pg(npi)%rhoSPH_new = pg(npi)%rhoSPH_new + pg(npj)%mass *     &
-                                       PartKernel(4,npartint)
-                  pg(npi)%sigma_same_fluid = pg(npi)%sigma_same_fluid +        &
-                                             pg(npj)%mass *                    &
-                                             PartKernel(4,npartint) /          &
-                                             pg(npj)%dens
-               endif
+               pg(npi)%rhoSPH_new = pg(npi)%rhoSPH_new + pg(npj)%mass *        &
+                                    PartKernel(4,npartint)
             endif
 ! Searching for the nearest fluid/mixture SPH particle 
             if (erosione) then
@@ -344,11 +330,9 @@ loop_nag: do npi=1,nag
                   endif 
                   kernel_fw(2,npartint) = gradmod * ke_coef * denom
                   pg(npi)%sigma = pg(npi)%sigma +  pg_w(npj)%mass *            &
-                                  kernel_fw(1,npartint) / pg_w(npj)%dens
-                  if (NMedium==1) then                 
-                     pg(npi)%rhoSPH_new = pg(npi)%rhoSPH_new + pg_w(npj)%mass *&
-                                          kernel_fw(1,npartint)
-                  endif
+                                  kernel_fw(1,npartint) / pg_w(npj)%dens 
+                  pg(npi)%rhoSPH_new = pg(npi)%rhoSPH_new + pg_w(npj)%mass *   &
+                                       kernel_fw(1,npartint)
 ! Gallati anti-cluster kernel, interesting test: start
 ! kernel_fw(3,npartint) =(5.d0/(16.d0*PIGRECO*Domain%h**2))*((2.d0-rij_su_h)**3) 
 ! kernel_fw(4,npartint) = (-12.0d0 - 3.0d0 * rij_su_h_quad + 12.0d0 * rij_su_h)&
@@ -363,7 +347,6 @@ loop_nag: do npi=1,nag
 !    (rij_su_h/2.d0))
 ! if (rij_su_h/=0.d0) kernel_fw(2,npartint) = kernel_fw(2,npartint) * denom
 ! WendlandC4 kernel, interesting test: end
-                  call DBSPH_velocity_gradients_VSL_SNBL(npi,npj,npartint)
                enddo loop_fw
             endif
          enddo loop_krang      
@@ -524,7 +507,7 @@ if (Domain%tipo=="bsph") then
             else
                pg(npi)%Gamma = pg(npi)%sigma
                pg(npi)%Gamma = min (pg(npi)%Gamma,one)    
-         endif
+          endif
       endif
       if (it_corrente>-2) then
          min_sigma_Gamma = min((pg(npi)%sigma+0.05),pg(npi)%Gamma)
@@ -538,20 +521,16 @@ if (Domain%tipo=="bsph") then
          endif
          if (pg(npi)%rhoSPH_old==zero) then
             pg(npi)%DensShep = pg(npi)%rhoSPH_new * pg(npi)%Gamma
-            if (NMedium==1) then
-               if (pg(npi)%FS ==1) then
-                  pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%sigma
-                  else
-                     pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%Gamma
-               endif
-               elseif(NMedium>1) then
-                  pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%sigma_same_fluid
+            if (pg(npi)%FS ==1) then
+               pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%sigma
+               else
+                  pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%Gamma
             endif
          endif
       endif
    enddo
-   if (allocated(bounded)) deallocate(bounded)
-   if (allocated(dShep_old)) deallocate(dShep_old)
+   if (allocated(bounded)) deallocate (bounded)
+   if (allocated(dShep_old)) deallocate (dShep_old)
 endif 
 ! SPH parameters for body transport in fluid flows
 if (n_bodies>0) then
diff --git a/src/Neighbouring_Search/CellIndices.f90 b/src/Neighbouring_Search/CellIndices.f90
index 24eb8e7..bb40b0a 100644
--- a/src/Neighbouring_Search/CellIndices.f90
+++ b/src/Neighbouring_Search/CellIndices.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/CellNumber.f90 b/src/Neighbouring_Search/CellNumber.f90
index 4a89d8f..804ba1d 100644
--- a/src/Neighbouring_Search/CellNumber.f90
+++ b/src/Neighbouring_Search/CellNumber.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/CreaGrid.f90 b/src/Neighbouring_Search/CreaGrid.f90
index cb88079..33cf117 100644
--- a/src/Neighbouring_Search/CreaGrid.f90
+++ b/src/Neighbouring_Search/CreaGrid.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -79,7 +78,7 @@ write (nout,'(1x,a,3i8)') " Number of grid in x, y, z directions : ",          &
 write (nout,'(1x,a,i10)') " Number of total grid : ",Grid%nmax
 write (nout,'(1x,a)') " "
 ! Allocation of a 2D matrix to detect free surface (erosion criterion)
-allocate(ind_interfaces(Grid%ncd(1),Grid%ncd(2),4), stat = ier)
+allocate (ind_interfaces(Grid%ncd(1),Grid%ncd(2),4), stat = ier)
 if (ier/=0) then
    write (nout,'(1x,a,i2)')                                                    &
       "    Array ind_interfaces not allocated. Error code: ",ier
diff --git a/src/Neighbouring_Search/InterFix.f90 b/src/Neighbouring_Search/InterFix.f90
index 8edf015..6da9cb9 100644
--- a/src/Neighbouring_Search/InterFix.f90
+++ b/src/Neighbouring_Search/InterFix.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/OrdGrid1.f90 b/src/Neighbouring_Search/OrdGrid1.f90
index 8dedcff..f0afcaf 100644
--- a/src/Neighbouring_Search/OrdGrid1.f90
+++ b/src/Neighbouring_Search/OrdGrid1.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/ParticleCellNumber.f90 b/src/Neighbouring_Search/ParticleCellNumber.f90
index c0873b7..7e02c37 100644
--- a/src/Neighbouring_Search/ParticleCellNumber.f90
+++ b/src/Neighbouring_Search/ParticleCellNumber.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/SearchforParticleZone_3D.f90 b/src/Neighbouring_Search/SearchforParticleZone_3D.f90
index 0f6c7c3..4c20715 100644
--- a/src/Neighbouring_Search/SearchforParticleZone_3D.f90
+++ b/src/Neighbouring_Search/SearchforParticleZone_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Neighbouring_Search/w.f90 b/src/Neighbouring_Search/w.f90
index 2e0b8f6..69b01d1 100644
--- a/src/Neighbouring_Search/w.f90
+++ b/src/Neighbouring_Search/w.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/CalcVarp.f90 b/src/Post_processing/CalcVarp.f90
index fc2a5fb..acbbeab 100644
--- a/src/Post_processing/CalcVarp.f90
+++ b/src/Post_processing/CalcVarp.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/CreateSectionPoints.f90 b/src/Post_processing/CreateSectionPoints.f90
index 089de17..26ea056 100644
--- a/src/Post_processing/CreateSectionPoints.f90
+++ b/src/Post_processing/CreateSectionPoints.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -43,7 +42,7 @@ character(1) :: opt
 integer(4) :: i,j,k,n,npse
 integer(4),dimension(3) :: Nmesh
 double precision,dimension(3) :: Cc,CcStart
-character(100), external :: lcase
+character(80), external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Post_processing/GetVarPart.f90 b/src/Post_processing/GetVarPart.f90
index 57a79cd..514769c 100644
--- a/src/Post_processing/GetVarPart.f90
+++ b/src/Post_processing/GetVarPart.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/Memo_Ctl.f90 b/src/Post_processing/Memo_Ctl.f90
index a866377..10ec74c 100644
--- a/src/Post_processing/Memo_Ctl.f90
+++ b/src/Post_processing/Memo_Ctl.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/Memo_Results.f90 b/src/Post_processing/Memo_Results.f90
index 1ba50f4..df45d1f 100644
--- a/src/Post_processing/Memo_Results.f90
+++ b/src/Post_processing/Memo_Results.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -42,7 +41,7 @@ double precision,intent(IN) :: dtvel
 character(6),intent(IN) :: str
 integer(4),intent(INOUT) :: it_memo
 integer(4),intent(INOUT) :: it_rest
-integer(4) :: nrecords,restartcode,i
+integer(4) :: nrecords, restartcode
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -66,10 +65,10 @@ if (index(str,'inizio')/=0) then
    if (NPartZone>0) nrecords = nrecords + 1
    if (NumBVertices>0) nrecords = nrecords + 1
    if (NumBSides>0) nrecords = nrecords + 1
-   write(nres) version,nrecords
-   write(nres) Ncord,Nag,NMedium,NPartZone,NumVertici,NumFacce,NumTratti,      &
+   write(nres) nrecords
+   write(nres) Ncord,Nag,NMedium,NPartZone,NumVertici, NumFacce, NumTratti,    &
       NumBVertices,NumBSides,NPointst,NPoints,NPointsl,NPointse,NLines,        &
-      NSections,GCBFVecDim,doubleh
+      NSections, GCBFVecDim,doubleh
    write(nres) domain
    write(nres) grid
    write(nres) Med(1:NMedium)
@@ -79,11 +78,7 @@ if (index(str,'inizio')/=0) then
    if (NumTratti>0) write(nres) Tratto(1:NumTratti)
    if (NPartZone>0) write(nres) Partz(1:NPartZone)
    if (NumBVertices>0) write(nres) BoundaryVertex(1:NumBVertices)
-   if (NumBSides>1) then
-      write(nres) BoundarySide(1:NumBSides)
-      else
-         write(nres) BoundarySide(1)
-   endif
+   if (NumBSides>0) write(nres) BoundarySide(1:NumBSides)
    flush(nres)
    write(nout,'(a,i10,a,f15.5)')                                               &
 " ----------------------------------------------------------------------------"
@@ -91,6 +86,12 @@ if (index(str,'inizio')/=0) then
       it,"   time: ",tempo
    write(nout,'(a,i10,a,f15.5)')                                               &
 " ----------------------------------------------------------------------------"
+   write(nscr,'(a,i10,a,f15.5)')                                               &
+" ----------------------------------------------------------------------------"
+   write(nscr,'(a,i10,a,f15.5)') " Results and restart heading saved   step: ",&
+      it,"   time: ",tempo
+   write(nscr,'(a,i10,a,f15.5)')                                               &
+" ----------------------------------------------------------------------------"
 endif
 if (Domain%irest_fr>0) then
    if (mod(it,Domain%irest_fr)==0) then
@@ -112,28 +113,10 @@ if (Domain%imemo_fr>0) then
       endif
 endif
 if ((it_rest==it).or.(index(str,'inizio')/=0).or.(index(str,'fine')/=0)) then
-! If restartcode=1, then to save the whole arrays "pg","pg_w"
+! If restartcode=1, then to save the whole array "pg"
    restartcode = 1 
    write(nres) it,tempo,dt,nag,ncord,restartcode
    write(nres) pg(1:nag)
-   if (allocated(pg_w)) write(nres)                                            &
-      pg_w(1:DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet)
-   do i=1,n_bodies
-   write(nres) body_arr(i)%npart,body_arr(i)%Ic_imposed,                       &
-      body_arr(i)%n_elem,body_arr(i)%imposed_kinematics,                       &
-      body_arr(i)%n_records,body_arr%mass,body_arr(i)%umax,                    &
-      body_arr(i)%pmax,body_arr(i)%x_CM,                                       &
-      body_arr(i)%alfa,body_arr(i)%x_rotC,                                     &
-      body_arr(i)%u_CM,body_arr(i)%omega,                                      &
-      body_arr(i)%Force,body_arr(i)%Moment,                                    &
-      body_arr(i)%Ic,body_arr(i)%Ic_inv,                                       &
-      body_arr(i)%body_kinematics,body_arr(i)%elem
-   enddo
-   if (allocated(bp_arr)) write(nres) bp_arr(1:n_body_part)
-   if (allocated(surf_body_part)) write(nres) surf_body_part(1:n_surf_body_part)
-   if (allocated(Z_fluid_max)) write(nres)                                     &
-      Z_fluid_max(1:Grid%ncd(1)*Grid%ncd(2))
-   if (allocated(q_max)) write(nres) q_max(1:Grid%ncd(1)*Grid%ncd(2))
    flush(nres)
    if (index(str,'inizio')==0) then
       write(nout,'(a,i10,a,f15.5)')                                            &
@@ -142,6 +125,12 @@ if ((it_rest==it).or.(index(str,'inizio')/=0).or.(index(str,'fine')/=0)) then
          "   time: ",tempo
       write(nout,'(a,i10,a,f15.5)')                                            &
       " --------------------------------------------------------------------"
+      write(nscr,'(a,i10,a,f15.5)')                                            &
+      " --------------------------------------------------------------------"
+      write(nscr,'(a,i10,a,f15.5)') " Results and restart saved   step: ",it,  &
+         "   time: ",tempo
+      write(nscr,'(a,i10,a,f15.5)')                                            &
+      " --------------------------------------------------------------------"
    endif
    elseif (it_memo==it) then
 ! If restartcode=0, then to save "pg" only for visualizations
diff --git a/src/Post_processing/Print_Results.f90 b/src/Post_processing/Print_Results.f90
index e1c991b..ab46680 100644
--- a/src/Post_processing/Print_Results.f90
+++ b/src/Post_processing/Print_Results.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -43,12 +42,12 @@ integer(4),intent(INOUT) :: it_print
 integer(4) :: npi,i,codice,dummy,OpCountot,SpCountot,minlocvelo,maxlocvelo,nbi
 integer(4) :: minlocvelx,maxlocvelx,minlocvely,maxlocvely,minlocvelz,maxlocvelz
 integer(4) :: minlocpres,maxlocpres,minlocdens,maxlocdens,minlocvisc,maxlocvisc
-integer(4) :: minloccodi,maxloccodi,minlocInEn,maxlocInEn,blt_laminar_flag_count
+integer(4) :: minloccodi,maxloccodi,minlocInEn,maxlocInEn
 integer(4) :: minlocvelo_w,maxlocvelo_w,minlocpres_w,maxlocpres_w
 integer(4) :: minlocvelo_bp,maxlocvelo_bp,minlocpres_bp,maxlocpres_bp
 integer(4) :: minlocvelo_body,maxlocvelo_body,minlocomega_body,maxlocomega_body
 integer(4) :: minloctau_tauc,maxloctau_tauc,minlock_BetaGamma,maxlock_BetaGamma
-integer(4) :: minlocu_star,maxlocu_star,laminar_flag_count,mixture_count
+integer(4) :: minlocu_star,maxlocu_star
 integer(4) :: machine_Julian_day,machine_hour,machine_minute,machine_second
 double precision :: minvelx,maxvelx,minvely,maxvely,minvelz,maxvelz,minpres
 double precision :: maxpres,mindens,maxdens,minvisc,maxvisc,mincodi,maxcodi
@@ -57,7 +56,7 @@ double precision :: maxpres_w,minvelo_bp,maxvelo_bp,minpres_bp,maxpres_bp
 double precision  :: minvelo_body,maxvelo_body,minomega_body,maxomega_body
 double precision  :: modomega,mintau_tauc,maxtau_tauc,mink_BetaGamma
 double precision  :: maxk_BetaGamma,minu_star,maxu_star,time_elapsed_tot_est
-double precision  :: minvelo,maxvelo,laminar_flag_perc,blt_laminar_flag_perc
+double precision  :: minvelo,maxvelo
 integer(4),dimension(1) :: pos
 character(len=42) :: fmt100="(a,i10,a,e18.9,a,e18.9,a,i  ,a,i  ,a,i  )"
 character(len=47) :: fmt101="(a,2(1x,f10.4,1x,a,1x,i6,1x,a,3(1x,f8.2,1x,a)))"
@@ -83,9 +82,6 @@ if ((index(str,'inizio')/=0).or.(index(str,'fine')/=0)) then
    else
        if ((codice==0).or.(mod(it,codice)/=0)) return
 endif
-laminar_flag_count = 0
-blt_laminar_flag_count = 0
-mixture_count = 0
 !------------------------
 ! Statements
 !------------------------
@@ -93,7 +89,7 @@ mixture_count = 0
 dummy = count(pg(1:nag)%cella>0)
 write(stringa,'(i12)') dummy
 i = len_trim(adjustl(stringa))
-write(coppia,'(i2)') i
+write (coppia,'(i2)') i
 fmt100(27:28) = adjustl(coppia)
 OpCountot = 0
 SpCountot = 0
@@ -103,11 +99,11 @@ do i=1,NMedium
 enddo
 write(stringa,'(i12)') OpCountot
 i = len_trim(adjustl(stringa))
-write(coppia,'(i2)') i
+write (coppia,'(i2)') i
 fmt100(33:34) = adjustl(coppia)
 write(stringa,'(i12)') SpCountot
 i = len_trim(adjustl(stringa))
-write(coppia,'(i2)') i
+write (coppia,'(i2)') i
 fmt100(39:40) = adjustl(coppia)
 if (nag>0) then
 ! Searching for the minimum and the maximum particle/element values 
@@ -149,17 +145,7 @@ if (nag>0) then
          maxvelo = modvel
          maxlocvelo = npi
       endif
-      if (pg(npi)%laminar_flag==1) then
-         laminar_flag_count = laminar_flag_count + 1
-         if (Med(pg(npi)%imed)%tipo=="granular") blt_laminar_flag_count =      &
-            blt_laminar_flag_count + 1
-      endif
-      if (Med(pg(npi)%imed)%tipo=="granular") then
-         mixture_count = mixture_count + 1 
-      endif
    enddo
-   laminar_flag_perc = (100.d0 * laminar_flag_count) / nag
-   blt_laminar_flag_perc = (100.d0 * blt_laminar_flag_count) / mixture_count
    minvelo = Dsqrt(minvelo)
    maxvelo = Dsqrt(maxvelo)
    minvelx = minval(pg(1:nag)%vel(1),mask=pg(1:nag)%cella/=0)
@@ -346,8 +332,8 @@ if (nag>0) then
       endif   
    endif 
 ! Final prints
-   write(nout,'(128("."))') 
-   write(nout,fmt100) " Print at:     | step: ",it," | time: ",tempo," | Dt: " &
+   write (nout,'(128("."))') 
+   write (nout,fmt100) " Print at:     | step: ",it," | time: ",tempo," | Dt: "&
       ,dt," | Particles: inside ",dummy," gone out ",OpCountot," gone in ",    &
       SpCountot
    if (exetype=="linux") then
@@ -357,7 +343,7 @@ if (nag>0) then
                              Domain%t_pre_iter) * 1.d0) / (3600.0d0)  
       if (time_elapsed_tot_est<0.d0) time_elapsed_tot_est =                    &
          time_elapsed_tot_est + 366.d0 * 24.d0 * 60.d0 * 60.d0   
-      write(nout,'(a,g12.5,a,g12.5,a)') "Elapsed time: ",time_elapsed_tot_est, &
+      write (nout,'(a,g12.5,a,g12.5,a)') "Elapsed time: ",time_elapsed_tot_est,&
          " hours = ",time_elapsed_tot_est/24.d0," days."
       time_elapsed_tot_est = ((Domain%t_pre_iter-Domain%t0) +                  &
                              (machine_Julian_day * 24 * 60 * 60 + machine_hour &
@@ -366,105 +352,171 @@ if (nag>0) then
                              (3600.0d0)  
       if (time_elapsed_tot_est<0.d0) time_elapsed_tot_est =                    &
          time_elapsed_tot_est + 366.d0 * 24.d0 * 60.d0 * 60.d0  
-      write(nout,'(a,g12.5,a,g12.5,a)')                                        &
+      write (nout,'(a,g12.5,a,g12.5,a)')                                       &
          "Elapsed time (at the end of the simulation, real time estimation): ",&
          time_elapsed_tot_est," hours = ",time_elapsed_tot_est/24.d0," days."
    endif
-   write(nout,fmt101)                                                          &
+   write (nout,fmt101)                                                         &
 " ............. |  Min. val. |Min.loc.| X coord. | Y coord. | Z coord. ||  Max. val. |Max.loc.| X coord. | Y coord. | Z coord. |"
-   write(nout,fmt101)                                                          &
+   write (nout,fmt101)                                                         &
       "  Tot velocity |",minvelo,"|",minlocvelo,"|",pg(minlocvelo)%coord(1),"|"&
       ,pg(minlocvelo)%coord(2),"|",pg(minlocvelo)%coord(3),"||",maxvelo,"|",   &
       maxlocvelo,"|",pg(maxlocvelo)%coord(1),"|",pg(maxlocvelo)%coord(2),"|",  &
       pg(maxlocvelo)%coord(3),"|"
-   write(nout,fmt101)                                                          &
+   write (nout,fmt101)                                                         &
       "  velocity x   |",minvelx,"|",minlocvelx,"|",pg(minlocvelx)%coord(1),"|"&
       ,pg(minlocvelx)%coord(2),"|",pg(minlocvelx)%coord(3),"||",maxvelx,"|",   &
       maxlocvelx,"|",pg(maxlocvelx)%coord(1),"|",pg(maxlocvelx)%coord(2),"|",  &
       pg(maxlocvelx)%coord(3),"|"
-   write(nout,fmt101)                                                          &
+   write (nout,fmt101)                                                         &
       "  velocity y   |",minvely,"|",minlocvely,"|",pg(minlocvely)%coord(1),"|"&
       ,pg(minlocvely)%coord(2),"|",pg(minlocvely)%coord(3),"||",maxvely,"|",   &
       maxlocvely,"|",pg(maxlocvely)%coord(1),"|",pg(maxlocvely)%coord(2),"|",  &
       pg(maxlocvely)%coord(3),"|"
-   write(nout,fmt101)                                                          &
+   write (nout,fmt101)                                                         &
       "  velocity z   |",minvelz,"|",minlocvelz,"|",pg(minlocvelz)%coord(1),"|"&
       ,pg(minlocvelz)%coord(2),"|",pg(minlocvelz)%coord(3),"||",maxvelz,"|",   &
       maxlocvelz,"|",pg(maxlocvelz)%coord(1),"|",pg(maxlocvelz)%coord(2),"|",  &
       pg(maxlocvelz)%coord(3),"|"
    if (esplosione) then
-      write(nout,fmt104)                                                       &
+      write (nout,fmt104)                                                      &
          "  pressure     |",minpres,"|",minlocpres,"|",pg(minlocpres)%coord(1),&
          "|",pg(minlocpres)%coord(2),"|",pg(minlocpres)%coord(3),              &
          "||",maxpres,"|",maxlocpres,"|",pg(maxlocpres)%coord(1),"|",          &
          pg(maxlocpres)%coord(2),"|",pg(maxlocpres)%coord(3),"|"
-      write(nout,fmt104)                                                       &
+      write (nout,fmt104)                                                      &
          "  Int.Energy   |",minInEn,"|",minlocInEn,"|",pg(minlocInEn)%coord(1),&
          "|",pg(minlocInEn)%coord(2),"|",pg(minlocInEn)%coord(3),"||",maxInEn, &
          "|",maxlocInEn,"|",pg(maxlocInEn)%coord(1),"|",pg(maxlocInEn)%coord(2)&
          ,"|",pg(maxlocInEn)%coord(3),"|"
-      write(nout,fmt104)                                                       &
+      write (nout,fmt104)                                                      &
          "  density      |",mindens,"|",minlocdens,"|",pg(minlocdens)%coord(1),&
          "|",pg(minlocdens)%coord(2),"|",pg(minlocdens)%coord(3),"||",maxdens, & 
          "|",maxlocdens,"|",pg(maxlocdens)%coord(1),"|",pg(maxlocdens)%coord(2)&
          ,"|",pg(maxlocdens)%coord(3),"|"
       else
-         write(nout,fmt102)                                                    &
+         write (nout,fmt102)                                                   &
             "  pressure     |",minpres,"|",minlocpres,"|",                     &
             pg(minlocpres)%coord(1),"|",pg(minlocpres)%coord(2),"|",           &
             pg(minlocpres)%coord(3),"||",maxpres,"|",maxlocpres,"|",           &
             pg(maxlocpres)%coord(1),"|",pg(maxlocpres)%coord(2),"|",           &
             pg(maxlocpres)%coord(3),"|"
-         write(nout,fmt102)                                                    &
+         write (nout,fmt102)                                                   &
             "  density      |",mindens,"|",minlocdens,"|",                     &
             pg(minlocdens)%coord(1),"|",pg(minlocdens)%coord(2),"|",           &
             pg(minlocdens)%coord(3),"||",maxdens,"|",maxlocdens,"|",           &
             pg(maxlocdens)%coord(1),"|",pg(maxlocdens)%coord(2),"|",           &
             pg(maxlocdens)%coord(3),"|"
    endif
-   write(nout,fmt105) "  viscosity    |",minvisc,"|",minlocvisc,"|",           &
+   write (nout,fmt105) "  viscosity    |",minvisc,"|",minlocvisc,"|",          &
       pg(minlocvisc)%coord(1),"|",pg(minlocvisc)%coord(2),"|",                 &
       pg(minlocvisc)%coord(3),"||",maxvisc,"|",maxlocvisc,"|",                 &
       pg(maxlocvisc)%coord(1),"|",pg(maxlocvisc)%coord(2),"|",                 &
       pg(maxlocvisc)%coord(3),"|"
    if (diffusione) then
-      write(nout,fmt103) "  coef.diff.   |",mincodi,"|",minloccodi,"|",        &
+      write (nout,fmt103) "  coef.diff.   |",mincodi,"|",minloccodi,"|",       &
       pg(minloccodi)%coord(1),"|",pg(minloccodi)%coord(2),"|",                 &
       pg(minloccodi)%coord(3),"||",maxcodi,"|",maxloccodi,"|",                 &
       pg(maxloccodi)%coord(1),"|",pg(maxloccodi)%coord(2),"|",                 &
       pg(maxloccodi)%coord(3),"|"
    endif
+   write (nscr,'(128("."))') 
+   write (nscr,fmt100) " Print at:     | step: ",it," | time: ",tempo," | Dt: "&
+      ,dt," | Particles: inside ",dummy," gone out ",OpCountot," gone in ",    &
+      SpCountot
+   write (nscr,fmt101)                                                         &
+" ............. |  Min. val. |Min.loc.| X coord. | Y coord. | Z coord. ||  Max. val. |Max.loc.| X coord. | Y coord. | Z coord. |"
+   write (nscr,fmt101) "  Tot velocity |",minvelo,"|",minlocvelo,"|",          &
+      pg(minlocvelo)%coord(1),"|",pg(minlocvelo)%coord(2),"|",                 &
+      pg(minlocvelo)%coord(3),"||",maxvelo,"|",maxlocvelo,"|",                 &
+      pg(maxlocvelo)%coord(1),"|",pg(maxlocvelo)%coord(2),"|",                 &
+      pg(maxlocvelo)%coord(3),"|"
+   write (nscr,fmt101) "  velocity x   |",minvelx,"|",minlocvelx,"|",          &
+      pg(minlocvelx)%coord(1),"|",pg(minlocvelx)%coord(2),"|",                 &
+      pg(minlocvelx)%coord(3),"||",maxvelx,"|",maxlocvelx,"|",                 &
+      pg(maxlocvelx)%coord(1),"|",pg(maxlocvelx)%coord(2),"|",                 &
+      pg(maxlocvelx)%coord(3),"|"
+   write (nscr,fmt101) "  velocity y   |",minvely,"|",minlocvely,"|",          &
+      pg(minlocvely)%coord(1),"|",pg(minlocvely)%coord(2),"|",                 &
+      pg(minlocvely)%coord(3),"||",maxvely,"|",maxlocvely,"|",                 &
+      pg(maxlocvely)%coord(1),"|",pg(maxlocvely)%coord(2),"|",                 &
+      pg(maxlocvely)%coord(3),"|"
+   write (nscr,fmt101) "  velocity z   |",minvelz,"|",minlocvelz,"|",          &
+      pg(minlocvelz)%coord(1),"|",pg(minlocvelz)%coord(2),"|",                 &
+      pg(minlocvelz)%coord(3),"||",maxvelz,"|",maxlocvelz,"|",                 &
+      pg(maxlocvelz)%coord(1),"|",pg(maxlocvelz)%coord(2),"|",                 &
+      pg(maxlocvelz)%coord(3),"|"
+   if (esplosione) then
+      write (nscr,fmt104) "  pressure     |",minpres,"|",minlocpres,"|",       &
+         pg(minlocpres)%coord(1),"|",pg(minlocpres)%coord(2),"|",              &
+         pg(minlocpres)%coord(3),"||",maxpres,"|",maxlocpres,"|",              &
+         pg(maxlocpres)%coord(1),"|",pg(maxlocpres)%coord(2),"|",              &
+         pg(maxlocpres)%coord(3),"|"
+      write (nscr,fmt104) "  Int.Energy   |",minInEn,"|",minlocInEn,"|",       &
+         pg(minlocInEn)%coord(1),"|",pg(minlocInEn)%coord(2),"|",              &
+         pg(minlocInEn)%coord(3),"||",maxInEn,"|",maxlocInEn,"|",              &
+         pg(maxlocInEn)%coord(1),"|",pg(maxlocInEn)%coord(2),"|",              &
+         pg(maxlocInEn)%coord(3),"|"
+      write (nscr,fmt104) "  density      |",mindens,"|",minlocdens,"|",       &
+         pg(minlocdens)%coord(1),"|",pg(minlocdens)%coord(2),"|",              &
+         pg(minlocdens)%coord(3),"||",maxdens,"|",maxlocdens,"|",              &
+         pg(maxlocdens)%coord(1),"|",pg(maxlocdens)%coord(2),"|",              &
+         pg(maxlocdens)%coord(3),"|"
+      else
+         write (nscr,fmt102) "  pressure     |",minpres,"|",minlocpres,"|",    &
+            pg(minlocpres)%coord(1),"|",pg(minlocpres)%coord(2),"|",           &
+            pg(minlocpres)%coord(3),"||",maxpres,"|",maxlocpres,"|",           &
+            pg(maxlocpres)%coord(1),"|",pg(maxlocpres)%coord(2),"|",           &
+            pg(maxlocpres)%coord(3),"|"
+         write (nscr,fmt101) "  density      |",mindens,"|",minlocdens,"|",    &
+            pg(minlocdens)%coord(1),"|",pg(minlocdens)%coord(2),"|",           &
+            pg(minlocdens)%coord(3),"||",maxdens,"|",maxlocdens,"|",           &
+            pg(maxlocdens)%coord(1),"|",pg(maxlocdens)%coord(2),"|",           &
+            pg(maxlocdens)%coord(3),"|"
+   endif
+   write (nscr,fmt105) "  viscosity    |",minvisc,"|",minlocvisc,"|",          &
+      pg(minlocvisc)%coord(1),"|",pg(minlocvisc)%coord(2),"|",                 &
+      pg(minlocvisc)%coord(3), "||",maxvisc,"|",maxlocvisc,"|",                &
+      pg(maxlocvisc)%coord(1),"|",pg(maxlocvisc)%coord(2),"|",                 &
+      pg(maxlocvisc)%coord(3),"|"
+   if (diffusione) then
+      write (nscr,fmt103) "  coef.diff.   |",mincodi,"|",minloccodi,"|",       &
+         pg(minloccodi)%coord(1),"|",pg(minloccodi)%coord(2),"|",              &
+         pg(minloccodi)%coord(3),"||",maxcodi,"|",maxloccodi,"|",              &
+         pg(maxloccodi)%coord(1),"|",pg(maxloccodi)%coord(2),"|",              &
+         pg(maxloccodi)%coord(3),"|"
+   endif
    if ((Domain%tipo=="bsph").and.(DBSPH%n_w>0)) then
-      write(nout,fmt101) "  Wall velocity|",minvelo_w,"|",minlocvelo_w,"|",    &
+      write (nout,fmt101) "  Wall velocity|",minvelo_w,"|",minlocvelo_w,"|",   &
          pg_w(minlocvelo_w)%coord(1),"|",pg_w(minlocvelo_w)%coord(2),"|",      &
          pg_w(minlocvelo_w)%coord(3),"||",maxvelo_w,"|",maxlocvelo_w,"|",      &
          pg_w(maxlocvelo_w)%coord(1),"|",pg_w(maxlocvelo_w)%coord(2),"|",      &
          pg_w(maxlocvelo_w)%coord(3),"|"
-      write(nout,fmt102) "  Wall pressure|",minpres_w,"|",minlocpres_w,"|",    &
+      write (nout,fmt102) "  Wall pressure|",minpres_w,"|",minlocpres_w,"|",   &
          pg_w(minlocpres_w)%coord(1),"|",pg_w(minlocpres_w)%coord(2),"|",      &
          pg_w(minlocpres_w)%coord(3),"||",maxpres_w,"|",maxlocpres_w,"|",      &
          pg_w(maxlocpres_w)%coord(1),"|",pg_w(maxlocpres_w)%coord(2),          &
          "|",pg_w(maxlocpres_w)%coord(3),"|"
    endif
    if (n_bodies>0) then
-      write(nout,fmt101) "Body part.vel. |",minvelo_bp,"|",minlocvelo_bp,"|",  &
+      write (nout,fmt101) "Body part.vel. |",minvelo_bp,"|",minlocvelo_bp,"|", &
          bp_arr(minlocvelo_bp)%pos(1),"|",bp_arr(minlocvelo_bp)%pos(2),"|",    &
          bp_arr(minlocvelo_bp)%pos(3),"||",maxvelo_bp,"|",maxlocvelo_bp,"|",   &
          bp_arr(maxlocvelo_bp)%pos(1),"|",bp_arr(maxlocvelo_bp)%pos(2),"|",    &
          bp_arr(maxlocvelo_bp)%pos(3),"|"
-      write(nout,fmt102) "Body part.pres.|",minpres_bp,"|",minlocpres_bp,"|",  &
+      write (nout,fmt102) "Body part.pres.|",minpres_bp,"|",minlocpres_bp,"|", &
          bp_arr(minlocpres_bp)%pos(1),"|",bp_arr(minlocpres_bp)%pos(2),"|",    &
          bp_arr(minlocpres_bp)%pos(3),"||",maxpres_bp,"|",maxlocpres_bp,"|",   &
          bp_arr(maxlocpres_bp)%pos(1),"|",bp_arr(maxlocpres_bp)%pos(2),"|",    &
          bp_arr(maxlocpres_bp)%pos(3),"|"
-      write(nout,fmt101) "Body velocity  |",minvelo_body,"|",minlocvelo_body,  &
+      write (nout,fmt101) "Body velocity  |",minvelo_body,"|",minlocvelo_body, &
          "|",body_arr(minlocvelo_body)%x_CM(1),"|",                            &
          body_arr(minlocvelo_body)%x_CM(2),"|",                                &
          body_arr(minlocvelo_body)%x_CM(3),"||",maxvelo_body,"|",              &
          maxlocvelo_body,"|",body_arr(maxlocvelo_body)%x_CM(1),"|",            &
          body_arr(maxlocvelo_body)%x_CM(2),"|",                                &
          body_arr(maxlocvelo_body)%x_CM(3),"|"
-      write(nout,fmt101) "Body omega     |",minomega_body,"|",                 & 
+      write (nout,fmt101) "Body omega     |",minomega_body,"|",                & 
          minlocomega_body,"|",body_arr(minlocomega_body)%x_CM(1),"|",          &
          body_arr(minlocomega_body)%x_CM(2),"|",                               &
          body_arr(minlocomega_body)%x_CM(3),"||",maxomega_body,"|",            &
@@ -474,18 +526,18 @@ if (nag>0) then
    endif
    if ((Granular_flows_options%erosion_flag.ne.1).and.                         &
       (Granular_flows_options%ID_erosion_criterion==1)) then
-      write(nout,fmt101) "tau_tauc       |",mintau_tauc,"|",minloctau_tauc,"|" &
+      write (nout,fmt101) "tau_tauc       |",mintau_tauc,"|",minloctau_tauc,"|"&
          ,pg(minloctau_tauc)%coord(1),"|",pg(minloctau_tauc)%coord(2),"|",     &
          pg(minloctau_tauc)%coord(3),"||",maxtau_tauc,"|",maxloctau_tauc,"|",  &
          pg(maxloctau_tauc)%coord(1),"|",pg(maxloctau_tauc)%coord(2),"|",      &
          pg(maxloctau_tauc)%coord(3),"|"
-      write(nout,fmt101) "u_star         |",minu_star,"|",minlocu_star,"|",    &
+      write (nout,fmt101) "u_star         |",minu_star,"|",minlocu_star,"|",   &
          pg(minlocu_star)%coord(1),"|",pg(minlocu_star)%coord(2),"|",          &
          pg(minlocu_star)%coord(3),"||",maxu_star,"|",maxlocu_star,"|",        &
          pg(maxlocu_star)%coord(1),"|",pg(maxlocu_star)%coord(2),"|",          &
          pg(maxlocu_star)%coord(3),"|"  
       if (Granular_flows_options%ID_erosion_criterion==1) then       
-         write(nout,fmt101) "k_BetaGamma    |",mink_BetaGamma,"|",             &
+         write (nout,fmt101) "k_BetaGamma    |",mink_BetaGamma,"|",            &
             minlock_BetaGamma,"|",pg(minlock_BetaGamma)%coord(1),"|",          &
             pg(minlock_BetaGamma)%coord(2),"|",pg(minlock_BetaGamma)%coord(3), &
             "||",maxk_BetaGamma,"|",maxlock_BetaGamma,"|",                     &
@@ -493,17 +545,10 @@ if (nag>0) then
             "|",pg(maxlock_BetaGamma)%coord(3),"|"
       endif   
    endif
-   write(nout,'(a,g12.3,a)') "The ",laminar_flag_perc,                         &
-"% of fluid particles needs the shear viscous term in the momentum equation. "
-   if (mixture_count>0) then
-      write(nout,*) "The total number of mixture particles is ",mixture_count,". "
-      write(nout,'(a,g12.3,a)') "The ",blt_laminar_flag_perc,                  &
-"% of mixture particles needs the shear viscous term in the momentum equation. "
-   endif
    else
-      write(nout,'(128("."))') 
-      write(nout,'(a)') "No particles inside the domain at the moment"
-      write(nout,'(128("."))') 
+      write (nout,'(128("."))') 
+      write (nout,'(a)') "No particles inside the domain at the moment"
+      write (nout,'(128("."))') 
 endif
 it_print = it
 !------------------------
diff --git a/src/Post_processing/Update_Zmax_at_grid_vert_columns.f90 b/src/Post_processing/Update_Zmax_at_grid_vert_columns.f90
index 4e2df17..0528199 100644
--- a/src/Post_processing/Update_Zmax_at_grid_vert_columns.f90
+++ b/src/Post_processing/Update_Zmax_at_grid_vert_columns.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/calc_pelo.f90 b/src/Post_processing/calc_pelo.f90
index 3a31fc5..5b2a66c 100644
--- a/src/Post_processing/calc_pelo.f90
+++ b/src/Post_processing/calc_pelo.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -49,7 +48,7 @@ double precision,dimension(3,nlines) :: pelolib
 !------------------------
 ! Allocations
 !------------------------
-allocate(PartCelnum(NMAXPARTJ),PartCel(NMAXPARTJ))
+allocate (PartCelnum(NMAXPARTJ),PartCel(NMAXPARTJ))
 !------------------------
 ! Initializations
 !------------------------
@@ -89,7 +88,7 @@ write (nplb,'(30g14.7)') tempo,pelolib
 !------------------------
 ! Deallocations
 !------------------------
-deallocate(PartCelnum,PartCel)
+deallocate (PartCelnum,PartCel)
 return
 end subroutine calc_pelo
 
diff --git a/src/Post_processing/result_converter.f90 b/src/Post_processing/result_converter.f90
index 427300c..81f5f1c 100644
--- a/src/Post_processing/result_converter.f90
+++ b/src/Post_processing/result_converter.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -70,6 +69,10 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 ' Warning! nblocchi>maxnumblock in subroutine result_converter.'
       write (nscr,'(a)')                                                       &
          '    Increase maxnumblock or decrease output frequency for vtu files.'
+      write (nout,'(a)')                                                       &
+' Warning: nblocchi>maxnumblock in subroutine result_converter.'
+      write (nout,'(a)')                                                       &
+         '     Increase maxnumblock or decrease output frequency for vtu files.'
       nblocchi = maxnumblock
    endif
    blocchi(nblocchi) = block
@@ -79,6 +82,8 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
    cargo = adjustl(cargo)
    filevtk =                                                                   &
 "VTKConverter_"//prefix(1:len_trim(prefix))//"_block_"//cargo(1:len_trim(cargo))//".vtu"
+   write(nscr,'(a)')                                                           &
+      "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
    write(nout,'(a)')                                                           &
       "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
    open(unit=unitvtk,file=filevtk,form='formatted',access='sequential',        &
@@ -97,7 +102,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 "case "//prefix(1:len_trim(prefix))//" * time "//cargo(1:len_trim(cargo))//" (s)"
 ! Coordinates 
    numpoints = count(pg(1:nag)%cella>0)
-   allocate(finger(numpoints))
+   allocate (finger(numpoints))
    k = 0
    do npi=1,nag
       if (pg(npi)%cella==0) cycle
@@ -198,7 +203,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
    write(unitvtk,'(a)') '      </DataArray>'
 ! Viscosity
    write(unitvtk,'(a)')                                                        &
-      '      <DataArray type="Float32" Name="Viscosity (m^2/s)" format="ascii" >'
+      '      <DataArray type="Float32" Name="Viscosity (mq/s)" format="ascii" >'
    do i=1,numpoints,16
       k1 = i
       k2 = k1 + 15
@@ -366,16 +371,6 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
       enddo
       write(unitvtk,'(a)') '      </DataArray>'
    endif 
-! laminar_flag
-   write(unitvtk,'(a)')                                                        &
-      '      <DataArray type="Int32" Name="laminar_flag" format="ascii" >'
-   do i=1,numpoints,16
-      k1 = i
-      k2 = k1 + 15
-      if (k2>numpoints) k2 = numpoints
-      write(unitvtk,'(8x,16(1x,i8))') (pg(finger(k))%laminar_flag,k = k1,k2)
-   enddo
-   write(unitvtk,'(a)') '      </DataArray>'   
    if (Granular_flows_options%ID_erosion_criterion>=1) then
 ! sigma_prime
       write(unitvtk,'(a)') '      <DataArray type="Float32" Name="sigma_prime" format="ascii" >'
@@ -529,7 +524,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 ! Flush unit content
    flush(unitvtk)
    close (unitvtk)
-   deallocate(finger)
+   deallocate (finger)
    if ((DBSPH%n_w>0).and.(Domain%tipo=="bsph")) then
 ! Open a vtu file for DB-SPH wall and semi-particle parameters  
 ! VTKConverter_<casename>_wall_<block>.vtk 
@@ -537,6 +532,8 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
       cargo = adjustl(cargo)
       filevtk =                                                                &
 "VTKConverter_"//prefix(1:len_trim(prefix))//"_block_wall_"//cargo(1:len_trim(cargo))//".vtu"
+      write(nscr,'(a)')                                                        &
+         "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
       write(nout,'(a)')                                                        &
          "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
       open(unit=unitvtk,file=filevtk,form='formatted',access='sequential',     &
@@ -555,7 +552,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 "case "//prefix(1:len_trim(prefix))//" * time "//cargo(1:len_trim(cargo))//" (s)"
 ! Point coordinates 
       numpoints = count(pg_w(1:DBSPH%n_w)%cella>0)
-      allocate(finger(numpoints))
+      allocate (finger(numpoints))
       k = 0
       do npi=1,DBSPH%n_w
          if (pg_w(npi)%cella==0) cycle
@@ -636,20 +633,6 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
             pg_w(finger(k))%normal(2),pg_w(finger(k))%normal(3),k=k1,k2)
       enddo
       write(unitvtk,'(a)') '      </DataArray>'
-! Velocity gradient in VSL (projected along the wall element normal) times the 
-! shear viscosity
-      write(unitvtk,'(a)')                                                     &
-'      <DataArray type="Float32" Name="Velocity gradient in VSL"  NumberOfComponents="3"  format="ascii" >'
-      do i=1,numpoints,6
-         k1 = i
-         k2 = k1 + 5
-         if (k2>numpoints) k2 = numpoints
-         write(unitvtk,'(8x,6(3(1x,e12.5)))') (                                &
-            pg_w(finger(k))%grad_vel_VSL_times_mu(1),                          &
-            pg_w(finger(k))%grad_vel_VSL_times_mu(2),                          &
-            pg_w(finger(k))%grad_vel_VSL_times_mu(3),k=k1,k2)
-      enddo
-      write(unitvtk,'(a)') '      </DataArray>'
 ! Pressure
       write(unitvtk,'(a)')                                                     &
          '      <DataArray type="Float32" Name="Pressure (Pa)" format="ascii" >'
@@ -695,7 +678,6 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
          write(unitvtk,'(8x,16(1x,e12.5))') (pg_w(finger(k))%k_d,k=k1,k2)
       enddo
       write(unitvtk,'(a)') '      </DataArray>'
-! Semi-particle volume      
       write(unitvtk,'(a)')                                                     &
 '      <DataArray type="Float32" Name="semi-particle volume (m^3)" format="ascii" >'
       do i=1,numpoints,16
@@ -704,17 +686,6 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
          if (k2>numpoints) k2 = numpoints
          write(unitvtk,'(8x,16(1x,e12.5))') (pg_w(finger(k))%volume,k=k1,k2)
       enddo
-      write(unitvtk,'(a)') '      </DataArray>'
-! Semi-particle kinematic viscosity      
-      write(unitvtk,'(a)')                                                     &
-'      <DataArray type="Float32" Name="semi-particle kinematic viscosity (m^2/s)" format="ascii" >'
-      do i=1,numpoints,16
-         k1 = i
-         k2 = k1 + 15
-         if (k2>numpoints) k2 = numpoints
-         write(unitvtk,'(8x,16(1x,e12.5))')                                    &
-            (pg_w(finger(k))%kin_visc_semi_part,k=k1,k2)
-      enddo
       write(unitvtk,'(a)') '      </DataArray>'    
 ! Wall element ID 
       write(unitvtk,'(a)')                                                     &
@@ -737,7 +708,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 ! Flushing the unit explicitly
       flush(unitvtk)
       close (unitvtk)
-      deallocate(finger)
+      deallocate (finger)
    endif
    if (n_bodies>0) then
 ! Body Transport post-processing for .vtu files: start
@@ -748,6 +719,8 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
       cargo = adjustl(cargo)
       filevtk =                                                                &
 "VTKConverter_"//prefix(1:len_trim(prefix))//"_block_body-part_"//cargo(1:len_trim(cargo))//".vtu"
+      write (nscr,'(a)')                                                       &
+         "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
       write (nout,'(a)')                                                       &
           "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
       open(unit=unitvtk,file=filevtk,form='formatted',access='sequential',     &
@@ -766,7 +739,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 "case "//prefix(1:len_trim(prefix))//" * time "//cargo(1:len_trim(cargo))//" (s)"
 ! Point coordinates 
       numpoints = count(bp_arr(1:n_body_part)%cell>0)
-      allocate(finger(numpoints))
+      allocate (finger(numpoints))
       k = 0
       do npi=1,n_body_part
          if (bp_arr(npi)%cell==0) cycle
@@ -910,7 +883,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 ! Flushing the unit explicitly 
       flush(unitvtk)
       close (unitvtk)
-      deallocate(finger)
+      deallocate (finger)
 ! Bodies: start
 ! Open the .vtu unstructured grid formatted file 
 ! VTKConverter_<casename>_body_<block>.vtk for the results storing
@@ -918,6 +891,8 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
       cargo = adjustl(cargo)
       filevtk =                                                                &
 "VTKConverter_"//prefix(1:len_trim(prefix))//"_block_body_"//cargo(1:len_trim(cargo))//".vtu"
+      write(nscr,'(a)')                                                        &
+         "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
       write(nout,'(a)')                                                        &
          "VTK formatted converted file  : "//filevtk(1:len_trim(filevtk))
       open(unit=unitvtk,file=filevtk,form='formatted',access='sequential',     &
@@ -936,7 +911,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 "case "//prefix(1:len_trim(prefix))//" * time "//cargo(1:len_trim(cargo))//" (s)"
 ! Point coordinates 
       numpoints = n_bodies
-      allocate(finger(numpoints))
+      allocate (finger(numpoints))
       k = 0
       do npi=1,n_bodies
          k = k + 1
@@ -1092,7 +1067,7 @@ if ((curtime<val_time).and.(index(str,'fine')==0)) return
 ! Flushing the unit explicitly 
       flush(unitvtk)
       close (unitvtk)
-      deallocate(finger)
+      deallocate (finger)
    endif  
 endif 
 ! Updating the last output time for .vtu files 
diff --git a/src/Post_processing/s_ctime.f90 b/src/Post_processing/s_ctime.f90
index eebe8a9..07c852a 100644
--- a/src/Post_processing/s_ctime.f90
+++ b/src/Post_processing/s_ctime.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/start_and_stop.f90 b/src/Post_processing/start_and_stop.f90
index 8b97a8d..3ad53cc 100644
--- a/src/Post_processing/start_and_stop.f90
+++ b/src/Post_processing/start_and_stop.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/sub_Q_sections.f90 b/src/Post_processing/sub_Q_sections.f90
index 02f75ee..4703646 100644
--- a/src/Post_processing/sub_Q_sections.f90
+++ b/src/Post_processing/sub_Q_sections.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -46,24 +45,6 @@ integer(4), allocatable, dimension(:) :: n_particles
 !------------------------
 ! Explicit interfaces
 !------------------------
-interface
-   subroutine point_inout_convex_non_degenerate_polygon(point,n_sides,         &
-                                                        point_pol_1,           &
-                                                        point_pol_2,           &
-                                                        point_pol_3,           &
-                                                        point_pol_4,           &
-                                                        point_pol_5,           &
-                                                        point_pol_6,test)
-      implicit none
-      integer(4),intent(in) :: n_sides
-      double precision,intent(in) :: point(2),point_pol_1(2),point_pol_2(2)
-      double precision,intent(in) :: point_pol_3(2),point_pol_4(2)
-      double precision,intent(in) :: point_pol_5(2),point_pol_6(2)
-      integer(4),intent(inout) :: test
-      double precision :: dis1,dis2
-      double precision :: normal(2)
-   end subroutine point_inout_convex_non_degenerate_polygon
-end interface
 !------------------------
 ! Allocations
 !------------------------
@@ -165,13 +146,11 @@ if (it_corrente==1) then
                      Q_sections%section(i_sect)%vertex(1,:),                   &
                      Q_sections%section(i_sect)%loc_axis,P_intersection_loc) 
 ! Check if the intersection point lies within the section
-                  call point_inout_convex_non_degenerate_polygon(              &
-                     P_intersection_loc,Q_sections%section(i_sect)%n_vertices, &
+                  call point_inout_polygone(P_intersection_loc,                &
+                     Q_sections%section(i_sect)%n_vertices,                    &
                      Q_sections%section(i_sect)%vertex_loc(1,:),               &
                      Q_sections%section(i_sect)%vertex_loc(2,:),               &
                      Q_sections%section(i_sect)%vertex_loc(3,:),               &
-                     Q_sections%section(i_sect)%vertex_loc(4,:),               &
-                     Q_sections%section(i_sect)%vertex_loc(4,:),               &
                      Q_sections%section(i_sect)%vertex_loc(4,:),test_inout)
                   if (test_inout==1) then
 !$omp critical (omp_Q_Sections)                 
diff --git a/src/Post_processing/write_Granular_flows_interfaces.f90 b/src/Post_processing/write_Granular_flows_interfaces.f90
index 641693e..5dd8a64 100644
--- a/src/Post_processing/write_Granular_flows_interfaces.f90
+++ b/src/Post_processing/write_Granular_flows_interfaces.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Post_processing/write_h_max.f90 b/src/Post_processing/write_h_max.f90
index 19fafc4..b863e3d 100644
--- a/src/Post_processing/write_h_max.f90
+++ b/src/Post_processing/write_h_max.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Pre_processing/Gest_Input.f90 b/src/Pre_processing/Gest_Input.f90
index 7f4a5a6..9a945df 100644
--- a/src/Pre_processing/Gest_Input.f90
+++ b/src/Pre_processing/Gest_Input.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: Gest_Input                   
 ! Description: Input check and management.                 
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine Gest_Input
 !------------------------
 ! Modules
@@ -39,13 +39,13 @@ implicit none
 integer(4), parameter :: ner0 = 0
 ! Flag transformation quadrilateral face in two triangular faces 
 logical :: OnlyTriangle 
-integer(4) :: npi,ier,i,n,isi,nfc,nt,nrecords,IC_loop,InputErr,alloc_stat
+integer(4) :: npi,ier,i,n,isi,nfc,nt,nrecords,IC_loop,InputErr
 integer(4) :: machine_Julian_day,machine_hour,machine_minute,machine_second
 integer(4),dimension(20) :: NumberEntities 
 character(len=lencard) :: nomsub = "GEST_INPUT"
 character(len=lencard) :: ainp,msg_err
 character(10), external :: ltrim
-character(100), external :: lcase
+character(80), external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -56,6 +56,7 @@ character(100), external :: lcase
 ! Initializations
 !------------------------
 write(nout,'(1x,a)') ">> Input data management starts... "
+write(nscr,'(1x,a)') ">> Input data management starts... "
 ! Array deallocation
 call Gest_Dealloc(nomsub)
 ! Spatial dimensionality
@@ -70,7 +71,7 @@ OnlyTriangle = .FALSE.
 diffusione = .FALSE.
 esplosione = .FALSE.
 erosione = .FALSE.
-restart = .FALSE.
+Restart = .FALSE.
 tempo = zero
 dt = zero
 it_start = 0
@@ -131,6 +132,8 @@ if (InputErr/=0) then
 endif
 write(nout,'(1x,a)')                                                           &
    ">Data are read from an ASCII input file in the routine ReadInput"
+write(nscr,'(1x,a)')                                                           &
+">Data are read from an ASCII input file in the routine ReadInput"
 ! Deallocations of temporary arrays
 write(nout,'(1x,a)') ">> Deallocation of temporary arrays "
 deallocate(Vertice,BoundaryFace,Tratto,BoundaryVertex,stat=ier)
@@ -156,7 +159,7 @@ endif
 ! A restart procedure has been invoked: restart positioning 
 ! (step number / step time)
 if ((Domain%istart>0).or.(Domain%start>zero)) then
-   restart = .True.
+   Restart = .True.
 ! To open the restart file from which restart data will be restored
    open(unit=nsav,file=trim(Domain%file),form="unformatted",status="old",      &
       iostat=ier)
@@ -166,10 +169,11 @@ if ((Domain%istart>0).or.(Domain%start>zero)) then
       else
          write(nout,'(1x,a)')                                                  &
 ">Data are read from the restart file"//trim(Domain%file)//" in the routine ReadRestartFile"
+         write(nscr,'(1x,a)')                                                  &
+">Data are read from the restart file in the routine ReadRestartFile"
    endif
 ! To restore data from the restart file
-! During the first reading of the restart file, only few parameters are read
-   call ReadRestartFile(trim("heading"),ier,nrecords)
+   call ReadRestartFile (trim("heading"), ier, nrecords)
    msg_err = trim("heading")
    if (ier/=0) then
       ier = ier + 200
@@ -272,7 +276,7 @@ if (.not.Restart) then
          call DefineBoundarySideGeometry2D
          elseif (ncord==3) then
 ! To replace 4-sided geometries with 3-sided geometries
-            if (OnlyTriangle) call ModifyFaces(NumberEntities)
+            if (OnlyTriangle) call ModifyFaces (NumberEntities)
             allocate(BFaceList(NumFacce),stat=ier) 
             if (ier/=0) then
                write(nout,'(1x,a,i2)')                                         &
@@ -357,21 +361,15 @@ if (.not.Restart) then
       else
          call diagnostic(arg1=10,arg2=5,arg3=nomsub)
    endif
-   else
 ! A restart option is active
-      call ReadInput(NumberEntities,OnlyTriangle,InputErr,ainp)
-      msg_err = trim("restart reading?")
-      if (InputErr/=0) then
-         InputErr = InputErr + 300
-         call diagnostic(arg1=5,arg2=InputErr,arg3=msg_err)
-      endif
+   else
       if (nag<100) then
 ! Initial domain is empty (inlet section)
          PARTICLEBUFFER = INIPARTICLEBUFFER * Domain%COEFNMAXPARTI
          else
             PARTICLEBUFFER = nag * Domain%COEFNMAXPARTI
       endif
-      if ((Domain%tipo=="semi").or.(Domain%tipo=="bsph")) then   
+      if (Domain%tipo=="semi") then   
          allocate(pg(PARTICLEBUFFER),stat=ier)  
          else
             call diagnostic(arg1=10,arg2=5,arg3=nomsub)
@@ -383,110 +381,6 @@ if (.not.Restart) then
             write(nout,'(1x,a)') "    Array PG successfully allocated "
             Pg(:) = PgZero
       endif
-      if (Domain%tipo=="bsph") then
-! DB-SPH pre-processing
-         call Import_ply_surface_meshes
-         call DBSPH_IC_surface_elements
-         if (.not.allocated(NPartOrd_w)) then
-            allocate(NPartOrd_w(DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet),       &
-               Icont_w(grid%nmax+1),stat=ier) 
-            if (ier/=0) then
-               write(nout,*)                                                   &
-                  'Error! Allocation of NPartOrd_w or Icont_w Gest_Input failed'           
-               call diagnostic(arg1=5,arg2=340)
-               else
-                  write(nout,'(1x,a)')                                         &
-                     "Arrays NPARTORD_w and ICONT_w successfully allocated."
-                  NPartOrd_w(:) = 0
-                  Icont_w(:) = 0
-            endif
-         endif
-! Allocation of the array of the DB-SPH wall elements and semi-particles
-         if (.not.allocated(pg_w)) then
-            allocate(pg_w(DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet),STAT=        &
-               alloc_stat) 
-            if (alloc_stat/=0) then
-               write(nout,*)                                                   &
-                  'Allocation of pg_w in Gest_Input failed;',                  &
-                  ' the program terminates here.'
-               stop ! Stop the main program
-               else
-                  write (nout,*)                                               &
-                     "Allocation of pg_w in Gest_Input successfully completed."
-            endif   
-         endif
-      endif
-! Allocation of the array of the bodies
-      if (n_bodies>0) then
-         if (.not.allocated(body_arr)) then
-            allocate(body_arr(n_bodies),STAT=alloc_stat) 
-            if (alloc_stat/=0) then
-               write(nout,*)                                                   &
-                  'Allocation of body_arr in Gest_Input failed;',              &
-                  ' the program terminates here.'
-               stop ! Stop the main program
-               else
-                  write (nout,*)                                               &
-                     "Allocation of body_arr in Gest_Input well completed. "
-            endif   
-         endif
-! Management of body dynamics input
-         call Input_Body_Dynamics      
-! Allocation of the array of the body particles
-         if (.not.allocated(bp_arr)) then
-            allocate(bp_arr(n_body_part),STAT=alloc_stat) 
-            if (alloc_stat/=0) then
-               write(nout,*)                                                   &
-                  'Allocation of bp_arr in Gest_Input failed;',                &
-                  ' the program terminates here.'
-               stop ! Stop the main program
-               else
-                  write (nout,*)                                               &               
-                     "Allocation of bp_arr in Gest_Input successfully completed"
-            endif   
-         endif         
-! Allocation of the array of the surface body particles
-         if (.not.allocated(surf_body_part)) then
-            allocate(surf_body_part(n_surf_body_part),STAT=alloc_stat) 
-            if (alloc_stat/=0) then
-               write(nout,*)                                                   &
-                  'Allocation of surf_body_part in Gest_Input failed;',        &
-                  ' the program terminates here.'
-               stop ! Stop the main program
-               else
-                  write (nout,*)                                               &
-                     'Allocation of surf_body_part in Gest_Input',             &
-                     ' successfully completed.'
-            endif   
-         endif
-      endif
-! Allocation of the array of the maximum water depth   
-      if ((Partz(1)%IC_source_type==2).and.(.not.allocated(Z_fluid_max))) then
-         allocate(Z_fluid_max(Grid%ncd(1)*Grid%ncd(2)),STAT=alloc_stat) 
-         if (alloc_stat/=0) then
-            write(nout,*)                                                      &
-            'Allocation of Z_fluid_max in Gest_Input failed;',                 &
-            ' the program terminates here.'
-            stop ! Stop the main program
-            else
-               write (nout,*)                                                  &
-                  'Allocation of Z_fluid_max in Gest_Input successfully',      &
-                  ' completed.'
-         endif   
-      endif
-! Allocation of the array of the maximum specific flow rate   
-      if ((Partz(1)%IC_source_type==2).and.(.not.allocated(q_max))) then
-         allocate(q_max(Grid%ncd(1)*Grid%ncd(2)),STAT=alloc_stat) 
-         if (alloc_stat/=0) then
-            write(nout,*)                                                      &
-            'Allocation of q_max in Gest_Input failed;',                       &
-            ' the program terminates here.'
-            stop ! Stop the main program
-            else
-               write (nout,*)                                                  &
-                  'Allocation of q_max in Gest_Input successfully completed.'
-         endif   
-      endif      
       if (Domain%RKscheme>1) then
          if (Domain%tipo=="semi") then   
            allocate(ts0_pg(PARTICLEBUFFER),stat=ier)  
@@ -510,13 +404,19 @@ if (.not.Restart) then
          else
             write(nout,'(1x,a)') "    Array BFACELIST successfully allocated "
       endif
-      call ReadRestartFile(trim("reading"),ier,nrecords)
+      call ReadRestartFile (trim("reading"), ier, nrecords)
       msg_err = trim("reading")
       if (ier/=0) then
          ier = ier + 200
          call diagnostic(arg1=5,arg2=ier,arg3=msg_err)
       endif
       close(nsav)
+      call ReadInput(NumberEntities,OnlyTriangle,InputErr,ainp)
+      msg_err = trim("restart reading?")
+      if (InputErr/=0) then
+         InputErr = InputErr + 300
+         call diagnostic(arg1=5,arg2=InputErr,arg3=msg_err)
+      endif
       do i=1,NMedium
          if (Med(i)%codif/=zero) diffusione = .TRUE.
          if ((index(Med(i)%tipo,"granular")>0)) then
@@ -541,7 +441,9 @@ if (Domain%ioutopt<0) then
    enddo
 endif
 ! Management of body dynamics input
-if ((n_bodies>0).and.(.not.Restart)) call Input_Body_Dynamics
+if (n_bodies>0) then
+   call Input_Body_Dynamics
+endif
 ! Memory allocation for the particle ordering arrays
 if ((Domain%tipo=="semi").or.(Domain%tipo=="bsph")) then
    allocate(NPartOrd(PARTICLEBUFFER),Icont(grid%nmax+1),stat=ier) 
@@ -570,7 +472,7 @@ if (n_bodies>0) then
          Icont_bp(:) = 0
    endif
 endif
-if ((Domain%tipo=="bsph").and.(.not.Restart)) then
+if (Domain%tipo=="bsph") then
    call Import_ply_surface_meshes
    call DBSPH_IC_surface_elements
    if (.not.allocated(NPartOrd_w)) then
@@ -589,7 +491,7 @@ if ((Domain%tipo=="bsph").and.(.not.Restart)) then
    endif
 endif
 call OrdGrid1 (nout)
-if ((Domain%tipo=="bsph").and.(.not.Restart)) then
+if (Domain%tipo=="bsph") then
    call DBSPH_find_close_faces 
    call semi_particle_volumes
 endif
diff --git a/src/Pre_processing/Init_Arrays.f90 b/src/Pre_processing/Init_Arrays.f90
index a730f47..ec63d74 100644
--- a/src/Pre_processing/Init_Arrays.f90
+++ b/src/Pre_processing/Init_Arrays.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -219,7 +218,8 @@ do i=1,size(BoundarySide)
    BoundarySide(i)%tipo = "    "
    BoundarySide(i)%stretch = 0
    BoundarySide(i)%previous_side = 0
-   BoundarySide(i)%vertex(1:SPACEDIM-1) = 0
+   BoundarySide(i)%vertex(1) = 0
+   BoundarySide(i)%vertex(2) = 0
    BoundarySide(i)%CloseParticles = 0
    BoundarySide(i)%length = zero
    BoundarySide(i)%CloseParticles_maxQuota = const_m_9999
@@ -230,7 +230,7 @@ do i=1,size(BoundarySide)
    enddo
    BoundarySide(i)%angle = zero
    do j=1,SPACEDIM
-      BoundarySide(i)%velocity(j) = zero
+      BoundarySide(i)%velocity(J) = zero
    enddo
 enddo
 ! In case of restart, it does not zero "domain" and "grid"
diff --git a/src/Pre_processing/ModifyFaces.f90 b/src/Pre_processing/ModifyFaces.f90
index 035334f..4e97953 100644
--- a/src/Pre_processing/ModifyFaces.f90
+++ b/src/Pre_processing/ModifyFaces.f90
@@ -1,30 +1,30 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: ModifyFaces                   
 ! Description: To generate triangles from quadrilaterals (partitioning along the shortest diagonal)                 
 !----------------------------------------------------------------------------------------------------------------------------------
-subroutine ModifyFaces(NumberEntities)
+
+subroutine ModifyFaces (NumberEntities)
 !------------------------
 ! Modules
 !------------------------ 
@@ -52,7 +52,7 @@ new = NumberEntities(11)
 ! Statements
 !------------------------
 do n=1,NumberEntities(11)
-   if (BoundaryFace(n)%Node(4)%name==-1) cycle
+   if (BoundaryFace(n)%Node(4)%name==0) cycle
    new = new + 1
    d13 = zero
    d24 = zero
diff --git a/src/Pre_processing/ReadBedLoadTransport.f90 b/src/Pre_processing/ReadBedLoadTransport.f90
index d244286..61da037 100644
--- a/src/Pre_processing/ReadBedLoadTransport.f90
+++ b/src/Pre_processing/ReadBedLoadTransport.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -44,7 +43,7 @@ double precision :: dt_out,x_fixed,y_fixed,conv_crit_erosion,velocity_fixed_bed
 double precision :: Chezy_friction_coeff,x_min_dt,x_max_dt,y_min_dt,y_max_dt
 double precision :: z_min_dt,z_max_dt
 character(1) :: comment
-character(100) :: ainp,lcase 
+character(80) :: ainp,lcase 
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
diff --git a/src/Pre_processing/ReadBodyDynamics.f90 b/src/Pre_processing/ReadBodyDynamics.f90
index f3cd9dc..112b01c 100644
--- a/src/Pre_processing/ReadBodyDynamics.f90
+++ b/src/Pre_processing/ReadBodyDynamics.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -36,7 +35,7 @@ use Dynamic_allocation_module
 ! Declarations
 !------------------------
 implicit none
-integer(4) :: nrighe,ier,ninp,nout,ioerr,i,Id_body,n_elem,j,Id_elem,alloc_stat
+integer(4) :: nrighe,ier,ninp,nout,ioerr,i,Id_body,n_elem,j,Id_elem
 integer(4) :: imposed_kinematics,n_records,Ic_imposed 
 double precision :: mass
 integer(4) :: normal_act(6)
@@ -44,7 +43,7 @@ double precision :: L_geom(3),x_CM(3),alfa(3),u_CM(3),omega(3),x_rotC(3)
 double precision :: mass_deact(6)
 double precision :: Ic(3,3)
 character(1) :: comment
-character(100) :: ainp,lcase !,token,GetToken
+character(80) :: ainp,lcase !,token,GetToken
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
@@ -58,9 +57,7 @@ logical,external :: ReadCheck
 !------------------------
 ! Statements
 !------------------------
-! In case of restart, input file sections are read just once (not twice as for 
-! regular runs). restart=.false. during the first reading of the main input 
-! file, even for restarted simulations. 
+! In case of restart, input data are not read
 if (restart) then
    do while (TRIM(lcase(ainp)) /= "##### end body dynamics #####")
       call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
@@ -79,8 +76,6 @@ do while (TRIM(lcase(ainp)) /= "##### end body dynamics #####")
    if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"BODY DYNAMICS GENERAL INPUT",ninp,&
       nout)) return
 ! Writing the number of bodies and "dx_dxbodies" on the log file
-! In case of restart, ncord>0 since the first (and only) reading of the main 
-! input file 
    if ((ncord>0).and.(nout>0)) then
       write(nout,"(1x,a,1p,i12)") "n_bodies:.....................",n_bodies
       write(nout,"(1x,a,1p,e12.4)") "dx_dxbodies:..................",          &
@@ -90,18 +85,9 @@ do while (TRIM(lcase(ainp)) /= "##### end body dynamics #####")
       write(nout,"(1x,a)")  " "
    endif
 ! Allocation of the array of the bodies
-   if (.not.allocated(body_arr)) then
-      allocate(body_arr(n_bodies),STAT=alloc_stat) 
-      if (alloc_stat/=0) then
-         write(nout,*)                                                         &
-            'Allocation of body_arr in ReadBodyDynamics failed;',              &
-            ' the program terminates here.'
-         stop ! Stop the main program
-         else
-            write (nout,*)                                                     &
-               "Allocation of body_arr in ReadBodyDynamics ",                  &
-               "successfully completed."
-      endif   
+   if (allocated(body_arr)) then
+      else
+         allocate(body_arr(n_bodies))  
    endif
 ! Loop over the transported bodies
    do i=1,n_bodies
diff --git a/src/Pre_processing/ReadCheck.f90 b/src/Pre_processing/ReadCheck.f90
index 9313674..dadac64 100644
--- a/src/Pre_processing/ReadCheck.f90
+++ b/src/Pre_processing/ReadCheck.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Pre_processing/ReadDBSPH.f90 b/src/Pre_processing/ReadDBSPH.f90
index e0ebef5..68e0ae8 100644
--- a/src/Pre_processing/ReadDBSPH.f90
+++ b/src/Pre_processing/ReadDBSPH.f90
@@ -1,30 +1,30 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: ReadDBSPH                    
 ! Description: Reading input data for the DB-SPH boundary treatment scheme (Amicarelli et al., 2013, IJNME).                   
 !----------------------------------------------------------------------------------------------------------------------------------
-subroutine ReadDBSPH(ainp,comment,nrighe,ier,ninp,nout)
+
+subroutine ReadDBSPH (ainp,comment,nrighe,ier,ninp,nout)
 !------------------------
 ! Modules
 !------------------------ 
@@ -36,18 +36,15 @@ use I_O_diagnostic_module
 !------------------------
 implicit none
 integer(4),intent(inout) :: nrighe,ier,ninp,nout
+character(80),intent(inout) :: ainp 
 character(1),intent(inout) :: comment
-character(100),intent(inout) :: ainp 
 logical :: MUSCL_boundary_flag,in_built_monitors
 integer(4) :: ioerr,n_monitor_points,n_monitor_regions,i,alloc_stat            
-integer(4) :: dealloc_stat,j,n_inlet,n_outlet
-integer(4) :: ply_n_face_vert,surface_mesh_files
+integer(4) :: dealloc_stat,n_kinematics_records,j,n_inlet,n_outlet
 double precision :: dx_dxw,k_w
-character(100) :: lcase
-integer(4) :: n_kinematics_records(100)
 integer(4),allocatable,dimension(:) :: monitor_IDs
-double precision :: monitor_region(6)           
-double precision :: rotation_centre(100,3)
+double precision,dimension(:) :: monitor_region(6)           
+character(80) :: lcase
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
@@ -58,7 +55,6 @@ logical,external :: ReadCheck
 !------------------------
 ! Initializations
 !------------------------
-n_kinematics_records(:) = 0
 !------------------------
 ! Statements
 !------------------------
@@ -66,24 +62,24 @@ n_kinematics_records(:) = 0
 if (restart) then
 ! Lower case letters are required
    do while (TRIM(lcase(ainp))/="##### end dbsph #####") 
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
       if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH DATA",ninp,nout)) return
    enddo
   return
 endif
-call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
 if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH DATA",ninp,nout)) return
 do while (TRIM(lcase(ainp))/="##### end dbsph #####")
 ! Reading the ratio between the fluid and the semi-particle sizes (dx/dx_w)
    read(ainp,*,iostat=ioerr) dx_dxw,MUSCL_boundary_flag,k_w
    if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH GENERAL INPUT",ninp,nout))  &
       return
-   call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+   call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
    read(ainp,*,iostat=ioerr) n_monitor_points,n_monitor_regions
    if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_monitor_numbers",ninp,nout))&
       return
    if (n_monitor_points>0) then
-      if (.not.allocated(monitor_IDs)) allocate(monitor_IDs(n_monitor_points),&
+      if (.not.allocated(monitor_IDs)) allocate (monitor_IDs(n_monitor_points),&
          STAT=alloc_stat)
       if (alloc_stat/=0) then
          write(nout,*)                                                         &
@@ -91,55 +87,47 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
 ! Stop the main program
          stop 
       endif
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
       read(ainp,*,iostat=ioerr) monitor_IDs(:)
       if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_monitor_IDs",ninp,nout)) &
          return
       endif
       if (n_monitor_regions==1) then
-         call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+         call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
          read(ainp,*,iostat=ioerr) monitor_region(:)
          if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_monitor_region",ninp, &
             nout)) return
       endif
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
-      read(ainp,*,iostat=ioerr) surface_mesh_files,in_built_monitors
-      if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"SURFACE_MESH_FILES",ninp,nout))&
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
+      read(ainp,*,iostat=ioerr) n_kinematics_records,in_built_monitors
+      if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_KINEMATICS",ninp,nout))  &
          return  
-      do i=1,surface_mesh_files
-         call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
-         read(ainp,*,iostat=ioerr) n_kinematics_records(i),                    &
-            rotation_centre(i,1:3)
-         if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_KINEMATICS",ninp,nout &
-            )) return  
-         if (.not.(allocated(DBSPH%kinematics))) then
-            allocate(DBSPH%kinematics(surface_mesh_files,                      &
-               n_kinematics_records(i),7),STAT=alloc_stat)
-            if (alloc_stat/=0) then
-               write(nout,*)                                                   &
+      if (.not.(allocated(DBSPH%kinematics))) then
+         allocate (DBSPH%kinematics(n_kinematics_records,4),STAT=alloc_stat)
+         if (alloc_stat/=0) then
+            write(nout,*)                                                      &
 'Error! Allocation of DBSPH%kinematics in ReadDBSPH failed; the program terminates here.'
-               call diagnostic(arg1=5,arg2=340)
+            call diagnostic (arg1=5,arg2=340)
 ! Stop the main program
-               stop 
-               else
-                  write(nout,'(1x,a)')                                         &
-"Array DBSPH%kinematics successfully allocated in subroutine ReadDBSPH."
-            endif
-         endif  
-         do j=1,n_kinematics_records(i)
-            call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
-            read(ainp,*,iostat=ioerr) DBSPH%kinematics(i,j,1:7)  
-            if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_KINEMATICS_RECORDS"&
-               ,ninp,nout)) return            
-         enddo
+            stop 
+            else
+               write(nout,'(1x,a)')                                            &
+"Array DBSPH%kinematics successfully allocated in subrouitne ReadDBSPH."
+         endif
+      endif  
+      do j=1,n_kinematics_records
+         call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
+         read(ainp,*,iostat=ioerr) DBSPH%kinematics(j,:)  
+         if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_KINEMATICS_RECORDS",  &
+            ninp,nout)) return            
       enddo
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
-      read(ainp,*,iostat=ioerr) n_inlet,n_outlet,ply_n_face_vert
-      if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,                                &
-         "DBSPH_INLET_OUTLET_PLY_N_FACE_VERT",ninp,nout)) return 
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
+      read(ainp,*,iostat=ioerr) n_inlet,n_outlet
+      if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_INLET_OUTLET",ninp,nout))&
+         return 
       if (n_inlet>0) then
          if (.not.allocated(DBSPH%inlet_sections)) then
-            allocate(DBSPH%inlet_sections(n_inlet,10),STAT=alloc_stat)
+            allocate (DBSPH%inlet_sections(n_inlet,10),STAT=alloc_stat)
             if (alloc_stat/=0) then
                write(nout,*)                                                   &
 'Allocation of DBSPH%inlet_sections in ReadDBSPH failed; the program terminates here'
@@ -149,7 +137,7 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
       endif
    endif
    do j=1,n_inlet
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
 ! Reading position, normal and velocity of an inlet surface element      
       read(ainp,*,iostat=ioerr) DBSPH%inlet_sections(j,:)  
       if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_INLET_SECTIONS",ninp,    &
@@ -158,7 +146,7 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
    if (n_outlet>0) then
 ! Reading position and normal of an outlet surface element       
       if (.not.allocated(DBSPH%outlet_sections)) then
-         allocate(DBSPH%outlet_sections(n_outlet,8),STAT=alloc_stat)
+         allocate (DBSPH%outlet_sections(n_outlet,8),STAT=alloc_stat)
          if (alloc_stat/=0) then
             write(nout,*)                                                      &
 'Allocation of DBSPH_outlet_sections in ReadDBSPH failed; the program terminates here'
@@ -168,7 +156,7 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
       endif   
    endif
    do j=1,n_outlet
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
       read(ainp,*,iostat=ioerr) DBSPH%outlet_sections(j,:)  
       if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH_OUTLET_SECTIONS",ninp,   &
          nout)) return            
@@ -206,19 +194,12 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
 "monitor_region_z_max: ..........",monitor_region(6)
       endif
       write(nout,"(1x,a,1p,i12)")                                              &
-"surface_mesh_files..............",surface_mesh_files 
+"n_kinematics_records............",n_kinematics_records 
       write(nout,"(1x,a,1p,l12)")                                              &
-"in-built_monitor_flag:..........",in_built_monitors
-      do j=1,surface_mesh_files 
-         write(nout,"(1x,a,1p,i12)")                                           &
-"n_kinematics_records............",n_kinematics_records(j) 
-         write(nout,"(1x,a,1p,3(g12.4))")                                      &
-"rotation_centre:................",rotation_centre(j,1:3) 
-         do i=1,n_kinematics_records(j)
-            write(nout,"(1x,a,1p,7(g12.4))")                                   &
-"time(s),u(m/s),v(m/s),w(m/s),omega_x(rad/s),omega_y(rad/s),omega_z(rad/s):..."&
-               ,DBSPH%kinematics(j,i,1:7)        
-         enddo
+"in-built_monitor_flag:..........",in_built_monitors      
+      do i=1,n_kinematics_records
+         write(nout,"(1x,a,1p,4(g12.4))")                                      &
+"time(s),u(m/s),v(m/s),w(m/s):...",DBSPH%kinematics(i,:)        
       enddo 
       write(nout,"(1x,a,i12)")                                                 &
 "n_inlet:........................",n_inlet
@@ -233,9 +214,7 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
          write(nout,"(1x,a,1p,6(g12.4))")                                      &
 "x(m),y(m),z(m),n_x,n_y,n_z,length(m),pres(Pa)............: ",                 &
             DBSPH%outlet_sections(i,:)        
-      enddo   
-      write(nout,"(1x,a,i12)")                                                 &
-"ply_n_face_vert:................",ply_n_face_vert    
+      enddo       
       write(nout,"(1x,a)")  " "
 ! Assignment of the DB-SPH parameters 
       DBSPH%dx_dxw = dx_dxw
@@ -246,7 +225,7 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
       DBSPH%monitor_region(:) = monitor_region(:)  
       if (n_monitor_points>0) then
          if (.not.(allocated(DBSPH%monitor_IDs))) then
-            allocate(DBSPH%monitor_IDs(n_monitor_points),STAT=alloc_stat)
+            allocate (DBSPH%monitor_IDs(n_monitor_points),STAT=alloc_stat)
             if (alloc_stat/=0) then
                write(nout,*)                                                   &
 'Allocation of DBSPH%n_monitor_points in ReadDBSPH failed; the program terminates here.'
@@ -256,45 +235,13 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
          endif       
          DBSPH%monitor_IDs(:) = monitor_IDs(:)
       endif
-      DBSPH%surface_mesh_files = surface_mesh_files
+      DBSPH%n_kinematics_records = n_kinematics_records 
       DBSPH%in_built_monitors = in_built_monitors
-      if (.not.(allocated(DBSPH%n_kinematics_records))) then
-         allocate(DBSPH%n_kinematics_records(surface_mesh_files),              &
-            STAT=alloc_stat)
-         if (alloc_stat/=0) then
-            write(nout,*)                                                      &
-'Error! Allocation of DBSPH%n_kinematics_records in ReadDBSPH failed; the program terminates here.'
-            call diagnostic(arg1=5,arg2=340)
-! Stop the main program
-            stop 
-            else
-               write(nout,'(1x,a)')                                            &
-"Array DBSPH%n_kinematics_records successfully allocated in subrouitne ReadDBSPH."
-         endif
-      endif
-      if (.not.(allocated(DBSPH%rotation_centre))) then
-         allocate(DBSPH%rotation_centre(surface_mesh_files,3),STAT=alloc_stat)
-         if (alloc_stat/=0) then
-            write(nout,*)                                                      &
-'Error! Allocation of DBSPH%rotation_centre in ReadDBSPH failed; the program terminates here.'
-            call diagnostic(arg1=5,arg2=340)
-! Stop the main program
-            stop 
-            else
-               write(nout,'(1x,a)')                                            &
-"Array DBSPH%rotation_centre successfully allocated in subrouitne ReadDBSPH."
-         endif
-      endif
-      do i=1,surface_mesh_files
-         DBSPH%n_kinematics_records(i) = n_kinematics_records(i)
-         DBSPH%rotation_centre(i,:) = rotation_centre(i,:)
-      enddo 
       DBSPH%n_inlet = n_inlet   
       DBSPH%n_outlet = n_outlet
-      DBSPH%ply_n_face_vert = ply_n_face_vert
    endif
    if (allocated(monitor_IDs)) then
-      deallocate(monitor_IDs,STAT=dealloc_stat)
+      deallocate (monitor_IDs,STAT=dealloc_stat)
       if (dealloc_stat/=0) then
          write(nout,*)                                                         &
 'Deallocation of monitor_IDs in ReadDBSPH failed; the program terminates here.'
@@ -302,7 +249,7 @@ do while (TRIM(lcase(ainp))/="##### end dbsph #####")
          stop 
       endif   
    endif   
-   call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+   call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
    if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"DBSPH DATA",ninp,nout)) return
 enddo
 !------------------------
diff --git a/src/Pre_processing/ReadInput.f90 b/src/Pre_processing/ReadInput.f90
index e580d5b..8765698 100644
--- a/src/Pre_processing/ReadInput.f90
+++ b/src/Pre_processing/ReadInput.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: ReadInput                    
 ! Description: Reading input data.                    
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine ReadInput(NumberEntities,OnlyTriangle,ier,ainp)
 !------------------------
 ! Modules
@@ -38,14 +38,14 @@ use Dynamic_allocation_module
 implicit none
 logical :: OnlyTriangle
 integer(4) :: ier
-character(100) :: ainp
+character(80) :: ainp
 integer(4),dimension(20)    :: NumberEntities
 logical :: restartOK
 integer(4) :: ioerr,nrighe,ioutpo2,iplot_fr,imemo_fr,irest_fr,icpoi_fr,ipllb_fr
 integer(4) :: ipllb_md,ioutopt
 double precision :: plot_fr,memo_fr,rest_fr,cpoi_fr,pllb_fr
 character(1) :: comment = "!"
-character(100),external :: lcase,GetToken
+character(80),external :: lcase, GetToken
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
@@ -84,7 +84,7 @@ current_version = .TRUE.
 ! Statements
 !------------------------
 call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
-if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"INPUT VERSION",ninp,nout)) return
+if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"INPUT VERSION",ninp,nout)) return
 if (trim(ainp)/=trim(version)) then
    ier = 2
    current_version = .FALSE.
@@ -92,13 +92,12 @@ if (trim(ainp)/=trim(version)) then
 endif
 ! Loop over "input sections" 
 SECTION_LOOP: do while (ioerr==0)
-   call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+   call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
 ! If EOF is reached, then exit, otherwise to check the error code
    if (ioerr==-1) cycle SECTION_LOOP
-   if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"INPUT FILE SECTIONS",ninp,nout))  &
-      return
+   if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"INPUT DATA",ninp,nout)) return
    if (ncord>0) write(nout,"(//,1x,a,/)") lcase(ainp) 
-   select case(trim(lcase(trim(ainp))))
+   select case(TRIM(lcase(trim(ainp))))
       case("##### title #####")
          call ReadInputTitle(ainp,comment,nrighe,ier,ninp,nout)
       case("##### restart #####")
@@ -130,7 +129,7 @@ SECTION_LOOP: do while (ioerr==0)
          call ReadDBSPH(ainp,comment,nrighe,ier,ninp,nout)
       case("##### boundaries #####")
          call ReadInputBoundaries(NumberEntities,Partz,Tratto,BoundaryVertex,  &
-            ainp,comment,nrighe,ier,ninp,nout)
+            ainp,comment,nrighe,ier, ninp,nout)
       case("##### run parameters #####")
          call ReadInputRunParameters (ainp,comment,nrighe,ier,ninp,nout,nscr)
       case("##### general physical properties #####")
@@ -148,9 +147,9 @@ SECTION_LOOP: do while (ioerr==0)
          call ReadInputControlSections(NumberEntities,Control_Sections,ainp,   &
             comment,nrighe,ier,ninp,nout)
       case("##### section flow rate #####")
-         call ReadSectionFlowRate(ainp,comment,nrighe,ier,ninp,nout)
+         call ReadSectionFlowRate (ainp,comment,nrighe,ier,ninp,nout)
       case("##### draw options #####")
-         call ReadInputDrawOptions(ainp,comment,nrighe,ier,ninp,nout)
+         call ReadInputDrawOptions (ainp,comment,nrighe,ier,ninp,nout)
       case default 
         ier = 1
    end select
diff --git a/src/Pre_processing/ReadInputBoundaries.f90 b/src/Pre_processing/ReadInputBoundaries.f90
index 36b0697..909d46d 100644
--- a/src/Pre_processing/ReadInputBoundaries.f90
+++ b/src/Pre_processing/ReadInputBoundaries.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -36,12 +35,11 @@ use Hybrid_allocation_module
 ! Declarations
 !------------------------
 implicit none
-logical :: DBSPH_fictitious_reservoir_flag
 integer(4) :: nrighe,ier,ninp,nout
 integer(4),dimension(20) :: NumberEntities
 integer(4),dimension(NumBVertices) :: BoundaryVertex
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 type (TyZone),dimension(NPartZone) :: Partz
 type (TyBoundaryStretch),dimension(NumTratti) :: Tratto
 integer(4) :: n,index,numv,indexi,indexf,Izona,ipointer,Medium,icolor,icord    
@@ -52,16 +50,16 @@ double precision :: pool_value,shear,velocity,trampa,valp,flowrate,H_res
 double precision,dimension(3) :: values1,values3
 double precision,dimension(0:3,maxpointsvlaw) :: valuev
 double precision :: plan_reservoir_pos(4,2),dam_zone_vertices(4,2)
-character(1) :: pool_plane,bends,slip
-character(2) :: pressu
-character(3) :: move
-character(4) :: tipo
-character(6) :: token_color
-character(8) :: label
-character(100):: token
+character(len=1) :: pool_plane,bends,slip
+character(len=2) :: pressu
+character(len=3) :: move
+character(len=4) :: tipo
+character(len=6) :: token_color
+character(len=8) :: label
+character(len=80):: token
 logical,external :: ReadCheck
 integer(4),external :: ptcolorrgb
-character(100), external :: lcase, GetToken
+character(80), external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -122,7 +120,6 @@ do while (TRIM(lcase(ainp))/="##### end boundaries #####")
    valp = zero
    IC_source_type = 0
    Car_top_zone = 0
-   DBSPH_fictitious_reservoir_flag = .false.
    dx_CartTopog = 0.d0
    H_res = 0.d0
    ID_first_vertex = 0
@@ -187,10 +184,10 @@ do while (TRIM(lcase(ainp))/="##### end boundaries #####")
             write(nout,*)                                                      &
 'TRAMPA in SOURCE boundary is not available. TRAMPA is setted to zero; check the VELOCITY boundary.'
             write(nout,*) ' '
-            write(nout,*) ' '
-            write(nout,*)                                                         &
+            write(*,*) ' '
+            write(*,*)                                                         &
 'TRAMPA in SOURCE boundary is not available. TRAMPA is setted to zero;  check the VELOCITY boundary.'
-            write(nout,*) ' '
+            write(*,*) ' '
             trampa = zero
          endif
          call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
@@ -269,11 +266,9 @@ do while (TRIM(lcase(ainp))/="##### end boundaries #####")
             ninp,nout)
          if (ier/=0) return  
          call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
-         if (ioerr==0) read(ainp,*,iostat=ioerr) IC_source_type,Car_top_zone,  &
-            DBSPH_fictitious_reservoir_flag
+         if (ioerr==0) read(ainp,*,iostat=ioerr) IC_source_type,Car_top_zone
          if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,                             &
-            "IC_source_type, Car_top_zone, DBSPH_fictitious_reservoir_flag",   &
-            ninp,nout)) return
+            "IC_source_type, Car_top_zone",ninp,nout)) return
          if (IC_source_type==2) then
             call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
             if (ioerr==0) read(ainp,*,iostat=ioerr) dx_CartTopog,H_res
@@ -372,8 +367,6 @@ do while (TRIM(lcase(ainp))/="##### end boundaries #####")
       Partz(Izona)%Medium   = Medium
       Partz(Izona)%IC_source_type = IC_source_type
       Partz(Izona)%Car_top_zone = Car_top_zone
-      Partz(Izona)%DBSPH_fictitious_reservoir_flag =                           &
-         DBSPH_fictitious_reservoir_flag
       if (IC_source_type==2) then
          Partz(Izona)%dx_CartTopog = dx_CartTopog
          Partz(Izona)%H_res = H_res
@@ -539,8 +532,6 @@ BoundaryVertex(Tratto(index)%inivertex+Tratto(index)%numvertices-1)
                   Partz(Izona)%IC_source_type
                write(nout,"(1x,a,i12)") "Car_top_zone    : ",                  &
                   Partz(Izona)%Car_top_zone
-               write(nout,"(1x,a,l12)") "DBSPH_fictitious_reservoir_flag : ",  &
-                  Partz(Izona)%DBSPH_fictitious_reservoir_flag
                if (IC_source_type==2) then
                   write(nout,"(1x,a,1pe12.4)")    "dx_CartTopog    : ",        &
                      Partz(Izona)%dx_CartTopog
diff --git a/src/Pre_processing/ReadInputControlLines.f90 b/src/Pre_processing/ReadInputControlLines.f90
index 4f763cb..39fc461 100644
--- a/src/Pre_processing/ReadInputControlLines.f90
+++ b/src/Pre_processing/ReadInputControlLines.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -41,14 +40,14 @@ integer(4),dimension(20) :: NumberEntities
 type (TyCtlPoint),dimension(NPointst) :: Control_Points
 type (TyCtlLine),dimension(NLines) :: Control_Lines
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: n,i,ndiv,icord,ioerr,npts
 double precision :: vp
 double precision,dimension(3) :: values1,values2,values3
 character(5) :: txt
 character(8) :: label
 logical,external :: ReadCheck 
-character(100), external :: lcase
+character(80), external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputControlPoints.f90 b/src/Pre_processing/ReadInputControlPoints.f90
index ef53154..59544a8 100644
--- a/src/Pre_processing/ReadInputControlPoints.f90
+++ b/src/Pre_processing/ReadInputControlPoints.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -40,11 +39,11 @@ integer(4) :: nrighe,ier,ninp,nout
 integer(4),dimension(20) :: NumberEntities
 type (TyCtlPoint),dimension(NPointst) :: Control_Points
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: n,i,icord,ioerr
 double precision,dimension(3) :: values1
 logical,external :: ReadCheck
-character(100),external :: lcase
+character(80),external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputControlSections.f90 b/src/Pre_processing/ReadInputControlSections.f90
index 597b824..939a996 100644
--- a/src/Pre_processing/ReadInputControlSections.f90
+++ b/src/Pre_processing/ReadInputControlSections.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -40,16 +39,16 @@ integer(4) :: nrighe,ier,ninp,nout,npts
 integer(4),dimension(20) :: NumberEntities
 type (TySection),dimension(0:Nsections+1) :: Control_Sections
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: icord,icor2,icor3,icolor,ndiv,ioerr
 double precision,dimension(3) :: vp
 character(8) :: label
-character(100) :: token
+character(80) :: token
 character(1),dimension(3) :: CoordLabel = (/ "x", "y", "z" /)
 double precision,dimension(3,2) :: values
 logical,external :: ReadCheck
 integer(4),external :: NumberSectionPoints
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputDomain.f90 b/src/Pre_processing/ReadInputDomain.f90
index e5f4455..8677f0e 100644
--- a/src/Pre_processing/ReadInputDomain.f90
+++ b/src/Pre_processing/ReadInputDomain.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -39,12 +38,12 @@ implicit none
 integer(4) :: nrighe,ier, ninp,nout,nscr
 integer(4),dimension(20) :: NumberEntities
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: ioerr
 double precision :: dd, trunc
-character(100) :: token
+character(80) :: token
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputDrawOptions.f90 b/src/Pre_processing/ReadInputDrawOptions.f90
index 2a6d33f..690d570 100644
--- a/src/Pre_processing/ReadInputDrawOptions.f90
+++ b/src/Pre_processing/ReadInputDrawOptions.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -37,11 +36,11 @@ use Hybrid_allocation_module
 implicit none
 integer(4) :: nrighe,ier, ninp,nout
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 character(4) :: steptime
 integer(4) :: ioerr
-character(100) :: token
-character(100),external :: lcase, GetToken
+character(80) :: token
+character(80),external :: lcase, GetToken
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
diff --git a/src/Pre_processing/ReadInputExternalFile.f90 b/src/Pre_processing/ReadInputExternalFile.f90
index d93900a..8852ec8 100644
--- a/src/Pre_processing/ReadInputExternalFile.f90
+++ b/src/Pre_processing/ReadInputExternalFile.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -40,11 +39,11 @@ implicit none
 integer(4) :: nrighe,ier,ninp,nout,ninp2
 integer(4),dimension(20) :: NumberEntities
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 logical :: OnlyTriangle
 integer(4) :: ioerr
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputFaces.f90 b/src/Pre_processing/ReadInputFaces.f90
index afceaa0..1a5f48c 100644
--- a/src/Pre_processing/ReadInputFaces.f90
+++ b/src/Pre_processing/ReadInputFaces.f90
@@ -1,29 +1,29 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: ReadInputFaces                         
 ! Description:                        
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine ReadInputFaces(NumberEntities,ainp,comment,nrighe,ier,prtopt,ninp,nout)
 !------------------------
 ! Modules
@@ -39,12 +39,12 @@ integer(4) :: nrighe,ier, ninp,nout
 logical(4) :: prtopt
 integer(4),dimension(20) :: NumberEntities
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: n,i,ioerr,stretch
-integer(4) :: ivalues(MAXFACENODES)
+integer(4),dimension(4) :: ivalues
 character(8) :: label
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -71,7 +71,7 @@ do while (TRIM(lcase(ainp))/="##### end faces #####")
    select case (TRIM(Domain%tipo))
       case ("semi","bsph") 
          ivalues = 0
-! ivalues(4) is the 4-th vertex (null in case of triangles)
+! ivalues(4) is the 4-th vertex (null in case of trinagles)
          read(ainp,*,iostat=ioerr) i,ivalues,stretch  
          write(label,"(i8)") i
          if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"FACE n."//label,ninp,nout)) &
@@ -108,10 +108,9 @@ if ((ncord>0).AND.(nout>0).AND.(prtopt)) then
    write(nout,*)
    write(nout,"(1x,a)") "List of faces:"
    do n=1,NumberEntities(11)
-      write(nout,"(i10,' - ',6i10,' - ',i8)") n,BoundaryFace(n)%Node(1)%name,  &
+      write(nout,"(i10,' - ',4i10,' - ',i8)") n,BoundaryFace(n)%Node(1)%name,  &
          BoundaryFace(n)%Node(2)%name,BoundaryFace(n)%Node(3)%name,            &
-         BoundaryFace(n)%Node(4)%name,BoundaryFace(n)%Node(5)%name,            &
-         BoundaryFace(n)%Node(6)%name,BoundaryFace(n)%stretch
+         BoundaryFace(n)%Node(4)%name,BoundaryFace(n)%stretch
    enddo
 endif
 !------------------------
diff --git a/src/Pre_processing/ReadInputGeneralPhysical.f90 b/src/Pre_processing/ReadInputGeneralPhysical.f90
index 778eace..4654641 100644
--- a/src/Pre_processing/ReadInputGeneralPhysical.f90
+++ b/src/Pre_processing/ReadInputGeneralPhysical.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -38,11 +37,11 @@ implicit none
 integer(4) :: nrighe,ier, ninp,nout
 integer(4),dimension(20) :: NumberEntities
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: n,icord,ioerr
 double precision :: prif
 double precision,dimension(3) :: values1
-character(100),external :: lcase
+character(80),external :: lcase
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
diff --git a/src/Pre_processing/ReadInputLines.f90 b/src/Pre_processing/ReadInputLines.f90
index d177024..8f3ab22 100644
--- a/src/Pre_processing/ReadInputLines.f90
+++ b/src/Pre_processing/ReadInputLines.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -41,13 +40,13 @@ integer(4),dimension(20) :: NumberEntities
 integer(4),dimension(NumBVertices) :: BoundaryVertex
 type (TyBoundaryStretch),dimension(NumTratti) :: Tratto
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4),parameter :: MAXLINENODES = 20
 integer(4) :: n,i,ioerr,i1,index,numv,numv_line,ipointer
 character(5) :: txt
-character(100) :: token
+character(80) :: token
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputMedium.f90 b/src/Pre_processing/ReadInputMedium.f90
index c64072a..35ad95b 100644
--- a/src/Pre_processing/ReadInputMedium.f90
+++ b/src/Pre_processing/ReadInputMedium.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -40,14 +39,14 @@ integer(4) :: nrighe,ier, ninp,nout,nscr
 integer(4),dimension(20) :: NumberEntities
 type (TyMedium),dimension(NMedium) :: Med
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: index,nitersol,ioerr
 double precision :: den0,eps,alfaMon,betaMon,visc,viscmx,taucri,cuin,phi,Cs
 double precision :: cons,codif,Settling,coes,Rough,D50,Gamma,InitialIntEn,d_90
 double precision :: porosity
 character(8) :: tipo,erosionmodel
-character(100) :: token
-character(100),external :: GetToken,lcase
+character(80) :: token
+character(80),external :: GetToken,lcase
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
diff --git a/src/Pre_processing/ReadInputOutputRegulation.f90 b/src/Pre_processing/ReadInputOutputRegulation.f90
index 0af93a0..861df93 100644
--- a/src/Pre_processing/ReadInputOutputRegulation.f90
+++ b/src/Pre_processing/ReadInputOutputRegulation.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -38,14 +37,14 @@ implicit none
 type (TyMedium), dimension(NMedium) :: Med
 integer(4) :: nrighe,ier, ninp,nout
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: iplot_fr,imemo_fr,irest_fr,icpoi_fr,ipllb_fr,ipllb_md,n,ioutopt
 integer(4) :: ioutpo2,ioerr
 double precision :: plot_fr,memo_fr,rest_fr,cpoi_fr,pllb_fr,depth_dt_out
-character(100) :: token
+character(80) :: token
 character(7),dimension(3) :: outopt = (/ "full   ","partial","null   " /)
 logical,external :: ReadCheck
-character(100),external :: GetToken,lcase
+character(80),external :: GetToken,lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputParticlesData.f90 b/src/Pre_processing/ReadInputParticlesData.f90
index 73ab3fd..6c903c2 100644
--- a/src/Pre_processing/ReadInputParticlesData.f90
+++ b/src/Pre_processing/ReadInputParticlesData.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -41,17 +40,17 @@ integer(4):: nrighe,ier,ninp,nout,Medium,npointv,icolor
 integer(4),dimension(20) :: NumberEntities
 double precision :: valp
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 character(1) :: bends,slip
 character(3) :: move
 character(2) :: pressu
 double precision,dimension(3) :: values3
 double precision,dimension(0:3,maxpointsvlaw) :: valuev
 integer(4) :: ioerr,i,n,icord
-character(100) :: token
+character(80) :: token
 character(6) :: token_color
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputRestart.f90 b/src/Pre_processing/ReadInputRestart.f90
index 7826023..5a4d959 100644
--- a/src/Pre_processing/ReadInputRestart.f90
+++ b/src/Pre_processing/ReadInputRestart.f90
@@ -1,28 +1,27 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: ReadInputRestart                           
-! Description: To read the restart parameters from the main input file.                       
+! Description:                        
 !----------------------------------------------------------------------------------------------------------------------------------
 
 subroutine ReadInputRestart(ainp,comment,nrighe,ier,ninp,nout)
@@ -37,12 +36,12 @@ use Hybrid_allocation_module
 implicit none
 integer(4) :: nrighe,ier,ninp,nout
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 logical :: restartOK
 integer(4) :: ioerr
-character(100) :: token
+character(80) :: token
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -63,7 +62,7 @@ do while (TRIM(lcase(ainp))/="##### end restart #####")
          token = lcase(GetToken(ainp,2,ioerr))
          if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"RESTART DATA STEP value",  &
             ninp,nout)) return
-         read(token,*,iostat=ioerr) Domain%istart
+         read (token,*,iostat=ioerr) Domain%istart
          if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"RESTART DATA STEP value",  &
             ninp,nout)) return
          if ((ncord>0).AND.(nout>0)) then
@@ -80,16 +79,16 @@ do while (TRIM(lcase(ainp))/="##### end restart #####")
          token = lcase(GetToken(ainp,2,ioerr))
          if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"RESTART DATA TIME value",  &
             ninp,nout)) return
-         read(token,*,iostat=ioerr) Domain%start
+         read (token,*,iostat=ioerr) Domain%start
          if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"RESTART DATA TIME value",  &
             ninp,nout)) return
          if ((ncord>0).and.(nout>0)) then
-            write(nout,"(1x,a,f20.12)") "Restart from time: ",Domain%start
+            write (nout,"(1x,a,f20.12)") "Restart from time: ",Domain%start
             if (Domain%start<zero) write (nout,"(1x,a)")                       &
                "Negative restart time!"
 ! Only the last read option keeps active
             if (Domain%istart>0) then
-               write(nout,"(1x,a,i12,a)") "Restart from step: ",Domain%istart, &
+               write (nout,"(1x,a,i12,a)") "Restart from step: ",Domain%istart,&
                   " option ignored!"
                Domain%istart = 0 
             endif
@@ -99,15 +98,15 @@ do while (TRIM(lcase(ainp))/="##### end restart #####")
          if ((ncord>0).and.(nout>0)) then
             inquire(file=Domain%file,exist=restartOK)
             if (restartOK) then
-               write(nout,"(1x,3a)") "Restart file: ",trim(Domain%file)
+               write (nout,"(1x,3a)") "Restart file: ",trim(Domain%file)
                else
-                  write(nout,"(1x,3a)") "Restart file: ",trim(Domain%file),    &
+                  write (nout,"(1x,3a)") "Restart file: ",trim(Domain%file),   &
                      " not found!"
             endif
          endif
    end select
    call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
-   if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"RESTART DATA",ninp,nout)) return
+   if (.NOT.ReadCheck (ioerr,ier,nrighe,ainp,"RESTART DATA",ninp,nout)) return
 enddo
 !------------------------
 ! Deallocations
diff --git a/src/Pre_processing/ReadInputRunParameters.f90 b/src/Pre_processing/ReadInputRunParameters.f90
index 31da1d1..d72956f 100644
--- a/src/Pre_processing/ReadInputRunParameters.f90
+++ b/src/Pre_processing/ReadInputRunParameters.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -37,15 +36,15 @@ use Hybrid_allocation_module
 implicit none
 integer(4) :: nrighe,ier,ninp,nout,nscr
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: itmax
 double precision :: tmax,CFL,TetaP,TetaV,COEFNMAXPARTJ,COEFNMAXPARTI
 integer(4) :: ioerr,time_split,RKscheme,body_part_reorder,MAXCLOSEBOUNDFACES
 integer(4) :: MAXNUMCONVEXEDGES,GCBFVecDim_loc,density_thresholds
 character(1) :: Psurf
-character(100) :: token
+character(80) :: token
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadInputTitle.f90 b/src/Pre_processing/ReadInputTitle.f90
index a03000e..364eee1 100644
--- a/src/Pre_processing/ReadInputTitle.f90
+++ b/src/Pre_processing/ReadInputTitle.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -36,9 +35,9 @@ use Static_allocation_module
 implicit none
 integer(4) :: nrighe,ier,ninp,nout
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: n,ioerr
-character(100),external :: lcase
+character(80),external :: lcase
 logical,external :: ReadCheck
 !------------------------
 ! Explicit interfaces
diff --git a/src/Pre_processing/ReadInputVertices.f90 b/src/Pre_processing/ReadInputVertices.f90
index c4b7870..5cca9c7 100644
--- a/src/Pre_processing/ReadInputVertices.f90
+++ b/src/Pre_processing/ReadInputVertices.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -41,12 +40,12 @@ integer(4) :: nrighe,ier,ninp,nout
 integer(4),dimension(20) :: NumberEntities
 double precision,dimension(1:SPACEDIM,NumVertici) :: Vertice
 character(1) :: comment
-character(100) :: ainp
+character(80) :: ainp
 integer(4) :: n,i,icord,ioerr
 double precision,dimension(3) :: values1
 character(8) :: label
 logical,external :: ReadCheck
-character(100),external :: lcase, GetToken
+character(80),external :: lcase, GetToken
 !------------------------
 ! Explicit interfaces
 !------------------------
diff --git a/src/Pre_processing/ReadRestartFile.f90 b/src/Pre_processing/ReadRestartFile.f90
index d4047e4..10c3ad4 100644
--- a/src/Pre_processing/ReadRestartFile.f90
+++ b/src/Pre_processing/ReadRestartFile.f90
@@ -1,28 +1,27 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
-! Program unit: ReadRestartFile                              
-! Description: To read the restart file.                        
+! Program unit: To read results file for restart purposes.                              
+! Description: Not recommended (not validated).                        
 !----------------------------------------------------------------------------------------------------------------------------------
 
 subroutine ReadRestartFile(option,ier,nrecords)
@@ -39,12 +38,12 @@ use Dynamic_allocation_module
 implicit none
 character(7),intent(IN) :: option
 integer(4),intent(INOUT) :: ier,nrecords 
-integer(4) :: restartcode,save_istart,ioerr,i
+integer(4) :: restartcode,save_istart,ioerr
 double precision :: save_start
 character(12) :: ainp = "Restart File"
 character(len=8) :: versionerest
 logical,external :: ReadCheck
-character(100),external :: lcase
+character(80),external :: lcase
 !------------------------
 ! Explicit interfaces
 !------------------------
@@ -60,15 +59,27 @@ character(100),external :: lcase
 ier = 0
 ! Restart heading 
 if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
-   rewind(nsav)
+   rewind (nsav)
    write(nout,'(a)')    "-------------------"
    write(nout,"(1x,a)") ">> Restart heading."
    write(nout,'(a)')    "-------------------"
-   read(nsav,iostat=ioerr) versionerest,nrecords
+   write(nscr,'(a)')    "-------------------"
+   write(nscr,"(1x,a)") ">> Restart heading."
+   write(nscr,'(a)')    "-------------------"
+   read (nsav,iostat=ioerr) versionerest,nrecords
    if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"versionerest,nrecords",nsav,    &
       nout)) return
 ! Check the program version
    if (TRIM(lcase(version))/=TRIM(lcase(versionerest))) then
+      write(nout,'(a)')                                                        &
+         "---------------------------------------------------------------"
+      write(nout,"(1x,a)")                                                     &
+         ">> ERROR! The Restart version is not equal the current version."
+      write(nout,"(1x,a)")                                                     &
+         ">>        The Run is stopped."
+      write(nout,'(a)')                                                        &
+         "---------------------------------------------------------------"
+      flush(nout)
       write(nscr,'(a)')                                                        &
          "---------------------------------------------------------------"
       write(nscr,"(1x,a)")                                                     &
@@ -79,24 +90,28 @@ if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
       flush(nscr)
       stop
    endif
-   read(nsav,iostat=ioerr) ncord,nag,NMedium,NPartZone,NumVertici,NumFacce,    &
+   read (nsav,iostat=ioerr) Ncord,Nag,NMedium,NPartZone,NumVertici,NumFacce,   &
       NumTratti,NumBVertices,NumBSides,NPointst,NPoints,NPointsl,NPointse,     &
       NLines,NSections,GCBFVecDim,doubleh
    if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"ncord, nag, ...",nsav,nout))    &
       return
    elseif (TRIM(lcase(option))=="reading") then
       write(nout,'(a)')                                                        &
-         "---------------------------------------------------------------------"
-      write(nout,"(1x,a)")                                                     &
-         ">> Restart reading:  step         time      interval    num.particles"
+         "-----------------------------------------------------------------------"
+      write(nout,"(1x,a)")                                                     & 
+         ">> Restart reading:  step          time      interval    num.particles"
+      write(nscr,'(a)')                                                        &
+         "-----------------------------------------------------------------------"
+      write(nscr,"(1x,a)")                                                     &
+         ">> Restart reading:  step          time      interval    num.particles"
       save_istart = Domain%istart
-      save_start = Domain%start
-      read(nsav,iostat=ioerr) domain
+      save_start  = Domain%start
+      read (nsav,iostat=ioerr) domain
       if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"domain",nsav,nout)) return
-      read(nsav,iostat=ioerr) grid
+      read (nsav,iostat=ioerr) grid
       if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"grid",nsav,nout)) return
 ! Allocating the 2D matrix to detect free surface (erosion criterion)
-      allocate(ind_interfaces(Grid%ncd(1),Grid%ncd(2),4),stat=ioerr)
+      allocate (ind_interfaces(Grid%ncd(1),Grid%ncd(2),4),stat=ioerr)
       if (ioerr/=0) then
          write (nout,'(1x,a,i2)')                                              &
             "    Array ind_interfaces not allocated. Error code: ",ioerr
@@ -105,120 +120,86 @@ if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
             write (nout,'(1x,a)')                                              &
                "    Array ind_interfaces successfully allocated "
       endif
-      read(nsav,iostat=ioerr) Med(1:NMedium)
+      read (nsav,iostat=ioerr) Med(1:NMedium)
       if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"Med",nsav,nout)) return
       if (NumVertici>0) then
-         read(nsav,iostat=ioerr) Vertice(1:SPACEDIM,1:NumVertici)
+         read (nsav,iostat=ioerr) Vertice(1:SPACEDIM,1:NumVertici)
          if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"Vertice",nsav,nout)) return
       endif
       if (NumFacce>0) then 
-         read(nsav,iostat=ioerr) BoundaryFace(1:NumFacce)
+         read (nsav,iostat=ioerr) BoundaryFace(1:NumFacce)
          if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"BoundaryFace",nsav,nout)) &
             return
       endif
       if (NumFacce>0) then
-         read(nsav,iostat=ioerr) BFaceList(1:NumFacce)
+         read (nsav,iostat=ioerr) BFaceList(1:NumFacce)
          if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"BFaceList",nsav,nout))    &
             return
       endif
       if (NumTratti>0) then
-         read(nsav,iostat=ioerr) Tratto(1:NumTratti)
+         read (nsav,iostat=ioerr) Tratto(1:NumTratti)
          if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"Tratto",nsav,nout)) return
       endif
       if (NPartZone>0) then
-         read(nsav,iostat=ioerr) Partz(1:NPartZone)
+         read (nsav,iostat=ioerr) Partz(1:NPartZone)
          if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"Partz",nsav,nout)) return
       endif
       if (NumBVertices>0) then
-        read(nsav,iostat=ioerr) BoundaryVertex(1:NumBVertices)
+        read (nsav,iostat=ioerr) BoundaryVertex(1:NumBVertices)
         if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"BoundaryVertex",nsav,nout))&
            return
       endif
-      if (NumBSides>1) then
-         read(nsav,iostat=ioerr) BoundarySide(1:NumBSides)
+      if (NumBSides>0) then
+         read (nsav,iostat=ioerr) BoundarySide(1:NumBSides)
          if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"BoundarySide",nsav,nout)) &
             return
-         else
-            read(nsav,iostat=ioerr) BoundarySide(1)
-            if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"BoundarySide",nsav,    &
-               nout)) return
       endif
 ! Restart positions are based on the step number
       it_start = 0 
       if (save_istart>0) then
-! It reads all the saved steps and overwrite the restart values until the   
-! restart time is reached.
          do while (save_istart>it_start)
             read(nsav,iostat=ioerr) it_start,tempo,dt,nag,ncord,restartcode
             if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,                        &
                "it_start,tempo,dt,nag,ncord,restartcode",nsav,nout)) return
             write(nout,"(16x,i10,2(2x,g12.5),7x,i10)") it_start,tempo,dt,nag
             flush(nout)
+            write(nscr,"(16x,i10,2(2x,g12.5),7x,i10)") it_start,tempo,dt,nag
+            flush(nscr)
             if (it_start<save_istart) then
-               read(nsav,iostat=ioerr) 
+               read (nsav,iostat=ioerr) 
                if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"...",nsav,nout))    &
                   return
                else
 ! Reading for restart
                   if (restartcode==1) then
-                     read(nsav,iostat=ioerr) pg(1:nag)
+                     read (nsav,iostat=ioerr) pg(1:nag)
                      if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"pg",nsav,     &
                         nout)) return
-                     if (allocated(pg_w)) then
-                        read(nsav,iostat=ioerr) pg_w(1:DBSPH%n_w+DBSPH%n_inlet+&
-                           DBSPH%n_outlet)
-                        if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"pg_w",nsav,&
-                           nout)) return
-                     endif
-                     if (n_bodies>0) then
-                        do i=1,n_bodies
-                           read(nsav,iostat=ioerr) body_arr(i)%npart,          &
-                              body_arr(i)%Ic_imposed,body_arr(i)%n_elem,       &
-                              body_arr(i)%imposed_kinematics,                  &
-                              body_arr(i)%n_records,body_arr%mass,             &
-                              body_arr(i)%umax,body_arr(i)%pmax,               &
-                              body_arr(i)%x_CM,body_arr(i)%alfa,               &
-                              body_arr(i)%x_rotC,body_arr(i)%u_CM,             &
-                              body_arr(i)%omega,body_arr(i)%Force,             &
-                              body_arr(i)%Moment,body_arr(i)%Ic,               &
-                              body_arr(i)%Ic_inv,body_arr(i)%body_kinematics,  &
-                              body_arr(i)%elem
-                        enddo
-                        if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"body_arr", &
-                           nsav,nout)) return
-                        read(nsav,iostat=ioerr) bp_arr(1:n_body_part)
-                        if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"bp_arr",   &
-                           nsav,nout)) return  
-                        read(nsav,iostat=ioerr) surf_body_part(1:              &
-                           n_surf_body_part)
-                        if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,            &
-                           "surf_body_part",nsav,nout)) return
-                     endif   
-                     if (allocated(Z_fluid_max)) then
-                        read(nsav,iostat=ioerr)                                &
-                           Z_fluid_max(1:Grid%ncd(1)*Grid%ncd(2))
-                        if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,            &
-                           "Z_fluid_max",nsav,nout)) return
-                     endif
-                     if (allocated(q_max)) then
-                        read(nsav,iostat=ioerr)                                &
-                           q_max(1:Grid%ncd(1)*Grid%ncd(2))
-                        if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"q_max",nsav&
-                           ,nout)) return
-                     endif
                      write(nout,'(a)') " "
                      write(nout,'(a,i10,a,g12.5)') "   Located Restart Step :",&
                         it_start,"   Time :",tempo; flush(nout)
+                     write(nscr,'(a)') " "
+                     write(nscr,'(a,i10,a,g12.5)') "   Located Restart Step :",&
+                        it_start,"   Time :",tempo; flush(nscr)
 ! Reading for post-processing
                      elseif (restartcode==0) then
-                        read(nsav,iostat=ioerr) pg(1:nag)%coord(1),            &
-                           pg(1:nag)%coord(2),pg(1:nag)%coord(3),              &
+                        read (nsav,iostat=ioerr) pg(1:nag)%coord(1),           &
+                           pg(1:nag)%coord(2),pg(1:nag)%coord(3), &
                            pg(1:nag)%vel(1),pg(1:nag)%vel(2),pg(1:nag)%vel(3), &
                            pg(1:nag)%pres,pg(1:nag)%dens,pg(1:nag)%mass,       &
                            pg(1:nag)%visc,pg(1:nag)%IntEn,pg(1:nag)%VolFra,    &
                            pg(1:nag)%imed,pg(1:nag)%icol
                         if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"pg",nsav,  &
                            nout)) return
+                        write(nout,'(a)') " "
+                        write(nout,'(a,i10,a,g12.5)')                          &
+                           "   Located Result Step :",it_start,"   Time :",tempo
+                        flush(nout)
+                        write(nout,'(a)')                                      &
+"       But this step is not a restart step. Check the correct step for restart in the restart file."
+                        flush(nout)
+                        write(nout,'(a)') " The program is terminated."
+                        flush(nout)
                         write(nscr,'(a)') " "
                         write(nscr,'(a,i10,a,g12.5)')                          &
                            "   Located Result Step :",it_start,"   Time :",tempo
@@ -233,6 +214,8 @@ if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
                   return
             endif
          enddo
+         write(nout,'(a,i10,a)') "   Restart Step Number:",it_start,           &
+            " has not been found"
          write(nscr,'(a,i10,a)') "   Restart Step Number:",it_start,           &
             " has not been found"
          ier = 3
@@ -245,66 +228,31 @@ if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
                   "it_start,tempo,dt,nag,ncord,restartcode",nsav,nout)) return
                write(nout,"(16x,i10,2(2x,g12.5),7x,i10)") it_start,tempo,dt,nag
                flush(nout)
+               write(nscr,"(16x,i10,2(2x,g12.5),7x,i10)") it_start,tempo,dt,nag
+               flush(nscr)
                if (tempo<Domain%start) then
-                  read(nsav,iostat=ioerr) 
+                  read (nsav,iostat=ioerr) 
                   if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"...",nsav,nout)) &
                      return
                   else
 ! Reading for restart
                      if (restartcode==1) then
-                        read(nsav,iostat=ioerr) pg(1:nag)
+                        read (nsav,iostat=ioerr) pg(1:nag)
                         if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"pg",nsav,  &
                            nout)) return
-                        if (allocated(pg_w)) then
-                           read(nsav,iostat=ioerr) pg_w(1:                     &
-                              DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet)
-                           if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"pg_w",  &
-                              nsav,nout)) return  
-                        endif
-                        if (n_bodies>0) then
-                           do i=1,n_bodies
-                              read(nsav,iostat=ioerr) body_arr(i)%npart,       &
-                                 body_arr(i)%Ic_imposed,body_arr(i)%n_elem,    &
-                                 body_arr(i)%imposed_kinematics,               &
-                                 body_arr(i)%n_records,body_arr%mass,          &
-                                 body_arr(i)%umax,body_arr(i)%pmax,            &
-                                 body_arr(i)%x_CM,body_arr(i)%alfa,            &
-                                 body_arr(i)%x_rotC,body_arr(i)%u_CM,          &
-                                 body_arr(i)%omega,body_arr(i)%Force,          &
-                                 body_arr(i)%Moment,body_arr(i)%Ic,            &
-                                 body_arr(i)%Ic_inv,body_arr(i)%body_kinematics&
-                                 ,body_arr(i)%elem
-                           enddo
-                           if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,         &
-                              "body_arr",nsav,nout)) return
-                           read(nsav,iostat=ioerr) bp_arr(1:n_body_part)
-                           if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"bp_arr",&
-                              nsav,nout)) return  
-                           read(nsav,iostat=ioerr) surf_body_part(1:           &
-                              n_surf_body_part)
-                           if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,         &
-                              "surf_body_part",nsav,nout)) return
-                        endif  
-                        if (allocated(Z_fluid_max)) then
-                           read(nsav,iostat=ioerr) Z_fluid_max(1:Grid%ncd(1)*  &
-                              Grid%ncd(2))
-                           if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,         &
-                              "Z_fluid_max",nsav,nout)) return
-                        endif
-                        if (allocated(q_max)) then
-                           read(nsav,iostat=ioerr) q_max(1:                    &
-                              Grid%ncd(1)*Grid%ncd(2))
-                           if (.NOT.ReadCheck(ioerr,ier,it_start,ainp,"q_max", &
-                              nsav,nout)) return
-                        endif
                         write(nout,'(a)') 
                         write(nout,'(a,i10,a,g12.5)')                          &
                            "   Located Restart Step :",it_start,"   Time :",   &
                            tempo
                         flush(nout)
+                        write(nscr,'(a)') 
+                        write(nscr,'(a,i10,a,g12.5)')                          &
+                           "   Located Restart Step :",it_start,"   Time :",   &
+                           tempo
+                        flush(nscr)
 ! Reading for post-processing
                         elseif (restartcode==0) then
-                           read(nsav,iostat=ioerr) pg(1:nag)%coord(1),         &
+                           read (nsav,iostat=ioerr) pg(1:nag)%coord(1),        &
                               pg(1:nag)%coord(2),pg(1:nag)%coord(3),           &
                               pg(1:nag)%vel(1),pg(1:nag)%vel(2),               &
                               pg(1:nag)%vel(3),pg(1:nag)%pres,pg(1:nag)%dens,  &
@@ -317,6 +265,16 @@ if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
                               "   Located Result Time :",it_start,"   Time :", &
                               tempo
                            flush(nout)
+                           write(nout,'(a)')                                   &
+"       But this time is not a restart time. Check the correct time for restart in the restart file."
+                           flush(nout)
+                           write(nout,'(a)') " The program is terminated."
+                           flush(nout)
+                           write(nscr,'(a)') 
+                           write(nscr,'(a,i10,a,g12.5)')                       &
+                              "   Located Result Time :",it_start,"   Time :", &
+                              tempo
+                           flush(nscr)
                            write(nscr,'(a)')                                   &
 "       But this time is not a restart time. Check the correct time for restart in the restart file."
                            flush(nscr)
@@ -327,16 +285,22 @@ if (TRIM(lcase(option))==TRIM(lcase("heading"))) then
                   return
                endif
             enddo
+            write(nout,'(a,i10,a)') "   Restart Time Step:",Domain%start,      &
+               " has not been found"
             write(nscr,'(a,i10,a)') "   Restart Time Step:",Domain%start,      &
                " has not been found"
             ier = 3
             else
+               write (nout,'(a)') "  > Restart cannot be read at step:",       &
+                  it_start,"  time:",tempo
                write (nscr,'(a)') "  > Restart cannot be read at step:",       &
                   it_start,"  time:",tempo
                ier = 4
       endif
       write (nout,'(a)') "  > Restart read successfully at step:",it_start,    &
          "  time:",tempo
+      write (nscr,'(a)') "  > Restart read successfully at step:",it_start,    &
+         "  time:",tempo
       else
          ier = 5
 endif
diff --git a/src/Pre_processing/ReadRiga.f90 b/src/Pre_processing/ReadRiga.f90
index 82fea4f..7928c61 100644
--- a/src/Pre_processing/ReadRiga.f90
+++ b/src/Pre_processing/ReadRiga.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Pre_processing/ReadSectionFlowRate.f90 b/src/Pre_processing/ReadSectionFlowRate.f90
index 6731c00..063e51b 100644
--- a/src/Pre_processing/ReadSectionFlowRate.f90
+++ b/src/Pre_processing/ReadSectionFlowRate.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -38,7 +37,7 @@ use Dynamic_allocation_module
 implicit none
 integer(4) :: nrighe,ier,ninp,nout
 character(1) :: comment
-character(100) :: ainp,lcase 
+character(80) :: ainp,lcase 
 integer(4) :: n_fluid_types,ioerr,i,n_sect,n_vertices,section_ID
 double precision :: dt_out,aux_dis,area
 double precision :: plane_normal(3),vec_aux_1(3),vec_aux_2(3),vec_aux_3(3)
@@ -59,14 +58,14 @@ logical,external :: ReadCheck
 !------------------------
 ! In case of restart, input data sections are not read
 if (restart) then
-   do while (TRIM(lcase(ainp))/="##### end section flow rate #####")
-      call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+   do while (TRIM(lcase(ainp))/="##### end Section_flow_rate #####")
+      call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
       if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"Section_flow_rate DATA",ninp,  &
          nout)) return
    enddo
    return
 endif
-call ReadRiga(ainp,comment,nrighe,ioerr,ninp)
+call ReadRiga (ainp,comment,nrighe,ioerr,ninp)
 if (.NOT.ReadCheck(ioerr,ier,nrighe,ainp,"Section_flow_rate DATA",ninp,nout))  &
    return
 do while (TRIM(lcase(ainp))/="##### end section flow rate #####")
diff --git a/src/Pre_processing/defcolpartzero.f90 b/src/Pre_processing/defcolpartzero.f90
index c5db4d1..d63b666 100644
--- a/src/Pre_processing/defcolpartzero.f90
+++ b/src/Pre_processing/defcolpartzero.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Pre_processing/diagnostic.f90 b/src/Pre_processing/diagnostic.f90
index 6e4d752..b718838 100644
--- a/src/Pre_processing/diagnostic.f90
+++ b/src/Pre_processing/diagnostic.f90
@@ -1,30 +1,30 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: diagnostic                   
 ! Description: Diagnostic (error) messages.                
 !----------------------------------------------------------------------------------------------------------------------------------
-subroutine diagnostic(ierr,ivalue,avalue)
+
+subroutine diagnostic (ierr,ivalue,avalue)
 !------------------------
 ! Modules
 !------------------------ 
diff --git a/src/SA_SPH/AddBoundaryContribution_to_CE2D.f90 b/src/SA_SPH/AddBoundaryContribution_to_CE2D.f90
index 51a200d..eb1d60e 100644
--- a/src/SA_SPH/AddBoundaryContribution_to_CE2D.f90
+++ b/src/SA_SPH/AddBoundaryContribution_to_CE2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/AddBoundaryContribution_to_CE3D.f90 b/src/SA_SPH/AddBoundaryContribution_to_CE3D.f90
index d5aa862..cc05396 100644
--- a/src/SA_SPH/AddBoundaryContribution_to_CE3D.f90
+++ b/src/SA_SPH/AddBoundaryContribution_to_CE3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/AddBoundaryContributions_to_ME2D.f90 b/src/SA_SPH/AddBoundaryContributions_to_ME2D.f90
index eb22feb..130d0d5 100644
--- a/src/SA_SPH/AddBoundaryContributions_to_ME2D.f90
+++ b/src/SA_SPH/AddBoundaryContributions_to_ME2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -306,9 +305,7 @@ do icbs=1,IntNcbs
             TT(i) = TN * nnlocal(i)
          enddo
 ! Shear viscosity force (with changed sign)
-         if (pg(npi)%laminar_flag==1) then
-            SVforce = SVcoeff * (cinvisci + cinvisci) * IntWd1s0
-         endif
+         SVforce = SVcoeff * (cinvisci + cinvisci) * IntWd1s0
          do i=1,PLANEDIM
             ViscoMon(i) = ViscoMon(i) + TT(i)
 ! explosion
diff --git a/src/SA_SPH/AddBoundaryContributions_to_ME3D.f90 b/src/SA_SPH/AddBoundaryContributions_to_ME3D.f90
index 221e241..15a5ac3 100644
--- a/src/SA_SPH/AddBoundaryContributions_to_ME3D.f90
+++ b/src/SA_SPH/AddBoundaryContributions_to_ME3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -145,11 +144,9 @@ face_loop: do icbf = 1,Ncbf
 ! Explosion
          endif
          if (cinvisci>zero) then
-            if (pg(npi)%laminar_flag==1) then
-               cinviscmult = two * cinvisci * IntdWrm1dV *                     &
-                             Tratto(stretch)%ShearCoeff
-               ViscoShear(:) = ViscoShear(:) + cinviscmult * dvij(:)
-            endif
+            cinviscmult = two * cinvisci * IntdWrm1dV *                        &
+               Tratto(stretch)%ShearCoeff
+            ViscoShear(:) = ViscoShear(:) + cinviscmult * dvij(:)
          endif
       endif
       elseif (stretchtype=="velo") then 
diff --git a/src/SA_SPH/AddElasticBoundaryReaction_2D.f90 b/src/SA_SPH/AddElasticBoundaryReaction_2D.f90
index 3c683f3..058e077 100644
--- a/src/SA_SPH/AddElasticBoundaryReaction_2D.f90
+++ b/src/SA_SPH/AddElasticBoundaryReaction_2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/AddElasticBoundaryReaction_3D.f90 b/src/SA_SPH/AddElasticBoundaryReaction_3D.f90
index 0c816f0..276e081 100644
--- a/src/SA_SPH/AddElasticBoundaryReaction_3D.f90
+++ b/src/SA_SPH/AddElasticBoundaryReaction_3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/BoundaryMassForceMatrix2D.f90 b/src/SA_SPH/BoundaryMassForceMatrix2D.f90
index 580a322..f4cebc1 100644
--- a/src/SA_SPH/BoundaryMassForceMatrix2D.f90
+++ b/src/SA_SPH/BoundaryMassForceMatrix2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/BoundaryMassForceMatrix3D.f90 b/src/SA_SPH/BoundaryMassForceMatrix3D.f90
index 37a3fe8..3429188 100644
--- a/src/SA_SPH/BoundaryMassForceMatrix3D.f90
+++ b/src/SA_SPH/BoundaryMassForceMatrix3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/BoundaryPressureGradientMatrix3D.f90 b/src/SA_SPH/BoundaryPressureGradientMatrix3D.f90
index 6d6cb0b..17c1d22 100644
--- a/src/SA_SPH/BoundaryPressureGradientMatrix3D.f90
+++ b/src/SA_SPH/BoundaryPressureGradientMatrix3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/BoundaryReflectionMatrix2D.f90 b/src/SA_SPH/BoundaryReflectionMatrix2D.f90
index 55007ad..61a1464 100644
--- a/src/SA_SPH/BoundaryReflectionMatrix2D.f90
+++ b/src/SA_SPH/BoundaryReflectionMatrix2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/BoundaryVolumeIntegrals2D.f90 b/src/SA_SPH/BoundaryVolumeIntegrals2D.f90
index f79300e..09bd24f 100644
--- a/src/SA_SPH/BoundaryVolumeIntegrals2D.f90
+++ b/src/SA_SPH/BoundaryVolumeIntegrals2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/CompleteBoundaries3D.f90 b/src/SA_SPH/CompleteBoundaries3D.f90
index 154ed79..17bc81b 100644
--- a/src/SA_SPH/CompleteBoundaries3D.f90
+++ b/src/SA_SPH/CompleteBoundaries3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/ComputeBoundaryDataTab.f90 b/src/SA_SPH/ComputeBoundaryDataTab.f90
index 7020002..8229702 100644
--- a/src/SA_SPH/ComputeBoundaryDataTab.f90
+++ b/src/SA_SPH/ComputeBoundaryDataTab.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/ComputeBoundaryIntegralTab.f90 b/src/SA_SPH/ComputeBoundaryIntegralTab.f90
index c857759..0359299 100644
--- a/src/SA_SPH/ComputeBoundaryIntegralTab.f90
+++ b/src/SA_SPH/ComputeBoundaryIntegralTab.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/ComputeBoundaryVolumeIntegrals_P0.f90 b/src/SA_SPH/ComputeBoundaryVolumeIntegrals_P0.f90
index bb9fd5d..fa99560 100644
--- a/src/SA_SPH/ComputeBoundaryVolumeIntegrals_P0.f90
+++ b/src/SA_SPH/ComputeBoundaryVolumeIntegrals_P0.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/ComputeKernelTable.f90 b/src/SA_SPH/ComputeKernelTable.f90
index bc23bb6..8bfde68 100644
--- a/src/SA_SPH/ComputeKernelTable.f90
+++ b/src/SA_SPH/ComputeKernelTable.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/ComputeSurfaceIntegral_WdS2D.f90 b/src/SA_SPH/ComputeSurfaceIntegral_WdS2D.f90
index 8b4ae7d..6ecb771 100644
--- a/src/SA_SPH/ComputeSurfaceIntegral_WdS2D.f90
+++ b/src/SA_SPH/ComputeSurfaceIntegral_WdS2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/ComputeVolumeIntegral_WdV2D.f90 b/src/SA_SPH/ComputeVolumeIntegral_WdV2D.f90
index 9277624..42eb1c6 100644
--- a/src/SA_SPH/ComputeVolumeIntegral_WdV2D.f90
+++ b/src/SA_SPH/ComputeVolumeIntegral_WdV2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/DefineBoundaryFaceGeometry3D.f90 b/src/SA_SPH/DefineBoundaryFaceGeometry3D.f90
index d2e676b..df4a34a 100644
--- a/src/SA_SPH/DefineBoundaryFaceGeometry3D.f90
+++ b/src/SA_SPH/DefineBoundaryFaceGeometry3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/DefineBoundarySideGeometry2D.f90 b/src/SA_SPH/DefineBoundarySideGeometry2D.f90
index ee8ff00..8979232 100644
--- a/src/SA_SPH/DefineBoundarySideGeometry2D.f90
+++ b/src/SA_SPH/DefineBoundarySideGeometry2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/DefineBoundarySideRelativeAngles2D.f90 b/src/SA_SPH/DefineBoundarySideRelativeAngles2D.f90
index ba7187c..05c76bb 100644
--- a/src/SA_SPH/DefineBoundarySideRelativeAngles2D.f90
+++ b/src/SA_SPH/DefineBoundarySideRelativeAngles2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/DefineLocalSystemVersors.f90 b/src/SA_SPH/DefineLocalSystemVersors.f90
index dfa61ff..81c189e 100644
--- a/src/SA_SPH/DefineLocalSystemVersors.f90
+++ b/src/SA_SPH/DefineLocalSystemVersors.f90
@@ -1,31 +1,30 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: DefineLocalSystemVersors                                      
-! Description:  To define the directional cosines of the local reference system (Di Monaco et al., 2011, EACFM). Further 
-!               modifications take into account pentagon and hexagon faces (only for complex "perimeter" zones / fluid reseroirs, 
-!               not for SASPH frontiers).                         
+! Description:  To define the directional cosines of the local reference system.  
+!              (Di Monaco et al., 2011, EACFM)                        
 !----------------------------------------------------------------------------------------------------------------------------------
+
 subroutine DefineLocalSystemVersors(Nf)
 !------------------------
 ! Modules
@@ -40,7 +39,7 @@ implicit none
 integer(4) :: Nf
 integer(4) :: i,j,n,nnodes,sidek,refnode,nod
 double precision :: U1len,W12len,LocX
-double precision,dimension(SPACEDIM) :: RR,ss,nnlocal,U1,U2,W12
+double precision,dimension(SPACEDIM) ::  RR,ss,nnlocal,U1,U2,W12
 integer(4),dimension(2,3) :: nindex 
 !------------------------
 ! Explicit interfaces
@@ -58,16 +57,13 @@ nindex(1, 3) = 3
 nindex(2, 1) = 1
 nindex(2, 2) = 3
 nindex(2, 3) = 4
-nnodes = 6
-if (BoundaryFace(nf)%Node(6)%name<0) nnodes = 5
-if (BoundaryFace(nf)%Node(5)%name<0) nnodes = 4
-if (BoundaryFace(Nf)%Node(4)%name<0) nnodes = 3
-BoundaryFace(Nf)%nodes = nnodes
+nnodes = 4
 !------------------------
 ! Statements
 !------------------------
-! sidek=1 (for triangles), sidek=2 (for quadrilaterals), sidek=3 (for pentagons)         
-! sidek=4 (for hexagons) 
+if (BoundaryFace(Nf)%Node(4)%name<=0) nnodes = 3
+BoundaryFace(Nf)%nodes = nnodes
+! sidek=1 (triangle),  sidek=2 (parallelogram)
 sidek = nnodes - 2                   
 do n=1,nnodes                     
     nod = BoundaryFace(nf)%Node(n)%name
@@ -79,7 +75,7 @@ enddo
 U1(1:SPACEDIM) = BoundaryFace(Nf)%Node(nindex(sidek,1))%GX(1:SPACEDIM) -       &
    BoundaryFace(Nf)%Node(nindex(sidek,3))%GX(1:SPACEDIM)
 U2(1:SPACEDIM) = BoundaryFace(Nf)%Node(nindex(sidek,2))%GX(1:SPACEDIM) -       &
-   BoundaryFace(Nf)%Node(nindex(sidek,3))%GX(1:SPACEDIM)
+   BoundaryFace(Nf)%Node(nindex(sidek, 3))%GX(1:SPACEDIM)
 ! Length of side U1
 U1len = Dsqrt(U1(1) * U1(1) + U1(2) * U1(2) + U1(3) * U1(3)) 
 ! To compute directional cosines of side W12
@@ -89,9 +85,7 @@ call Vector_Product(U1,U2,W12,SPACEDIM)
 ! Length of vector W12
 W12len = Dsqrt(W12(1) * W12(1) + W12(2) * W12(2) + W12(3) * W12(3))
 ! Area of the face "nf" (denominator=2 for triangles, =1 for parallelograms) 
-! The estimation of pentagon and hexagon face areas is not mandatory as they are
-! only considered for "perimeter" zones, not for SASPH frontiers.
-if (nnodes<=4) BoundaryFace(Nf)%Area = W12len / float(3 - sidek)   
+BoundaryFace(Nf)%Area = W12len / float(3 - sidek)   
 ! Directional cosines of the normal to the face "nf"     
 nnlocal(1:SPACEDIM) = W12(1:SPACEDIM) / W12len
 ! Vector product ss=rrxnn; ss is the unity vector of the third local axis      
diff --git a/src/SA_SPH/EvaluateBER_TimeStep.f90 b/src/SA_SPH/EvaluateBER_TimeStep.f90
index dde36e3..1ed3c38 100644
--- a/src/SA_SPH/EvaluateBER_TimeStep.f90
+++ b/src/SA_SPH/EvaluateBER_TimeStep.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/FindBoundaryConvexEdges3D.f90 b/src/SA_SPH/FindBoundaryConvexEdges3D.f90
index eaca8ab..f9c2e45 100644
--- a/src/SA_SPH/FindBoundaryConvexEdges3D.f90
+++ b/src/SA_SPH/FindBoundaryConvexEdges3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -80,7 +79,7 @@ do kf=1,NBFfin
       nodes = BoundaryFace(nf)%nodes
       fk = nodes - 2
       NBFini = kf + 1
-      do kf1 = NBFini,NumFacce
+      do kf1 = NBFini, NumFacce
          nf1 = BFaceList(kf1)
          nt1 = BoundaryFace(nf1)%stretch
          EdgeFound = .False.
diff --git a/src/SA_SPH/FindBoundaryIntersection2D.f90 b/src/SA_SPH/FindBoundaryIntersection2D.f90
index 3287fe1..19872ba 100644
--- a/src/SA_SPH/FindBoundaryIntersection2D.f90
+++ b/src/SA_SPH/FindBoundaryIntersection2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/FindCloseBoundaryFaces3D.f90 b/src/SA_SPH/FindCloseBoundaryFaces3D.f90
index 82909ed..063c2c7 100644
--- a/src/SA_SPH/FindCloseBoundaryFaces3D.f90
+++ b/src/SA_SPH/FindCloseBoundaryFaces3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/FindCloseBoundarySides2D.f90 b/src/SA_SPH/FindCloseBoundarySides2D.f90
index 05ce191..4d150f2 100644
--- a/src/SA_SPH/FindCloseBoundarySides2D.f90
+++ b/src/SA_SPH/FindCloseBoundarySides2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/GridCellBoundaryFacesIntersections3D.f90 b/src/SA_SPH/GridCellBoundaryFacesIntersections3D.f90
index 3d4a35b..3ea9280 100644
--- a/src/SA_SPH/GridCellBoundaryFacesIntersections3D.f90
+++ b/src/SA_SPH/GridCellBoundaryFacesIntersections3D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/IWro2dro.f90 b/src/SA_SPH/IWro2dro.f90
index fcc81c6..405096c 100644
--- a/src/SA_SPH/IWro2dro.f90
+++ b/src/SA_SPH/IWro2dro.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/InterpolateBoundaryIntegrals2D.f90 b/src/SA_SPH/InterpolateBoundaryIntegrals2D.f90
index eb713eb..204849b 100644
--- a/src/SA_SPH/InterpolateBoundaryIntegrals2D.f90
+++ b/src/SA_SPH/InterpolateBoundaryIntegrals2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/InterpolateTable.f90 b/src/SA_SPH/InterpolateTable.f90
index 66ab2b9..d6f6267 100644
--- a/src/SA_SPH/InterpolateTable.f90
+++ b/src/SA_SPH/InterpolateTable.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/J2Wro2.f90 b/src/SA_SPH/J2Wro2.f90
index 936fbb1..527e175 100644
--- a/src/SA_SPH/J2Wro2.f90
+++ b/src/SA_SPH/J2Wro2.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/JdWsRn.f90 b/src/SA_SPH/JdWsRn.f90
index 2234fa6..ee71165 100644
--- a/src/SA_SPH/JdWsRn.f90
+++ b/src/SA_SPH/JdWsRn.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/SelectCloseBoundarySides2D.f90 b/src/SA_SPH/SelectCloseBoundarySides2D.f90
index 703b63f..d3739a6 100644
--- a/src/SA_SPH/SelectCloseBoundarySides2D.f90
+++ b/src/SA_SPH/SelectCloseBoundarySides2D.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/SA_SPH/WIntegr.f90 b/src/SA_SPH/WIntegr.f90
index 485c283..e30f43c 100644
--- a/src/SA_SPH/WIntegr.f90
+++ b/src/SA_SPH/WIntegr.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Strings/GetToken.f90 b/src/Strings/GetToken.f90
index 81bbe5b..8d66900 100644
--- a/src/Strings/GetToken.f90
+++ b/src/Strings/GetToken.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -25,7 +24,7 @@
 ! Description: 
 !----------------------------------------------------------------------------------------------------------------------------------
 
-character(100) function GetToken(ainp,itok,ioerr)
+character(80) function GetToken(ainp,itok,ioerr)
 !------------------------
 ! Modules
 !------------------------ 
diff --git a/src/Strings/lcase.f90 b/src/Strings/lcase.f90
index 778182b..c3d16a1 100644
--- a/src/Strings/lcase.f90
+++ b/src/Strings/lcase.f90
@@ -1,30 +1,30 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
 ! Program unit: lcase                                           
 ! Description: 
 !----------------------------------------------------------------------------------------------------------------------------------
-character(100) function lcase(ainp)
+
+character(80) function lcase(ainp)
 !------------------------
 ! Modules
 !------------------------ 
@@ -43,7 +43,7 @@ character(*) :: ainp
 !------------------------
 ! Initializations
 !------------------------
-do n=1,100
+do n=1,80
    lcase(n:n) = " "
 enddo
 !------------------------
diff --git a/src/Strings/ltrim.f90 b/src/Strings/ltrim.f90
index b50e887..d364590 100644
--- a/src/Strings/ltrim.f90
+++ b/src/Strings/ltrim.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Time_Integration/Euler.f90 b/src/Time_Integration/Euler.f90
index a60ec66..32279bb 100644
--- a/src/Time_Integration/Euler.f90
+++ b/src/Time_Integration/Euler.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
@@ -162,10 +161,14 @@ if (((DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet)>0).and.(Domain%tipo=="bsph")) &
 !       enddo
    if (DBSPH%n_w>0) then
       call DBSPH_kinematics
-! Time integration for the surface element velocity    
+! Time integration for the first surface element velocity    
+! Loop over the surface element to copy and paste, all over the elements,
+! the imposed kinematics of the first surface element 
+      pg_w(1)%coord(:) = pg_w(1)%coord(:) + dt * pg_w(1)%vel(:)
 !$omp parallel do default(none) shared(DBSPH,pg_w,dt) private(npi)
-      do npi=1,DBSPH%n_w
-         pg_w(npi)%coord(:) = pg_w(npi)%coord(:) + dt * pg_w(npi)%vel(:) 
+      do npi=2,DBSPH%n_w
+         pg_w(npi)%vel(:) = pg_w(1)%vel(:) 
+         pg_w(npi)%coord(:) = pg_w(npi)%coord(:) + dt * pg_w(1)%vel(:) 
       enddo
 !$omp end parallel do
    endif
@@ -200,7 +203,7 @@ if (((DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet)>0).and.(Domain%tipo=="bsph")) &
       call start_and_stop(3,9)
 ! To set the parameters for the fixed particles 
       if (Domain%NormFix)  call NormFix
-      allocate(uni_old(nag))
+      allocate (uni_old(nag))
 ! To update the auxiliary vector to count mobile "flu" particles (in "nag") 
       indarrayFlu = 0
       do npi=1,nag
@@ -223,26 +226,21 @@ if (((DBSPH%n_w+DBSPH%n_inlet+DBSPH%n_outlet)>0).and.(Domain%tipo=="bsph")) &
 !$omp parallel do default(none)                                                &
 !$omp private(npi,ii)                                                          &
 !$omp shared(nag,pg,med,dt,indarrayFlu,Array_Flu,Domain,uni_old)               &
-!$omp shared(beta,nPartIntorno_fw,it_corrente,NMedium)
+!$omp shared(beta,nPartIntorno_fw,it_corrente)
 ! Time integration of the continuity equation
    do ii=1,indarrayFlu
       npi = Array_Flu(ii)
 ! Gamma=1 for particles in the inner domain
       if (nPartIntorno_fw(npi)==0) pg(npi)%Gamma = one         
-      pg(npi)%dden = pg(npi)%dden / pg(npi)%Gamma
+      if (Domain%tipo=="bsph") pg(npi)%dden = pg(npi)%dden / pg(npi)%Gamma
 ! Boundary type is fixe or tapis or level(?)
       if (pg(npi)%koddens==0) then
-! SPH approxmation of density (alternative to the continuity equation)
-         if (NMedium==1) then
-            if (pg(npi)%FS==1) then
-               pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%sigma
-               if (pg(npi)%dens<(0.98d0*med(1)%den0)) pg(npi)%dens = 0.98d0 *  &
-                  med(1)%den0 
-               else
-                  pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%Gamma
-            endif
-            elseif (NMedium>1) then
-               pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%sigma_same_fluid
+         if (pg(npi)%FS==1) then
+            pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%sigma
+            if (pg(npi)%dens<(0.98d0*med(1)%den0)) pg(npi)%dens = 0.98d0 *  &
+               med(1)%den0 
+            else
+               pg(npi)%dens = pg(npi)%rhoSPH_new / pg(npi)%Gamma
          endif
 ! Interesting test, according to Ferrand et al. (2013)
 ! beta = exp(-30000.*(min((pg(npi)%sigma/pg(npi)%Gamma),1.)-1.)**2)
diff --git a/src/Time_Integration/Heun.f90 b/src/Time_Integration/Heun.f90
index 42a5bc2..65b663b 100644
--- a/src/Time_Integration/Heun.f90
+++ b/src/Time_Integration/Heun.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Time_Integration/inidt2.f90 b/src/Time_Integration/inidt2.f90
index e790257..bf0ff89 100644
--- a/src/Time_Integration/inidt2.f90
+++ b/src/Time_Integration/inidt2.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Time_Integration/rundt2.f90 b/src/Time_Integration/rundt2.f90
index 6b39b26..bb8babb 100644
--- a/src/Time_Integration/rundt2.f90
+++ b/src/Time_Integration/rundt2.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Time_Integration/stoptime.f90 b/src/Time_Integration/stoptime.f90
index 91f0c8d..b4f00a3 100644
--- a/src/Time_Integration/stoptime.f90
+++ b/src/Time_Integration/stoptime.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Time_Integration/time_integration.f90 b/src/Time_Integration/time_integration.f90
index 5256191..5f86309 100644
--- a/src/Time_Integration/time_integration.f90
+++ b/src/Time_Integration/time_integration.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
diff --git a/src/Time_Integration/time_integration_body_dynamics.f90 b/src/Time_Integration/time_integration_body_dynamics.f90
index 4ea0662..a8de0c9 100644
--- a/src/Time_Integration/time_integration_body_dynamics.f90
+++ b/src/Time_Integration/time_integration_body_dynamics.f90
@@ -1,23 +1,22 @@
 !----------------------------------------------------------------------------------------------------------------------------------
-! SPHERA (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
-! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-) 
-!      
-!     
-!   
-!      
-!  
+! SPHERA v.8.0 (Smoothed Particle Hydrodynamics research software; mesh-less Computational Fluid Dynamics code).
+! Copyright 2005-2015 (RSE SpA -formerly ERSE SpA, formerly CESI RICERCA, formerly CESI-)
 
-! This file is part of SPHERA.
-!  
-!  
-!  
-!  
+
+
+! SPHERA authors and email contact are provided on SPHERA documentation.
+
+! This file is part of SPHERA v.8.0.
+! SPHERA v.8.0 is free software: you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
 ! SPHERA is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
-! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-!  
-!  
-!  
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+! GNU General Public License for more details.
+! You should have received a copy of the GNU General Public License
+! along with SPHERA. If not, see <http://www.gnu.org/licenses/>.
 !----------------------------------------------------------------------------------------------------------------------------------
 
 !----------------------------------------------------------------------------------------------------------------------------------
